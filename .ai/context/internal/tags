!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACT_AGGRESSIVE	src/include/constants.hh	/^#define ACT_AGGRESSIVE /;"	d
ACT_AGGR_ALIGN	src/include/constants.hh	/^#define ACT_AGGR_ALIGN /;"	d
ACT_CLERIC	src/include/constants.hh	/^#define ACT_CLERIC /;"	d
ACT_GAIN	src/include/constants.hh	/^#define ACT_GAIN /;"	d
ACT_INDOORS	src/include/constants.hh	/^#define ACT_INDOORS /;"	d
ACT_IS_CHANGER	src/include/constants.hh	/^#define ACT_IS_CHANGER /;"	d
ACT_IS_HEALER	src/include/constants.hh	/^#define ACT_IS_HEALER /;"	d
ACT_MAGE	src/include/constants.hh	/^#define ACT_MAGE /;"	d
ACT_MORPH	src/include/constants.hh	/^#define ACT_MORPH /;"	d
ACT_NOALIGN	src/include/constants.hh	/^#define ACT_NOALIGN /;"	d
ACT_NOMORPH	src/include/constants.hh	/^#define ACT_NOMORPH /;"	d
ACT_NOPURGE	src/include/constants.hh	/^#define ACT_NOPURGE /;"	d
ACT_NOPUSH	src/include/constants.hh	/^#define ACT_NOPUSH /;"	d
ACT_NOSUMMON	src/include/constants.hh	/^#define ACT_NOSUMMON /;"	d
ACT_OUTDOORS	src/include/constants.hh	/^#define ACT_OUTDOORS /;"	d
ACT_PET	src/include/constants.hh	/^#define ACT_PET /;"	d
ACT_PRACTICE	src/include/constants.hh	/^#define ACT_PRACTICE /;"	d
ACT_PROG	src/include/MobProg.hh	/^#define ACT_PROG /;"	d
ACT_SCAVENGER	src/include/constants.hh	/^#define ACT_SCAVENGER /;"	d
ACT_SENTINEL	src/include/constants.hh	/^#define ACT_SENTINEL /;"	d
ACT_STAY	src/include/constants.hh	/^#define ACT_STAY /;"	d
ACT_STAY_AREA	src/include/constants.hh	/^#define ACT_STAY_AREA /;"	d
ACT_SUPERMOB	src/include/constants.hh	/^#define ACT_SUPERMOB /;"	d
ACT_THIEF	src/include/constants.hh	/^#define ACT_THIEF /;"	d
ACT_TRAIN	src/include/constants.hh	/^#define ACT_TRAIN /;"	d
ACT_UNDEAD	src/include/constants.hh	/^#define ACT_UNDEAD /;"	d
ACT_WARRIOR	src/include/constants.hh	/^#define ACT_WARRIOR /;"	d
ACT_WHOKNOWS1	src/include/constants.hh	/^#define ACT_WHOKNOWS1 /;"	d
ACT_WIMPY	src/include/constants.hh	/^#define ACT_WIMPY /;"	d
AC_BASH	src/include/constants.hh	/^#define AC_BASH /;"	d
AC_EXOTIC	src/include/constants.hh	/^#define AC_EXOTIC /;"	d
AC_PIERCE	src/include/constants.hh	/^#define AC_PIERCE /;"	d
AC_SLASH	src/include/constants.hh	/^#define AC_SLASH /;"	d
AFF_BERSERK	src/include/constants.hh	/^#define AFF_BERSERK /;"	d
AFF_BLIND	src/include/constants.hh	/^#define AFF_BLIND /;"	d
AFF_CALM	src/include/constants.hh	/^#define AFF_CALM /;"	d
AFF_CHARM	src/include/constants.hh	/^#define AFF_CHARM /;"	d
AFF_CURSE	src/include/constants.hh	/^#define AFF_CURSE /;"	d
AFF_DETECT_EVIL	src/include/constants.hh	/^#define AFF_DETECT_EVIL /;"	d
AFF_DETECT_GOOD	src/include/constants.hh	/^#define AFF_DETECT_GOOD /;"	d
AFF_DETECT_HIDDEN	src/include/constants.hh	/^#define AFF_DETECT_HIDDEN /;"	d
AFF_DETECT_INVIS	src/include/constants.hh	/^#define AFF_DETECT_INVIS /;"	d
AFF_DETECT_MAGIC	src/include/constants.hh	/^#define AFF_DETECT_MAGIC /;"	d
AFF_DIVINEREGEN	src/include/constants.hh	/^#define AFF_DIVINEREGEN /;"	d
AFF_FAERIE_FIRE	src/include/constants.hh	/^#define AFF_FAERIE_FIRE /;"	d
AFF_FEAR	src/include/constants.hh	/^#define AFF_FEAR /;"	d
AFF_FLAMESHIELD	src/include/constants.hh	/^#define AFF_FLAMESHIELD /;"	d
AFF_FLYING	src/include/constants.hh	/^#define AFF_FLYING /;"	d
AFF_HASTE	src/include/constants.hh	/^#define AFF_HASTE /;"	d
AFF_HIDE	src/include/constants.hh	/^#define AFF_HIDE /;"	d
AFF_INFRARED	src/include/constants.hh	/^#define AFF_INFRARED /;"	d
AFF_INVISIBLE	src/include/constants.hh	/^#define AFF_INVISIBLE /;"	d
AFF_NIGHT_VISION	src/include/constants.hh	/^#define AFF_NIGHT_VISION /;"	d
AFF_PASS_DOOR	src/include/constants.hh	/^#define AFF_PASS_DOOR /;"	d
AFF_PLAGUE	src/include/constants.hh	/^#define AFF_PLAGUE /;"	d
AFF_POISON	src/include/constants.hh	/^#define AFF_POISON /;"	d
AFF_PROTECT_EVIL	src/include/constants.hh	/^#define AFF_PROTECT_EVIL /;"	d
AFF_PROTECT_GOOD	src/include/constants.hh	/^#define AFF_PROTECT_GOOD /;"	d
AFF_REGENERATION	src/include/constants.hh	/^#define AFF_REGENERATION /;"	d
AFF_SANCTUARY	src/include/constants.hh	/^#define AFF_SANCTUARY /;"	d
AFF_SLOW	src/include/constants.hh	/^#define AFF_SLOW /;"	d
AFF_SNEAK	src/include/constants.hh	/^#define AFF_SNEAK /;"	d
AFF_STEEL	src/include/constants.hh	/^#define AFF_STEEL /;"	d
AFF_TALON	src/include/constants.hh	/^#define AFF_TALON /;"	d
ALL_GREET_PROG	src/include/MobProg.hh	/^#define ALL_GREET_PROG /;"	d
AO	src/include/telnet.hh	/^#define	AO	/;"	d
APPLY_AC	src/include/constants.hh	/^#define APPLY_AC /;"	d
APPLY_AGE	src/include/constants.hh	/^#define APPLY_AGE /;"	d
APPLY_BREW_UNIQUE	src/include/constants.hh	/^#define APPLY_BREW_UNIQUE	/;"	d
APPLY_CACHE_MEM_SIZE	src/include/memory.hh	/^#define APPLY_CACHE_MEM_SIZE /;"	d
APPLY_CHR	src/include/constants.hh	/^#define APPLY_CHR /;"	d
APPLY_CON	src/include/constants.hh	/^#define APPLY_CON /;"	d
APPLY_DAMROLL	src/include/constants.hh	/^#define APPLY_DAMROLL /;"	d
APPLY_DEX	src/include/constants.hh	/^#define APPLY_DEX /;"	d
APPLY_EXP_PCT	src/include/constants.hh	/^#define APPLY_EXP_PCT /;"	d
APPLY_FORGE_UNIQUE	src/include/constants.hh	/^#define APPLY_FORGE_UNIQUE	/;"	d
APPLY_GOLD	src/include/constants.hh	/^#define APPLY_GOLD /;"	d
APPLY_HIT	src/include/constants.hh	/^#define APPLY_HIT /;"	d
APPLY_HITROLL	src/include/constants.hh	/^#define APPLY_HITROLL /;"	d
APPLY_HP_BLOCK_PCT	src/include/constants.hh	/^#define APPLY_HP_BLOCK_PCT	/;"	d
APPLY_INT	src/include/constants.hh	/^#define APPLY_INT /;"	d
APPLY_LIDDA_AURA_UNIQUE	src/include/constants.hh	/^#define APPLY_LIDDA_AURA_UNIQUE	/;"	d
APPLY_MANA	src/include/constants.hh	/^#define APPLY_MANA /;"	d
APPLY_MANA_BLOCK_PCT	src/include/constants.hh	/^#define APPLY_MANA_BLOCK_PCT	/;"	d
APPLY_MANA_COST_PCT	src/include/constants.hh	/^#define APPLY_MANA_COST_PCT	/;"	d
APPLY_NECRO_PIERCE_UNIQUE	src/include/constants.hh	/^#define APPLY_NECRO_PIERCE_UNIQUE	/;"	d
APPLY_NONE	src/include/constants.hh	/^#define APPLY_NONE /;"	d
APPLY_PRIESTESS_UNIQUE	src/include/constants.hh	/^#define APPLY_PRIESTESS_UNIQUE	/;"	d
APPLY_QUESTPOINTS	src/include/constants.hh	/^#define APPLY_QUESTPOINTS	/;"	d
APPLY_SAVES	src/include/constants.hh	/^#define APPLY_SAVES /;"	d
APPLY_SAVING_BREATH	src/include/constants.hh	/^#define APPLY_SAVING_BREATH /;"	d
APPLY_SAVING_PARA	src/include/constants.hh	/^#define APPLY_SAVING_PARA /;"	d
APPLY_SAVING_PETRI	src/include/constants.hh	/^#define APPLY_SAVING_PETRI /;"	d
APPLY_SAVING_ROD	src/include/constants.hh	/^#define APPLY_SAVING_ROD /;"	d
APPLY_SAVING_SPELL	src/include/constants.hh	/^#define APPLY_SAVING_SPELL /;"	d
APPLY_SCRIBE_UNIQUE	src/include/constants.hh	/^#define APPLY_SCRIBE_UNIQUE	/;"	d
APPLY_SEX	src/include/constants.hh	/^#define APPLY_SEX /;"	d
APPLY_SKILLPOINTS	src/include/constants.hh	/^#define APPLY_SKILLPOINTS	/;"	d
APPLY_SPELL_DAMAGE_PCT	src/include/constants.hh	/^#define APPLY_SPELL_DAMAGE_PCT	/;"	d
APPLY_STAM	src/include/constants.hh	/^#define APPLY_STAM /;"	d
APPLY_STAM_COST_PCT	src/include/constants.hh	/^#define APPLY_STAM_COST_PCT	/;"	d
APPLY_STR	src/include/constants.hh	/^#define APPLY_STR /;"	d
APPLY_TANK_UNIQUE	src/include/constants.hh	/^#define APPLY_TANK_UNIQUE	/;"	d
APPLY_VAMP_BONUS_PCT	src/include/constants.hh	/^#define APPLY_VAMP_BONUS_PCT	/;"	d
APPLY_WIS	src/include/constants.hh	/^#define APPLY_WIS /;"	d
APPLY_WPN_DAMAGE_PCT	src/include/constants.hh	/^#define APPLY_WPN_DAMAGE_PCT	/;"	d
AREA_DIR	src/include/constants.hh	/^#define AREA_DIR /;"	d
AREA_LIST	src/include/constants.hh	/^#define AREA_LIST /;"	d
AREA_TYPE_ALL	src/include/constants.hh	/^#define AREA_TYPE_ALL /;"	d
AREA_TYPE_ARENA	src/include/constants.hh	/^#define AREA_TYPE_ARENA /;"	d
AREA_TYPE_CLAN	src/include/constants.hh	/^#define AREA_TYPE_CLAN /;"	d
AREA_TYPE_HERO	src/include/constants.hh	/^#define AREA_TYPE_HERO /;"	d
AREA_TYPE_IMMS	src/include/constants.hh	/^#define AREA_TYPE_IMMS /;"	d
AREA_TYPE_NORM	src/include/constants.hh	/^#define AREA_TYPE_NORM /;"	d
AREA_TYPE_XXX	src/include/constants.hh	/^#define AREA_TYPE_XXX /;"	d
ARENA_DIR	src/duel.cc	/^#define ARENA_DIR /;"	d	file:
ARENA_FILE	src/duel.cc	/^#define ARENA_FILE /;"	d	file:
ARG_1	src/edit.cc	/^#define ARG_1 /;"	d	file:
ARG_2	src/edit.cc	/^#define ARG_2 /;"	d	file:
ARMOR_ARMS	src/include/lootv2.hh	/^#define ARMOR_ARMS	/;"	d
ARMOR_BODY	src/include/lootv2.hh	/^#define ARMOR_BODY	/;"	d
ARMOR_FEET	src/include/lootv2.hh	/^#define ARMOR_FEET	/;"	d
ARMOR_FINGER	src/include/lootv2.hh	/^#define ARMOR_FINGER	/;"	d
ARMOR_FLOATING	src/include/lootv2.hh	/^#define ARMOR_FLOATING	/;"	d
ARMOR_HANDS	src/include/lootv2.hh	/^#define ARMOR_HANDS	/;"	d
ARMOR_HEAD	src/include/lootv2.hh	/^#define ARMOR_HEAD	/;"	d
ARMOR_HOLD	src/include/lootv2.hh	/^#define ARMOR_HOLD	/;"	d
ARMOR_LEGS	src/include/lootv2.hh	/^#define ARMOR_LEGS	/;"	d
ARMOR_LIGHT	src/include/lootv2.hh	/^#define ARMOR_LIGHT	/;"	d
ARMOR_NECK	src/include/lootv2.hh	/^#define ARMOR_NECK	/;"	d
ARMOR_SHIELD	src/include/lootv2.hh	/^#define ARMOR_SHIELD	/;"	d
ARMOR_TORSO	src/include/lootv2.hh	/^#define ARMOR_TORSO	/;"	d
ARMOR_WAIST	src/include/lootv2.hh	/^#define ARMOR_WAIST	/;"	d
ARMOR_WRIST	src/include/lootv2.hh	/^#define ARMOR_WRIST	/;"	d
ASSIST_ALIGN	src/include/constants.hh	/^#define ASSIST_ALIGN /;"	d
ASSIST_ALL	src/include/constants.hh	/^#define ASSIST_ALL /;"	d
ASSIST_GUARD	src/include/constants.hh	/^#define ASSIST_GUARD /;"	d
ASSIST_PLAYERS	src/include/constants.hh	/^#define ASSIST_PLAYERS /;"	d
ASSIST_RACE	src/include/constants.hh	/^#define ASSIST_RACE /;"	d
ASSIST_VNUM	src/include/constants.hh	/^#define ASSIST_VNUM /;"	d
ATTR_BASE	src/include/Character.hh	/^#define ATTR_BASE(/;"	d
ATTR_BASE	src/include/macros.hh	/^#define ATTR_BASE(/;"	d
AYT	src/include/telnet.hh	/^#define	AYT	/;"	d
Actable	src/include/Actable.hh	/^class Actable {$/;"	c
Affect	src/include/affect/Affect.hh	/^class Affect :$/;"	c	namespace:affect
Area	src/Area.cc	/^Area(World& w, const String& file_name) : world(w), file_name(file_name) {$/;"	f	class:Area
Area	src/include/Area.hh	/^class Area$/;"	c
Arena	src/include/Duel.hh	/^        Arena() {}$/;"	f	class:Duel::Arena
Arena	src/include/Duel.hh	/^    class Arena$/;"	c	class:Duel
Args	src/include/event/event.hh	/^typedef std::map<const char *, void *> Args;$/;"	t	namespace:event
Auction	src/include/Auction.hh	/^	Auction() {}$/;"	f	class:Auction
Auction	src/include/Auction.hh	/^class Auction$/;"	c
BACKUP_DIR	src/include/constants.hh	/^#define BACKUP_DIR /;"	d
BAN_ALL	src/include/constants.hh	/^#define BAN_ALL /;"	d
BAN_FILE	src/include/constants.hh	/^#define BAN_FILE /;"	d
BAN_NEWBIES	src/include/constants.hh	/^#define BAN_NEWBIES /;"	d
BAN_PERMIT	src/include/constants.hh	/^#define BAN_PERMIT /;"	d
BAN_PREFIX	src/include/constants.hh	/^#define BAN_PREFIX /;"	d
BAN_SUFFIX	src/include/constants.hh	/^#define BAN_SUFFIX /;"	d
BINDIR	src/Makefile	/^BINDIR  = ..\/bin$/;"	m
BIN_DIR	src/include/constants.hh	/^#define BIN_DIR /;"	d
BLINK	src/include/constants.hh	/^#define BLINK /;"	d
BLUE	src/include/constants.hh	/^#define BLUE /;"	d
BOLD	src/include/constants.hh	/^#define BOLD /;"	d
BOOT_FILE	src/include/constants.hh	/^#define BOOT_FILE /;"	d
BOOT_PROG	src/include/MobProg.hh	/^#define BOOT_PROG	/;"	d
BREAK	src/include/telnet.hh	/^#define	BREAK	/;"	d
BRIBE_PROG	src/include/MobProg.hh	/^#define BRIBE_PROG /;"	d
BUG_FILE	src/include/constants.hh	/^#define BUG_FILE /;"	d
BUY_PROG	src/include/MobProg.hh	/^#define BUY_PROG /;"	d
B_BLACK	src/include/constants.hh	/^#define B_BLACK /;"	d
B_BLUE	src/include/constants.hh	/^#define B_BLUE /;"	d
B_CYAN	src/include/constants.hh	/^#define B_CYAN /;"	d
B_GREEN	src/include/constants.hh	/^#define B_GREEN /;"	d
B_GREY	src/include/constants.hh	/^#define B_GREY /;"	d
B_MAGENTA	src/include/constants.hh	/^#define B_MAGENTA /;"	d
B_RED	src/include/constants.hh	/^#define B_RED /;"	d
B_YELLOW	src/include/constants.hh	/^#define B_YELLOW /;"	d
Battle	src/include/Battle.hh	/^	Battle() {}$/;"	f	class:Battle
Battle	src/include/Battle.hh	/^class Battle$/;"	c
BreakConnectState	src/include/conn/State.hh	/^struct BreakConnectState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
CAND_CHAR	src/include/tables.hh	/^#define CAND_CHAR	/;"	d
CAND_MOB	src/include/tables.hh	/^#define CAND_MOB	/;"	d
CAND_OBJ	src/include/tables.hh	/^#define CAND_OBJ	/;"	d
CAND_PLAYER	src/include/tables.hh	/^#define CAND_PLAYER	/;"	d
CAND_ROOM	src/include/tables.hh	/^#define	CAND_ROOM	/;"	d
CAN_FLY	src/include/Character.hh	/^#define CAN_FLY(/;"	d
CAN_FLY	src/include/macros.hh	/^#define CAN_FLY(/;"	d
CAN_USE_RSKILL	src/remort.cc	/^bool CAN_USE_RSKILL(Character *ch, skill::type sn)$/;"	f
CAN_WEAR	src/include/Object.hh	/^#define CAN_WEAR(/;"	d
CAN_WEAR	src/include/macros.hh	/^#define CAN_WEAR(/;"	d
CENSOR_CHAN	src/include/constants.hh	/^#define CENSOR_CHAN	/;"	d
CENSOR_SPAM	src/include/constants.hh	/^#define CENSOR_SPAM	/;"	d
CH	src/include/macros.hh	/^#define CH(/;"	d
CHANGES_FILE	src/include/constants.hh	/^#define CHANGES_FILE /;"	d
CHAN_AUCTION	src/include/constants.hh	/^#define CHAN_AUCTION	/;"	d
CHAN_CLAN	src/include/constants.hh	/^#define CHAN_CLAN	/;"	d
CHAN_FLAME	src/include/constants.hh	/^#define CHAN_FLAME	/;"	d
CHAN_GOSSIP	src/include/constants.hh	/^#define CHAN_GOSSIP	/;"	d
CHAN_GRATS	src/include/constants.hh	/^#define CHAN_GRATS	/;"	d
CHAN_IC	src/include/constants.hh	/^#define CHAN_IC	/;"	d
CHAN_IMMTALK	src/include/constants.hh	/^#define CHAN_IMMTALK	/;"	d
CHAN_MUSIC	src/include/constants.hh	/^#define CHAN_MUSIC	/;"	d
CHAN_PRAY	src/include/constants.hh	/^#define CHAN_PRAY	/;"	d
CHAN_QA	src/include/constants.hh	/^#define CHAN_QA	/;"	d
CHAN_QWEST	src/include/constants.hh	/^#define CHAN_QWEST	/;"	d
CHARTYPE_MATCH	src/find.cc	/^#define CHARTYPE_MATCH(/;"	d	file:
CHARTYPE_MATCH	src/include/macros.hh	/^#define CHARTYPE_MATCH(/;"	d
CHARTYPE_TEST	src/find.cc	/^#define CHARTYPE_TEST(/;"	d	file:
CHARTYPE_TEST	src/include/macros.hh	/^#define CHARTYPE_TEST(/;"	d
CHVNUM_FILE	src/include/constants.hh	/^#define CHVNUM_FILE /;"	d
CLAN_DIR	src/clan-edit.cc	/^#define CLAN_DIR /;"	d	file:
CLAN_FILE	src/clan-edit.cc	/^#define CLAN_FILE /;"	d	file:
CLEAR	src/include/constants.hh	/^#define CLEAR /;"	d
COMM_AFK	src/include/constants.hh	/^#define COMM_AFK /;"	d
COMM_ATBPROMPT	src/include/constants.hh	/^#define COMM_ATBPROMPT /;"	d
COMM_BRIEF	src/include/constants.hh	/^#define COMM_BRIEF /;"	d
COMM_COMBINE	src/include/constants.hh	/^#define COMM_COMBINE /;"	d
COMM_COMPACT	src/include/constants.hh	/^#define COMM_COMPACT /;"	d
COMM_DEAF	src/include/constants.hh	/^#define COMM_DEAF /;"	d
COMM_NOANNOUNCE	src/include/constants.hh	/^#define COMM_NOANNOUNCE /;"	d
COMM_NOAUCTION	src/include/constants.hh	/^#define COMM_NOAUCTION /;"	d
COMM_NOCHANNELS	src/include/constants.hh	/^#define COMM_NOCHANNELS /;"	d
COMM_NOCLAN	src/include/constants.hh	/^#define COMM_NOCLAN /;"	d
COMM_NOEMOTE	src/include/constants.hh	/^#define COMM_NOEMOTE /;"	d
COMM_NOFLAME	src/include/constants.hh	/^#define COMM_NOFLAME /;"	d
COMM_NOGOSSIP	src/include/constants.hh	/^#define COMM_NOGOSSIP /;"	d
COMM_NOGRATS	src/include/constants.hh	/^#define COMM_NOGRATS /;"	d
COMM_NOIC	src/include/constants.hh	/^#define COMM_NOIC /;"	d
COMM_NOMUSIC	src/include/constants.hh	/^#define COMM_NOMUSIC /;"	d
COMM_NOPAGE	src/include/constants.hh	/^#define COMM_NOPAGE /;"	d
COMM_NOPRAY	src/include/constants.hh	/^#define COMM_NOPRAY /;"	d
COMM_NOQUERY	src/include/constants.hh	/^#define COMM_NOQUERY /;"	d
COMM_NOQUESTION	src/include/constants.hh	/^#define COMM_NOQUESTION /;"	d
COMM_NOQWEST	src/include/constants.hh	/^#define COMM_NOQWEST /;"	d
COMM_NOSOCIAL	src/include/constants.hh	/^#define COMM_NOSOCIAL /;"	d
COMM_NOWIZ	src/include/constants.hh	/^#define COMM_NOWIZ /;"	d
COMM_PROMPT	src/include/constants.hh	/^#define COMM_PROMPT /;"	d
COMM_QUIET	src/include/constants.hh	/^#define COMM_QUIET /;"	d
COMM_RPRAY	src/include/constants.hh	/^#define COMM_RPRAY	/;"	d
COMM_SHOW_AFFECTS	src/include/constants.hh	/^#define COMM_SHOW_AFFECTS /;"	d
COMPILE.c	src/Makefile	/^COMPILE.c  = $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c$/;"	m
COMPILE.cc	src/Makefile	/^COMPILE.cc = $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c$/;"	m
COM_INGORE	src/include/interp.hh	/^#define COM_INGORE /;"	d
COND_DRUNK	src/include/constants.hh	/^#define COND_DRUNK /;"	d
COND_FULL	src/include/constants.hh	/^#define COND_FULL /;"	d
COND_HUNGER	src/include/constants.hh	/^#define COND_HUNGER /;"	d
COND_THIRST	src/include/constants.hh	/^#define COND_THIRST /;"	d
CONFIG_FILE	src/include/constants.hh	/^#define CONFIG_FILE /;"	d
CONT_CLOSEABLE	src/include/constants.hh	/^#define CONT_CLOSEABLE /;"	d
CONT_CLOSED	src/include/constants.hh	/^#define CONT_CLOSED /;"	d
CONT_LOCKED	src/include/constants.hh	/^#define CONT_LOCKED /;"	d
CONT_PICKPROOF	src/include/constants.hh	/^#define CONT_PICKPROOF /;"	d
CONT_PUT_ON	src/include/constants.hh	/^#define CONT_PUT_ON /;"	d
COPYOVER_FILE	src/include/constants.hh	/^#define COPYOVER_FILE /;"	d
COPYOVER_ITEMS	src/include/constants.hh	/^#define COPYOVER_ITEMS	/;"	d
COPYOVER_LOG	src/include/constants.hh	/^#define COPYOVER_LOG	/;"	d
CPPFLAGS	src/Makefile	/^CPPFLAGS = ${STD} ${WARNING} ${DEBUG} ${DEFINE} ${INCLUDE}$/;"	m
CPP_OBJECTS	src/Makefile	/^CPP_OBJECTS = $(patsubst %,$(OBJDIR)\/%.o,$(basename $(CPP_SOURCES)))$/;"	m
CPP_SOURCES	src/Makefile	/^CPP_SOURCES := $(shell find . -maxdepth 2 -name '*.cc' -print | sed 's|.\/||' | sort)$/;"	m
CSLOT_CHAN_ANNOUNCE	src/include/constants.hh	/^#define CSLOT_CHAN_ANNOUNCE	/;"	d
CSLOT_CHAN_AUCTION	src/include/constants.hh	/^#define CSLOT_CHAN_AUCTION	/;"	d
CSLOT_CHAN_CLAN	src/include/constants.hh	/^#define CSLOT_CHAN_CLAN	/;"	d
CSLOT_CHAN_FLAME	src/include/constants.hh	/^#define CSLOT_CHAN_FLAME	/;"	d
CSLOT_CHAN_GOSSIP	src/include/constants.hh	/^#define CSLOT_CHAN_GOSSIP	/;"	d
CSLOT_CHAN_GRATS	src/include/constants.hh	/^#define CSLOT_CHAN_GRATS	/;"	d
CSLOT_CHAN_GTELL	src/include/constants.hh	/^#define CSLOT_CHAN_GTELL	/;"	d
CSLOT_CHAN_IC	src/include/constants.hh	/^#define CSLOT_CHAN_IC	/;"	d
CSLOT_CHAN_IMM	src/include/constants.hh	/^#define CSLOT_CHAN_IMM	/;"	d
CSLOT_CHAN_MUSIC	src/include/constants.hh	/^#define CSLOT_CHAN_MUSIC	/;"	d
CSLOT_CHAN_PAGE	src/include/constants.hh	/^#define CSLOT_CHAN_PAGE	/;"	d
CSLOT_CHAN_PRAY	src/include/constants.hh	/^#define CSLOT_CHAN_PRAY	/;"	d
CSLOT_CHAN_QA	src/include/constants.hh	/^#define CSLOT_CHAN_QA	/;"	d
CSLOT_CHAN_QTELL	src/include/constants.hh	/^#define CSLOT_CHAN_QTELL	/;"	d
CSLOT_CHAN_QWEST	src/include/constants.hh	/^#define CSLOT_CHAN_QWEST	/;"	d
CSLOT_CHAN_SAY	src/include/constants.hh	/^#define CSLOT_CHAN_SAY	/;"	d
CSLOT_CHAN_SOCIAL	src/include/constants.hh	/^#define CSLOT_CHAN_SOCIAL	/;"	d
CSLOT_CHAN_SPOUSE	src/include/constants.hh	/^#define CSLOT_CHAN_SPOUSE	/;"	d
CSLOT_CHAN_TELL	src/include/constants.hh	/^#define CSLOT_CHAN_TELL	/;"	d
CSLOT_MISC_INV	src/include/constants.hh	/^#define CSLOT_MISC_INV	/;"	d
CSLOT_MISC_MOBILES	src/include/constants.hh	/^#define CSLOT_MISC_MOBILES	/;"	d
CSLOT_MISC_OBJECTS	src/include/constants.hh	/^#define CSLOT_MISC_OBJECTS	/;"	d
CSLOT_MISC_PLAYERS	src/include/constants.hh	/^#define CSLOT_MISC_PLAYERS	/;"	d
CSLOT_MISC_ROOM	src/include/constants.hh	/^#define CSLOT_MISC_ROOM	/;"	d
CSLOT_OLDSCORE_AKILL	src/include/constants.hh	/^#define CSLOT_OLDSCORE_AKILL	/;"	d
CSLOT_OLDSCORE_ALIGN	src/include/constants.hh	/^#define CSLOT_OLDSCORE_ALIGN	/;"	d
CSLOT_OLDSCORE_ARMOR	src/include/constants.hh	/^#define CSLOT_OLDSCORE_ARMOR	/;"	d
CSLOT_OLDSCORE_CLASS	src/include/constants.hh	/^#define CSLOT_OLDSCORE_CLASS	/;"	d
CSLOT_OLDSCORE_DICEROLL	src/include/constants.hh	/^#define CSLOT_OLDSCORE_DICEROLL	/;"	d
CSLOT_OLDSCORE_GAIN	src/include/constants.hh	/^#define CSLOT_OLDSCORE_GAIN	/;"	d
CSLOT_OLDSCORE_MONEY	src/include/constants.hh	/^#define CSLOT_OLDSCORE_MONEY	/;"	d
CSLOT_OLDSCORE_NAME	src/include/constants.hh	/^#define CSLOT_OLDSCORE_NAME	/;"	d
CSLOT_OLDSCORE_PKILL	src/include/constants.hh	/^#define CSLOT_OLDSCORE_PKILL	/;"	d
CSLOT_OLDSCORE_POINTS	src/include/constants.hh	/^#define CSLOT_OLDSCORE_POINTS	/;"	d
CSLOT_OLDSCORE_QP	src/include/constants.hh	/^#define CSLOT_OLDSCORE_QP	/;"	d
CSLOT_OLDSCORE_RPP	src/include/constants.hh	/^#define CSLOT_OLDSCORE_RPP	/;"	d
CSLOT_OLDSCORE_SP	src/include/constants.hh	/^#define CSLOT_OLDSCORE_SP	/;"	d
CSLOT_OLDSCORE_STAT	src/include/constants.hh	/^#define CSLOT_OLDSCORE_STAT	/;"	d
CSLOT_OLDSCORE_WEIGHT	src/include/constants.hh	/^#define CSLOT_OLDSCORE_WEIGHT	/;"	d
CSLOT_SCORE_ALIGN	src/include/constants.hh	/^#define CSLOT_SCORE_ALIGN	/;"	d
CSLOT_SCORE_ARMOR	src/include/constants.hh	/^#define CSLOT_SCORE_ARMOR	/;"	d
CSLOT_SCORE_BORDER	src/include/constants.hh	/^#define CSLOT_SCORE_BORDER	/;"	d
CSLOT_SCORE_CLASS	src/include/constants.hh	/^#define CSLOT_SCORE_CLASS	/;"	d
CSLOT_SCORE_DICENAME	src/include/constants.hh	/^#define CSLOT_SCORE_DICENAME	/;"	d
CSLOT_SCORE_DICENUM	src/include/constants.hh	/^#define CSLOT_SCORE_DICENUM	/;"	d
CSLOT_SCORE_ENCUMB	src/include/constants.hh	/^#define CSLOT_SCORE_ENCUMB	/;"	d
CSLOT_SCORE_FLAME	src/include/constants.hh	/^#define CSLOT_SCORE_FLAME	/;"	d
CSLOT_SCORE_HEALTHNAME	src/include/constants.hh	/^#define CSLOT_SCORE_HEALTHNAME	/;"	d
CSLOT_SCORE_HEALTHNUM	src/include/constants.hh	/^#define CSLOT_SCORE_HEALTHNUM	/;"	d
CSLOT_SCORE_LEVEL	src/include/constants.hh	/^#define CSLOT_SCORE_LEVEL	/;"	d
CSLOT_SCORE_MAXSTAT	src/include/constants.hh	/^#define CSLOT_SCORE_MAXSTAT	/;"	d
CSLOT_SCORE_NAME	src/include/constants.hh	/^#define CSLOT_SCORE_NAME	/;"	d
CSLOT_SCORE_PKRANK	src/include/constants.hh	/^#define CSLOT_SCORE_PKRANK	/;"	d
CSLOT_SCORE_PKRECORD	src/include/constants.hh	/^#define CSLOT_SCORE_PKRECORD	/;"	d
CSLOT_SCORE_POINTNAME	src/include/constants.hh	/^#define CSLOT_SCORE_POINTNAME	/;"	d
CSLOT_SCORE_POINTNUM	src/include/constants.hh	/^#define CSLOT_SCORE_POINTNUM	/;"	d
CSLOT_SCORE_POSITION	src/include/constants.hh	/^#define CSLOT_SCORE_POSITION	/;"	d
CSLOT_SCORE_STAT	src/include/constants.hh	/^#define CSLOT_SCORE_STAT	/;"	d
CSLOT_SCORE_TITLE	src/include/constants.hh	/^#define CSLOT_SCORE_TITLE	/;"	d
CSLOT_SCORE_TORCH	src/include/constants.hh	/^#define CSLOT_SCORE_TORCH	/;"	d
CSLOT_SCORE_WEALTH	src/include/constants.hh	/^#define CSLOT_SCORE_WEALTH	/;"	d
CSLOT_SCORE_XPNAME	src/include/constants.hh	/^#define CSLOT_SCORE_XPNAME	/;"	d
CSLOT_SCORE_XPNUM	src/include/constants.hh	/^#define CSLOT_SCORE_XPNUM	/;"	d
CURRENT_VERSION	src/save.cc	/^int CURRENT_VERSION = 21;   \/* version number for pfiles *\/$/;"	v
CXX	src/Makefile	/^CXX      = g++$/;"	m
CYAN	src/include/constants.hh	/^#define CYAN /;"	d
C_BLACK	src/include/constants.hh	/^#define C_BLACK /;"	d
C_BLUE	src/include/constants.hh	/^#define C_BLUE /;"	d
C_B_BLUE	src/include/constants.hh	/^#define C_B_BLUE /;"	d
C_B_CYAN	src/include/constants.hh	/^#define C_B_CYAN /;"	d
C_B_GREEN	src/include/constants.hh	/^#define C_B_GREEN /;"	d
C_B_GREY	src/include/constants.hh	/^#define C_B_GREY /;"	d
C_B_MAGENTA	src/include/constants.hh	/^#define C_B_MAGENTA /;"	d
C_B_RED	src/include/constants.hh	/^#define C_B_RED /;"	d
C_B_WHITE	src/include/constants.hh	/^#define C_B_WHITE /;"	d
C_B_YELLOW	src/include/constants.hh	/^#define C_B_YELLOW /;"	d
C_CYAN	src/include/constants.hh	/^#define C_CYAN /;"	d
C_FLASH	src/include/constants.hh	/^#define C_FLASH /;"	d
C_GREEN	src/include/constants.hh	/^#define C_GREEN /;"	d
C_MAGENTA	src/include/constants.hh	/^#define C_MAGENTA /;"	d
C_RED	src/include/constants.hh	/^#define C_RED /;"	d
C_REVERSE	src/include/constants.hh	/^#define C_REVERSE /;"	d
C_UNDERLINE	src/include/constants.hh	/^#define C_UNDERLINE /;"	d
C_WHITE	src/include/constants.hh	/^#define C_WHITE /;"	d
C_YELLOW	src/include/constants.hh	/^#define C_YELLOW /;"	d
Channel	src/include/util/Image.hh	/^	enum Channel { red = 0, green, blue, alpha };$/;"	g	class:util::Image
Character	src/Character.cc	/^Character::Character() {$/;"	f	class:Character
Character	src/include/Character.hh	/^class Character :$/;"	c
Clan	src/include/Clan.hh	/^    Clan() {}$/;"	f	class:Clan
Clan	src/include/Clan.hh	/^class Clan$/;"	c
CleT_table	src/tables.cc	/^const std::vector<CleT_type> CleT_table = {$/;"	v
CleT_type	src/include/tables.hh	/^struct CleT_type$/;"	s
ClosedState	src/include/conn/State.hh	/^struct ClosedState  : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
Cloudless	src/include/Weather.hh	/^    	Cloudless,$/;"	e	enum:Weather::Sky
Cloudy	src/include/Weather.hh	/^    	Cloudy,$/;"	e	enum:Weather::Sky
ConfirmNewNameState	src/include/conn/State.hh	/^struct ConfirmNewNameState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
ConfirmNewPassState	src/include/conn/State.hh	/^struct ConfirmNewPassState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
Coordinate	src/include/worldmap/Coordinate.hh	/^	Coordinate() : x(-1), y(0) {}$/;"	f	class:worldmap::Coordinate
Coordinate	src/include/worldmap/Coordinate.hh	/^	Coordinate(const Coordinate& c) : x(c.x), y(c.y) {}$/;"	f	class:worldmap::Coordinate
Coordinate	src/include/worldmap/Coordinate.hh	/^	Coordinate(const String& str) : Coordinate() {$/;"	f	class:worldmap::Coordinate
Coordinate	src/include/worldmap/Coordinate.hh	/^	Coordinate(int nx, int ny) : Coordinate() {$/;"	f	class:worldmap::Coordinate
Coordinate	src/include/worldmap/Coordinate.hh	/^	Coordinate(int value) : Coordinate() {$/;"	f	class:worldmap::Coordinate
Coordinate	src/include/worldmap/Coordinate.hh	/^class Coordinate {$/;"	c	namespace:worldmap
CopyoverRecoverState	src/include/conn/State.hh	/^struct CopyoverRecoverState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
DAM_ACID	src/include/constants.hh	/^#define DAM_ACID /;"	d
DAM_BASH	src/include/constants.hh	/^#define DAM_BASH /;"	d
DAM_CHARM	src/include/constants.hh	/^#define DAM_CHARM /;"	d
DAM_COLD	src/include/constants.hh	/^#define DAM_COLD /;"	d
DAM_DISEASE	src/include/constants.hh	/^#define DAM_DISEASE /;"	d
DAM_DROWNING	src/include/constants.hh	/^#define DAM_DROWNING /;"	d
DAM_ELECTRICITY	src/include/constants.hh	/^#define DAM_ELECTRICITY /;"	d
DAM_ENERGY	src/include/constants.hh	/^#define DAM_ENERGY /;"	d
DAM_FIRE	src/include/constants.hh	/^#define DAM_FIRE /;"	d
DAM_HARM	src/include/constants.hh	/^#define DAM_HARM /;"	d
DAM_HOLY	src/include/constants.hh	/^#define DAM_HOLY /;"	d
DAM_IRON	src/include/constants.hh	/^#define DAM_IRON /;"	d
DAM_LIGHT	src/include/constants.hh	/^#define DAM_LIGHT /;"	d
DAM_MENTAL	src/include/constants.hh	/^#define DAM_MENTAL /;"	d
DAM_NEGATIVE	src/include/constants.hh	/^#define DAM_NEGATIVE /;"	d
DAM_NONE	src/include/constants.hh	/^#define DAM_NONE /;"	d
DAM_OTHER	src/include/constants.hh	/^#define DAM_OTHER /;"	d
DAM_PIERCE	src/include/constants.hh	/^#define DAM_PIERCE /;"	d
DAM_POISON	src/include/constants.hh	/^#define DAM_POISON /;"	d
DAM_SILVER	src/include/constants.hh	/^#define DAM_SILVER /;"	d
DAM_SLASH	src/include/constants.hh	/^#define DAM_SLASH /;"	d
DAM_SOUND	src/include/constants.hh	/^#define DAM_SOUND /;"	d
DAM_WATER	src/include/constants.hh	/^#define DAM_WATER /;"	d
DAM_WOOD	src/include/constants.hh	/^#define DAM_WOOD /;"	d
DATE	src/Makefile	/^DATE=`date +%Y-%m-%d`$/;"	m
DAZE_STATE	src/include/Character.hh	/^#define DAZE_STATE(/;"	d
DAZE_STATE	src/include/macros.hh	/^#define DAZE_STATE(/;"	d
DB_FILE	src/include/constants.hh	/^#define DB_FILE /;"	d
DEATH_PROG	src/include/MobProg.hh	/^#define DEATH_PROG /;"	d
DEBUG	src/Makefile	/^DEBUG    = -ggdb$/;"	m
DECLARE_DO_FUN	src/include/declare.hh	/^#define DECLARE_DO_FUN(/;"	d
DECLARE_SPEC_FUN	src/include/declare.hh	/^#define DECLARE_SPEC_FUN(/;"	d
DECLARE_SPELL_FUN	src/include/magic.hh	/^#define DECLARE_SPELL_FUN(/;"	d
DEFENSE_MOD_MEM_SIZE	src/include/memory.hh	/^#define DEFENSE_MOD_MEM_SIZE /;"	d
DEFINE	src/Makefile	/^DEFINE   = -Dunix -DSQL -DDEBUG -DIPV6$/;"	m
DEPARTED_FILE	src/include/constants.hh	/^#define DEPARTED_FILE	/;"	d
DEPDIR	src/Makefile	/^DEPDIR  = .dep$/;"	m
DEPFLAGS	src/Makefile	/^DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)\/$*.Td$/;"	m
DICE_BONUS	src/include/constants.hh	/^#define DICE_BONUS /;"	d
DICE_NUMBER	src/include/constants.hh	/^#define DICE_NUMBER /;"	d
DICE_TYPE	src/include/constants.hh	/^#define DICE_TYPE /;"	d
DIR_DOWN	src/include/constants.hh	/^#define DIR_DOWN /;"	d
DIR_EAST	src/include/constants.hh	/^#define DIR_EAST /;"	d
DIR_NORTH	src/include/constants.hh	/^#define DIR_NORTH /;"	d
DIR_SOUTH	src/include/constants.hh	/^#define DIR_SOUTH /;"	d
DIR_UP	src/include/constants.hh	/^#define DIR_UP /;"	d
DIR_WEST	src/include/constants.hh	/^#define DIR_WEST /;"	d
DISABLED_FILE	src/include/constants.hh	/^#define DISABLED_FILE /;"	d
DIZZYPORT	src/include/constants.hh	/^#define DIZZYPORT /;"	d
DM	src/include/telnet.hh	/^#define	DM	/;"	d
DO	src/include/telnet.hh	/^#define	DO	/;"	d
DONT	src/include/telnet.hh	/^#define	DONT	/;"	d
DO_FUN	src/include/declare.hh	/^typedef void DO_FUN     args( ( Character *ch, String argument ) );$/;"	t
Day	src/include/GameTime.hh	/^    	Day,$/;"	e	enum:GameTime::Sun
DepartedPlayer	src/include/DepartedPlayer.hh	/^	DepartedPlayer() {}$/;"	f	class:DepartedPlayer
DepartedPlayer	src/include/DepartedPlayer.hh	/^class DepartedPlayer$/;"	c
Descriptor	src/Descriptor.cc	/^Descriptor() : state(&conn::State::getName)$/;"	f	class:Descriptor
Descriptor	src/include/Descriptor.hh	/^class Descriptor :$/;"	c
Disabled	src/include/Disabled.hh	/^    Disabled() {}$/;"	f	class:Disabled
Disabled	src/include/Disabled.hh	/^class Disabled$/;"	c
Dispatcher	src/include/event/Dispatcher.hh	/^class Dispatcher {$/;"	c	namespace:event
Duel	src/include/Duel.hh	/^    Duel() {}$/;"	f	class:Duel
Duel	src/include/Duel.hh	/^class Duel$/;"	c
EC	src/include/telnet.hh	/^#define	EC	/;"	d
EDIT_TYPE_DESC	src/include/Edit.hh	/^#define EDIT_TYPE_DESC /;"	d
EDIT_TYPE_HELP	src/include/Edit.hh	/^#define EDIT_TYPE_HELP /;"	d
EDIT_TYPE_NONE	src/include/Edit.hh	/^#define EDIT_TYPE_NONE /;"	d
EDIT_TYPE_NOTE	src/include/Edit.hh	/^#define EDIT_TYPE_NOTE /;"	d
EDIT_TYPE_ROOM	src/include/Edit.hh	/^#define EDIT_TYPE_ROOM /;"	d
EL	src/include/telnet.hh	/^#define	EL	/;"	d
EMAIL_FILE	src/include/constants.hh	/^#define EMAIL_FILE /;"	d
ENTITY_C	src/include/argument.hh	/^#define ENTITY_C /;"	d
ENTITY_M	src/include/argument.hh	/^#define ENTITY_M /;"	d
ENTITY_O	src/include/argument.hh	/^#define ENTITY_O /;"	d
ENTITY_P	src/include/argument.hh	/^#define ENTITY_P /;"	d
ENTITY_R	src/include/argument.hh	/^#define ENTITY_R /;"	d
ENTITY_VM	src/include/argument.hh	/^#define ENTITY_VM /;"	d
ENTITY_VO	src/include/argument.hh	/^#define ENTITY_VO /;"	d
ENTITY_VR	src/include/argument.hh	/^#define ENTITY_VR /;"	d
ENTRY_PROG	src/include/MobProg.hh	/^#define ENTRY_PROG /;"	d
EOR	src/include/telnet.hh	/^#define EOR /;"	d
EQSocket	src/include/EQSocket.hh	/^	EQSocket() {}$/;"	f	class:EQSocket
EQSocket	src/include/EQSocket.hh	/^class EQSocket$/;"	c
EQ_QUALITY_LEGENDARY	src/lootv2.cc	/^#define EQ_QUALITY_LEGENDARY /;"	d	file:
EQ_QUALITY_NORMAL	src/lootv2.cc	/^#define EQ_QUALITY_NORMAL /;"	d	file:
EQ_QUALITY_RARE	src/lootv2.cc	/^#define EQ_QUALITY_RARE /;"	d	file:
EQ_QUALITY_SET	src/lootv2.cc	/^#define EQ_QUALITY_SET	/;"	d	file:
EQ_QUALITY_UNCOMMON	src/lootv2.cc	/^#define EQ_QUALITY_UNCOMMON /;"	d	file:
EQ_QUALITY_UNIQUE	src/lootv2.cc	/^#define EQ_QUALITY_UNIQUE	/;"	d	file:
ERROR_PROG	src/include/MobProg.hh	/^#define ERROR_PROG /;"	d
EVENT_ADJUST_CLANQP	src/include/constants.hh	/^#define EVENT_ADJUST_CLANQP	/;"	d
EVENT_ADJUST_POWER	src/include/constants.hh	/^#define EVENT_ADJUST_POWER	/;"	d
EVENT_ADJUST_SCORE	src/include/constants.hh	/^#define EVENT_ADJUST_SCORE	/;"	d
EVENT_CLAN_DEFEAT	src/include/constants.hh	/^#define EVENT_CLAN_DEFEAT	/;"	d
EVENT_CLAN_INVADE	src/include/constants.hh	/^#define EVENT_CLAN_INVADE	/;"	d
EVENT_CLAN_SURRENDER	src/include/constants.hh	/^#define EVENT_CLAN_SURRENDER	/;"	d
EVENT_CLAN_WIPEOUT	src/include/constants.hh	/^#define EVENT_CLAN_WIPEOUT	/;"	d
EVENT_DIR	src/War.cc	/^#define EVENT_DIR /;"	d	file:
EVENT_KILL	src/include/constants.hh	/^#define EVENT_KILL	/;"	d
EVENT_NULL	src/include/constants.hh	/^#define EVENT_NULL	/;"	d
EVENT_TMP	src/War.cc	/^#define EVENT_TMP /;"	d	file:
EVENT_WAR_DECLARE	src/include/constants.hh	/^#define EVENT_WAR_DECLARE	/;"	d
EVENT_WAR_JOIN	src/include/constants.hh	/^#define EVENT_WAR_JOIN	/;"	d
EVENT_WAR_START	src/include/constants.hh	/^#define EVENT_WAR_START	/;"	d
EVENT_WAR_STOP_IMM	src/include/constants.hh	/^#define EVENT_WAR_STOP_IMM	/;"	d
EVENT_WAR_STOP_WIN	src/include/constants.hh	/^#define EVENT_WAR_STOP_WIN	/;"	d
EXEFILE	src/Makefile	/^EXEFILE = legacy$/;"	m
EXE_FILE	src/include/constants.hh	/^#define EXE_FILE /;"	d
EXIT_REASON	src/comm.cc	/^#define EXIT_REASON(/;"	d	file:
EXTDIR	src/Makefile	/^EXTDIR  = deps$/;"	m
EXTRACLASS_SLOT_LEVELS	src/include/constants.hh	/^#define EXTRACLASS_SLOT_LEVELS /;"	d
EXT_OBJECTS	src/Makefile	/^EXT_OBJECTS = $(patsubst %,$(EXTDIR)\/%.o,$(basename $(EXT_SOURCES)))$/;"	m
EXT_SOURCES	src/Makefile	/^EXT_SOURCES = cJSON\/cJSON.c$/;"	m
EX_CLOSED	src/include/constants.hh	/^#define EX_CLOSED /;"	d
EX_EASY	src/include/constants.hh	/^#define EX_EASY /;"	d
EX_HARD	src/include/constants.hh	/^#define EX_HARD /;"	d
EX_INFURIATING	src/include/constants.hh	/^#define EX_INFURIATING /;"	d
EX_ISDOOR	src/include/constants.hh	/^#define EX_ISDOOR /;"	d
EX_LOCKED	src/include/constants.hh	/^#define EX_LOCKED /;"	d
EX_NOCLOSE	src/include/constants.hh	/^#define EX_NOCLOSE /;"	d
EX_NOLOCK	src/include/constants.hh	/^#define EX_NOLOCK /;"	d
EX_NOPASS	src/include/constants.hh	/^#define EX_NOPASS /;"	d
EX_PICKPROOF	src/include/constants.hh	/^#define EX_PICKPROOF /;"	d
Edit	src/include/Edit.hh	/^    Edit() {}$/;"	f	class:Edit
Edit	src/include/Edit.hh	/^class Edit$/;"	c
Event	src/include/War.hh	/^        Event() {}$/;"	f	class:War::Event
Event	src/include/War.hh	/^    class Event$/;"	c	class:War
Exit	src/Exit.cc	/^Exit(const ExitPrototype& proto, Room *to_room) :$/;"	f	class:Exit
Exit	src/include/Exit.hh	/^class Exit$/;"	c
ExitPrototype	src/ExitPrototype.cc	/^ExitPrototype(FILE *fp) :$/;"	f	class:ExitPrototype
ExitPrototype	src/include/ExitPrototype.hh	/^class ExitPrototype$/;"	c
ExtraDescr	src/include/ExtraDescr.hh	/^	ExtraDescr() {}$/;"	f	class:ExtraDescr
ExtraDescr	src/include/ExtraDescr.hh	/^	ExtraDescr(const ExtraDescr& e) : keyword(e.keyword), description(e.description) {}$/;"	f	class:ExtraDescr
ExtraDescr	src/include/ExtraDescr.hh	/^	ExtraDescr(const String& k, const String& d) : keyword(k), description(d) {}$/;"	f	class:ExtraDescr
ExtraDescr	src/include/ExtraDescr.hh	/^class ExtraDescr :$/;"	c
FIELD_ACT	src/include/tables.hh	/^#define	FIELD_ACT	/;"	d
FIELD_CENSOR	src/include/tables.hh	/^#define	FIELD_CENSOR	/;"	d
FIELD_CGROUP	src/include/tables.hh	/^#define FIELD_CGROUP	/;"	d
FIELD_COMM	src/include/tables.hh	/^#define	FIELD_COMM	/;"	d
FIELD_EXTRA	src/include/tables.hh	/^#define	FIELD_EXTRA	/;"	d
FIELD_FORM	src/include/tables.hh	/^#define	FIELD_FORM	/;"	d
FIELD_GROUP	src/include/tables.hh	/^#define FIELD_GROUP /;"	d
FIELD_OFF	src/include/tables.hh	/^#define	FIELD_OFF	/;"	d
FIELD_PART	src/include/tables.hh	/^#define	FIELD_PART	/;"	d
FIELD_PCDATA	src/include/tables.hh	/^#define FIELD_PCDATA	/;"	d
FIELD_PLAYER	src/include/tables.hh	/^#define FIELD_PLAYER	/;"	d
FIELD_REVOKE	src/include/tables.hh	/^#define FIELD_REVOKE	/;"	d
FIELD_ROOM	src/include/tables.hh	/^#define	FIELD_ROOM	/;"	d
FIELD_WEAPON	src/include/tables.hh	/^#define	FIELD_WEAPON	/;"	d
FIELD_WEAR	src/include/tables.hh	/^#define	FIELD_WEAR	/;"	d
FIELD_WIZNET	src/include/tables.hh	/^#define FIELD_WIZNET	/;"	d
FIGHT_PROG	src/include/MobProg.hh	/^#define FIGHT_PROG /;"	d
FLAGKEY	src/save.cc	/^#define FLAGKEY(/;"	d	file:
FLAGKEY	src/save.cc	/^#undef FLAGKEY$/;"	d	file:
FLAGS_NBITS	src/include/Flags.hh	/^#define FLAGS_NBITS /;"	d
FNDELAY	src/comm.cc	/^ #define FNDELAY /;"	d	file:
FORM_AMPHIBIAN	src/include/constants.hh	/^#define FORM_AMPHIBIAN /;"	d
FORM_ANIMAL	src/include/constants.hh	/^#define FORM_ANIMAL /;"	d
FORM_BIPED	src/include/constants.hh	/^#define FORM_BIPED /;"	d
FORM_BIRD	src/include/constants.hh	/^#define FORM_BIRD /;"	d
FORM_BLOB	src/include/constants.hh	/^#define FORM_BLOB /;"	d
FORM_CENTAUR	src/include/constants.hh	/^#define FORM_CENTAUR /;"	d
FORM_COLD_BLOOD	src/include/constants.hh	/^#define FORM_COLD_BLOOD /;"	d
FORM_CONSTRUCT	src/include/constants.hh	/^#define FORM_CONSTRUCT /;"	d
FORM_CRUSTACEAN	src/include/constants.hh	/^#define FORM_CRUSTACEAN /;"	d
FORM_DRAGON	src/include/constants.hh	/^#define FORM_DRAGON /;"	d
FORM_EDIBLE	src/include/constants.hh	/^#define FORM_EDIBLE /;"	d
FORM_FISH	src/include/constants.hh	/^#define FORM_FISH /;"	d
FORM_INSECT	src/include/constants.hh	/^#define FORM_INSECT /;"	d
FORM_INSTANT_DECAY	src/include/constants.hh	/^#define FORM_INSTANT_DECAY /;"	d
FORM_INTANGIBLE	src/include/constants.hh	/^#define FORM_INTANGIBLE /;"	d
FORM_MAGICAL	src/include/constants.hh	/^#define FORM_MAGICAL /;"	d
FORM_MAMMAL	src/include/constants.hh	/^#define FORM_MAMMAL /;"	d
FORM_MIST	src/include/constants.hh	/^#define FORM_MIST /;"	d
FORM_OTHER	src/include/constants.hh	/^#define FORM_OTHER /;"	d
FORM_POISON	src/include/constants.hh	/^#define FORM_POISON /;"	d
FORM_REPTILE	src/include/constants.hh	/^#define FORM_REPTILE /;"	d
FORM_SENTIENT	src/include/constants.hh	/^#define FORM_SENTIENT /;"	d
FORM_SNAKE	src/include/constants.hh	/^#define FORM_SNAKE /;"	d
FORM_SPIDER	src/include/constants.hh	/^#define FORM_SPIDER /;"	d
FORM_UNDEAD	src/include/constants.hh	/^#define FORM_UNDEAD /;"	d
FORM_WORM	src/include/constants.hh	/^#define FORM_WORM /;"	d
Flags	src/Flags.cc	/^Flags(const String& str) {$/;"	f	class:Flags
Flags	src/Flags.cc	/^Flags(const char *str) : Flags(String(str)) {}$/;"	f	class:Flags
Flags	src/include/Flags.hh	/^	Flags() {}$/;"	f	class:Flags
Flags	src/include/Flags.hh	/^	Flags(const Bit& b) : bits(static_cast<unsigned long>(b)) {}$/;"	f	class:Flags
Flags	src/include/Flags.hh	/^	Flags(const Flags& f) : bits(f.bits) {}$/;"	f	class:Flags
Flags	src/include/Flags.hh	/^	explicit Flags(unsigned long f) : bits(f) {}$/;"	f	class:Flags
Flags	src/include/Flags.hh	/^class Flags$/;"	c
Format	src/include/Format.hh	/^namespace Format {$/;"	n
Fsyl1	src/tables.cc	/^const String Fsyl1[] = {$/;"	v
Fsyl2	src/tables.cc	/^const String Fsyl2[] = {$/;"	v
Fsyl3	src/tables.cc	/^const String Fsyl3[] = {$/;"	v
GA	src/include/telnet.hh	/^#define	GA	/;"	d
GATE_BUGGY	src/include/constants.hh	/^#define GATE_BUGGY /;"	d
GATE_GOWITH	src/include/constants.hh	/^#define GATE_GOWITH /;"	d
GATE_NOCURSE	src/include/constants.hh	/^#define GATE_NOCURSE /;"	d
GATE_NORMAL_EXIT	src/include/constants.hh	/^#define GATE_NORMAL_EXIT /;"	d
GATE_RANDOM	src/include/constants.hh	/^#define GATE_RANDOM /;"	d
GAV	src/include/constants.hh	/^#define GAV	/;"	d
GC	src/include/constants.hh	/^#define GC	/;"	d
GD	src/include/constants.hh	/^#define GD	/;"	d
GEM_VALUE_QUALITY	src/include/gem/gem.hh	/^#define GEM_VALUE_QUALITY /;"	d
GEM_VALUE_TYPE	src/include/gem/gem.hh	/^#define GEM_VALUE_TYPE /;"	d
GEN_OBJ_FOOD	src/include/constants.hh	/^#define GEN_OBJ_FOOD	/;"	d
GEN_OBJ_MONEY	src/include/constants.hh	/^#define GEN_OBJ_MONEY	/;"	d
GEN_OBJ_TOKEN	src/include/constants.hh	/^#define GEN_OBJ_TOKEN	/;"	d
GEN_OBJ_TREASURE	src/include/constants.hh	/^#define GEN_OBJ_TREASURE	/;"	d
GET_AC	src/Character.cc	/^int GET_AC(Character *ch, int type)$/;"	f
GET_ATTR	src/include/Character.hh	/^#define GET_ATTR(/;"	d
GET_ATTR	src/include/macros.hh	/^#define GET_ATTR(/;"	d
GET_ATTR_AC	src/Character.cc	/^int GET_ATTR_AC(Character *ch)$/;"	f
GET_ATTR_AGE	src/include/Character.hh	/^#define GET_ATTR_AGE(/;"	d
GET_ATTR_AGE	src/include/macros.hh	/^#define GET_ATTR_AGE(/;"	d
GET_ATTR_CHR	src/include/Character.hh	/^#define GET_ATTR_CHR(/;"	d
GET_ATTR_CHR	src/include/macros.hh	/^#define GET_ATTR_CHR(/;"	d
GET_ATTR_CON	src/include/Character.hh	/^#define GET_ATTR_CON(/;"	d
GET_ATTR_CON	src/include/macros.hh	/^#define GET_ATTR_CON(/;"	d
GET_ATTR_DAMROLL	src/include/Character.hh	/^#define GET_ATTR_DAMROLL(/;"	d
GET_ATTR_DAMROLL	src/include/macros.hh	/^#define GET_ATTR_DAMROLL(/;"	d
GET_ATTR_DEX	src/include/Character.hh	/^#define GET_ATTR_DEX(/;"	d
GET_ATTR_DEX	src/include/macros.hh	/^#define GET_ATTR_DEX(/;"	d
GET_ATTR_HITROLL	src/include/Character.hh	/^#define GET_ATTR_HITROLL(/;"	d
GET_ATTR_HITROLL	src/include/macros.hh	/^#define GET_ATTR_HITROLL(/;"	d
GET_ATTR_INT	src/include/Character.hh	/^#define GET_ATTR_INT(/;"	d
GET_ATTR_INT	src/include/macros.hh	/^#define GET_ATTR_INT(/;"	d
GET_ATTR_MOD	src/include/Character.hh	/^#define GET_ATTR_MOD(/;"	d
GET_ATTR_MOD	src/include/macros.hh	/^#define GET_ATTR_MOD(/;"	d
GET_ATTR_SAVES	src/include/Character.hh	/^#define GET_ATTR_SAVES(/;"	d
GET_ATTR_SAVES	src/include/macros.hh	/^#define GET_ATTR_SAVES(/;"	d
GET_ATTR_SEX	src/include/Character.hh	/^#define GET_ATTR_SEX(/;"	d
GET_ATTR_SEX	src/include/macros.hh	/^#define GET_ATTR_SEX(/;"	d
GET_ATTR_STR	src/include/Character.hh	/^#define GET_ATTR_STR(/;"	d
GET_ATTR_STR	src/include/macros.hh	/^#define GET_ATTR_STR(/;"	d
GET_ATTR_WIS	src/include/Character.hh	/^#define GET_ATTR_WIS(/;"	d
GET_ATTR_WIS	src/include/macros.hh	/^#define GET_ATTR_WIS(/;"	d
GET_DEFENSE_MOD	src/include/Character.hh	/^#define GET_DEFENSE_MOD(/;"	d
GET_DEFENSE_MOD	src/include/macros.hh	/^#define GET_DEFENSE_MOD(/;"	d
GET_MAX_HIT	src/Character.cc	/^int GET_MAX_HIT(Character *ch)$/;"	f
GET_MAX_MANA	src/Character.cc	/^int GET_MAX_MANA(Character *ch)$/;"	f
GET_MAX_STAM	src/Character.cc	/^int GET_MAX_STAM(Character *ch)$/;"	f
GET_RANK	src/include/Character.hh	/^#define GET_RANK(/;"	d
GET_RANK	src/include/macros.hh	/^#define	GET_RANK(/;"	d
GH	src/include/constants.hh	/^#define GH	/;"	d
GIVE_PROG	src/include/MobProg.hh	/^#define GIVE_PROG /;"	d
GL	src/include/constants.hh	/^#define GL	/;"	d
GM	src/include/constants.hh	/^#define GM	/;"	d
GP	src/include/constants.hh	/^#define GP	/;"	d
GREEN	src/include/constants.hh	/^#define GREEN /;"	d
GREET_PROG	src/include/MobProg.hh	/^#define GREET_PROG /;"	d
GREY	src/include/constants.hh	/^#define GREY /;"	d
GROUP_AVATAR	src/include/constants.hh	/^#define GROUP_AVATAR	/;"	d
GROUP_BUILD	src/include/constants.hh	/^#define GROUP_BUILD	/;"	d
GROUP_CLAN	src/include/constants.hh	/^#define GROUP_CLAN	/;"	d
GROUP_CODE	src/include/constants.hh	/^#define GROUP_CODE	/;"	d
GROUP_DEPUTY	src/include/constants.hh	/^#define GROUP_DEPUTY	/;"	d
GROUP_GEN	src/include/constants.hh	/^#define GROUP_GEN	/;"	d
GROUP_HERO	src/include/constants.hh	/^#define GROUP_HERO	/;"	d
GROUP_LEADER	src/include/constants.hh	/^#define GROUP_LEADER	/;"	d
GROUP_MOBILE	src/include/constants.hh	/^#define GROUP_MOBILE	/;"	d
GROUP_PLAYER	src/include/constants.hh	/^#define GROUP_PLAYER	/;"	d
GROUP_QUEST	src/include/constants.hh	/^#define GROUP_QUEST	/;"	d
GROUP_SECURE	src/include/constants.hh	/^#define GROUP_SECURE	/;"	d
GROUP_VNUM_OGRES	src/include/constants.hh	/^#define GROUP_VNUM_OGRES /;"	d
GROUP_VNUM_TROLLS	src/include/constants.hh	/^#define GROUP_VNUM_TROLLS /;"	d
GWB	src/include/constants.hh	/^#define GWB	/;"	d
GWC	src/include/constants.hh	/^#define GWC	/;"	d
GWG	src/include/constants.hh	/^#define GWG	/;"	d
GWQ	src/include/constants.hh	/^#define GWQ	/;"	d
GWS	src/include/constants.hh	/^#define GWS	/;"	d
Game	src/include/Game.hh	/^	Game() {} \/\/ static class$/;"	f	class:Game
Game	src/include/Game.hh	/^class Game$/;"	c
GameTime	src/GameTime.cc	/^GameTime(std::time_t system_time) {$/;"	f	class:GameTime
GameTime	src/include/GameTime.hh	/^class GameTime$/;"	c
Garbage	src/include/Garbage.hh	/^class Garbage {$/;"	c
GarbageCollectingList	src/include/GarbageCollectingList.hh	/^	GarbageCollectingList() {$/;"	f	class:GarbageCollectingList
GarbageCollectingList	src/include/GarbageCollectingList.hh	/^template <typename T> class GarbageCollectingList$/;"	c
GetAlignmentState	src/include/conn/State.hh	/^struct GetAlignmentState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
GetDeityState	src/include/conn/State.hh	/^struct GetDeityState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
GetGuildState	src/include/conn/State.hh	/^struct GetGuildState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
GetMudExpState	src/include/conn/State.hh	/^struct GetMudExpState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
GetNameState	src/include/conn/State.hh	/^struct GetNameState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
GetNewPassState	src/include/conn/State.hh	/^struct GetNewPassState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
GetOldPassState	src/include/conn/State.hh	/^struct GetOldPassState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
GetRaceState	src/include/conn/State.hh	/^struct GetRaceState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
GetSexState	src/include/conn/State.hh	/^struct GetSexState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
GetWeaponState	src/include/conn/State.hh	/^struct GetWeaponState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
Guild	src/include/Guild.hh	/^enum Guild {$/;"	g
HALLOWEEN	src/include/constants.hh	/^ #define HALLOWEEN$/;"	d
HAS_EXTRACLASS	src/remort.cc	/^bool HAS_EXTRACLASS(Character *ch, skill::type sn)$/;"	f
HAS_RAFF	src/remort.cc	/^bool HAS_RAFF(Character *ch, int flag)$/;"	f
HAS_RAFF_GROUP	src/remort.cc	/^bool HAS_RAFF_GROUP(Character *ch, int flag)$/;"	f
HBB_FILE	src/include/constants.hh	/^#define HBB_FILE /;"	d
HBI_FILE	src/include/constants.hh	/^#define HBI_FILE /;"	d
HCOL_GROUP	src/help.cc	/^#define HCOL_GROUP /;"	d	file:
HCOL_ID	src/help.cc	/^#define HCOL_ID /;"	d	file:
HCOL_KEYS	src/help.cc	/^#define HCOL_KEYS /;"	d	file:
HCOL_LEVEL	src/help.cc	/^#define HCOL_LEVEL /;"	d	file:
HCOL_ORDER	src/help.cc	/^#define HCOL_ORDER /;"	d	file:
HCOL_TEXT	src/help.cc	/^#define HCOL_TEXT /;"	d	file:
HED	src/include/constants.hh	/^#define HED	/;"	d
HELP_CLAN	src/help.cc	/^#define	HELP_CLAN	/;"	d	file:
HELP_CLASS	src/help.cc	/^#define	HELP_CLASS	/;"	d	file:
HELP_COMBAT	src/help.cc	/^#define	HELP_COMBAT	/;"	d	file:
HELP_COMM	src/help.cc	/^#define	HELP_COMM	/;"	d	file:
HELP_DIR	src/include/constants.hh	/^#define HELP_DIR	/;"	d
HELP_INFO	src/help.cc	/^#define	HELP_INFO	/;"	d	file:
HELP_MISC	src/help.cc	/^#define HELP_MISC	/;"	d	file:
HELP_MOVE	src/help.cc	/^#define	HELP_MOVE	/;"	d	file:
HELP_OBJECT	src/help.cc	/^#define	HELP_OBJECT	/;"	d	file:
HELP_RACE	src/help.cc	/^#define	HELP_RACE	/;"	d	file:
HELP_REMORT	src/help.cc	/^#define	HELP_REMORT	/;"	d	file:
HELP_SKILL	src/help.cc	/^#define	HELP_SKILL	/;"	d	file:
HELP_SPELL	src/help.cc	/^#define	HELP_SPELL	/;"	d	file:
HELP_WIZBUILD	src/help.cc	/^#define	HELP_WIZBUILD	/;"	d	file:
HELP_WIZCODE	src/help.cc	/^#define	HELP_WIZCODE	/;"	d	file:
HELP_WIZGEN	src/help.cc	/^#define	HELP_WIZGEN	/;"	d	file:
HELP_WIZHELP	src/help.cc	/^#define	HELP_WIZHELP	/;"	d	file:
HELP_WIZQUEST	src/help.cc	/^#define	HELP_WIZQUEST	/;"	d	file:
HELP_WIZSECURE	src/help.cc	/^#define	HELP_WIZSECURE	/;"	d	file:
HITPRCNT_PROG	src/include/MobProg.hh	/^#define HITPRCNT_PROG /;"	d
HTABLE	src/help.cc	/^#define HTABLE /;"	d	file:
HUNT_CONDITIONS	src/hunt.cc	/^typedef struct hunt_conditions HUNT_CONDITIONS;$/;"	t	typeref:struct:hunt_conditions	file:
Handler	src/include/event/Handler.hh	/^	Handler() {}$/;"	f	class:event::Handler
Handler	src/include/event/Handler.hh	/^class Handler {$/;"	c	namespace:event
IAC	src/include/telnet.hh	/^#define	IAC	/;"	d
IDEA_FILE	src/include/constants.hh	/^#define IDEA_FILE /;"	d
IMM	src/include/constants.hh	/^#define IMM	/;"	d
IMMAPP_FILE	src/include/constants.hh	/^#define IMMAPP_FILE	/;"	d
IMMQUEST_FILE	src/include/constants.hh	/^#define IMMQUEST_FILE /;"	d
IMM_ACID	src/include/constants.hh	/^#define IMM_ACID /;"	d
IMM_BASH	src/include/constants.hh	/^#define IMM_BASH /;"	d
IMM_CHARM	src/include/constants.hh	/^#define IMM_CHARM /;"	d
IMM_COLD	src/include/constants.hh	/^#define IMM_COLD /;"	d
IMM_DISEASE	src/include/constants.hh	/^#define IMM_DISEASE /;"	d
IMM_DROWNING	src/include/constants.hh	/^#define IMM_DROWNING /;"	d
IMM_ELECTRICITY	src/include/constants.hh	/^#define IMM_ELECTRICITY /;"	d
IMM_ENERGY	src/include/constants.hh	/^#define IMM_ENERGY /;"	d
IMM_FIRE	src/include/constants.hh	/^#define IMM_FIRE /;"	d
IMM_HOLY	src/include/constants.hh	/^#define IMM_HOLY /;"	d
IMM_IRON	src/include/constants.hh	/^#define IMM_IRON /;"	d
IMM_LIGHT	src/include/constants.hh	/^#define IMM_LIGHT /;"	d
IMM_MAGIC	src/include/constants.hh	/^#define IMM_MAGIC /;"	d
IMM_MENTAL	src/include/constants.hh	/^#define IMM_MENTAL /;"	d
IMM_NEGATIVE	src/include/constants.hh	/^#define IMM_NEGATIVE /;"	d
IMM_PIERCE	src/include/constants.hh	/^#define IMM_PIERCE /;"	d
IMM_POISON	src/include/constants.hh	/^#define IMM_POISON /;"	d
IMM_SILVER	src/include/constants.hh	/^#define IMM_SILVER /;"	d
IMM_SLASH	src/include/constants.hh	/^#define IMM_SLASH /;"	d
IMM_SOUND	src/include/constants.hh	/^#define IMM_SOUND /;"	d
IMM_WEAPON	src/include/constants.hh	/^#define IMM_WEAPON /;"	d
IMM_WOOD	src/include/constants.hh	/^#define IMM_WOOD /;"	d
IMP	src/include/constants.hh	/^#define IMP	/;"	d
INCDIR	src/Makefile	/^INCDIR  = include$/;"	m
INCLUDE	src/Makefile	/^INCLUDE  = -I$(INCDIR) -I\/usr\/include -I\/usr\/local\/include -I\/opt\/local\/include$/;"	m
INTKEY	src/save.cc	/^#define INTKEY(/;"	d	file:
INTKEY	src/save.cc	/^#undef INTKEY$/;"	d	file:
IN_FILE_PROG	src/include/MobProg.hh	/^#define IN_FILE_PROG /;"	d
IP	src/include/telnet.hh	/^#define	IP	/;"	d
IS_ABSORBING	src/include/constants.hh	/^#define IS_ABSORBING	/;"	d
IS_AWAKE	src/include/Character.hh	/^#define IS_AWAKE(/;"	d
IS_AWAKE	src/include/macros.hh	/^#define IS_AWAKE(/;"	d
IS_EVIL	src/include/Character.hh	/^#define IS_EVIL(/;"	d
IS_EVIL	src/include/macros.hh	/^#define IS_EVIL(/;"	d
IS_FLYING	src/include/Character.hh	/^#define IS_FLYING(/;"	d
IS_FLYING	src/include/macros.hh	/^#define IS_FLYING(/;"	d
IS_GOOD	src/include/Character.hh	/^#define IS_GOOD(/;"	d
IS_GOOD	src/include/macros.hh	/^#define IS_GOOD(/;"	d
IS_HEAD	src/include/Character.hh	/^#define IS_HEAD(/;"	d
IS_HEAD	src/include/macros.hh	/^#define IS_HEAD(/;"	d
IS_HERO	src/include/Character.hh	/^#define IS_HERO(/;"	d
IS_HERO	src/include/macros.hh	/^#define IS_HERO(/;"	d
IS_HEROIC	src/include/Character.hh	/^#define IS_HEROIC(/;"	d
IS_HEROIC	src/include/macros.hh	/^#define IS_HEROIC(/;"	d
IS_IMMORTAL	src/include/Character.hh	/^#define IS_IMMORTAL(/;"	d
IS_IMMORTAL	src/include/macros.hh	/^#define IS_IMMORTAL(/;"	d
IS_IMMUNE	src/include/constants.hh	/^#define IS_IMMUNE /;"	d
IS_IMM_GROUP	src/include/Character.hh	/^#define IS_IMM_GROUP(/;"	d
IS_IMM_GROUP	src/include/macros.hh	/^#define IS_IMM_GROUP(/;"	d
IS_IMP	src/include/Character.hh	/^#define IS_IMP(/;"	d
IS_IMP	src/include/macros.hh	/^#define IS_IMP(/;"	d
IS_KILLER	src/include/Character.hh	/^#define IS_KILLER(/;"	d
IS_KILLER	src/include/macros.hh	/^#define IS_KILLER(/;"	d
IS_NEUTRAL	src/include/Character.hh	/^#define IS_NEUTRAL(/;"	d
IS_NEUTRAL	src/include/macros.hh	/^#define IS_NEUTRAL(/;"	d
IS_NORMAL	src/include/constants.hh	/^#define IS_NORMAL /;"	d
IS_NPC	src/include/macros.hh	/^#define IS_NPC(/;"	d
IS_OBJ_STAT	src/include/Object.hh	/^#define IS_OBJ_STAT(/;"	d
IS_OBJ_STAT	src/include/macros.hh	/^#define IS_OBJ_STAT(/;"	d
IS_OUTSIDE	src/include/Character.hh	/^#define IS_OUTSIDE(/;"	d
IS_OUTSIDE	src/include/macros.hh	/^#define IS_OUTSIDE(/;"	d
IS_PLAYING	src/include/macros.hh	/^#define IS_PLAYING(/;"	d
IS_QUESTOR	src/include/Character.hh	/^#define IS_QUESTOR(/;"	d
IS_QUESTOR	src/include/macros.hh	/^#define IS_QUESTOR(/;"	d
IS_QUESTSHOPKEEPER	src/include/macros.hh	/^#define IS_QUESTSHOPKEEPER(/;"	d
IS_REMORT	src/include/Character.hh	/^#define IS_REMORT(/;"	d
IS_REMORT	src/include/macros.hh	/^#define IS_REMORT(/;"	d
IS_RESISTANT	src/include/constants.hh	/^#define IS_RESISTANT /;"	d
IS_SPECIAL	src/special.cc	/^bool IS_SPECIAL(Character *ch)$/;"	f
IS_SQUESTOR	src/include/Character.hh	/^#define IS_SQUESTOR(/;"	d
IS_SQUESTOR	src/include/macros.hh	/^#define IS_SQUESTOR(/;"	d
IS_THIEF	src/include/Character.hh	/^#define IS_THIEF(/;"	d
IS_THIEF	src/include/macros.hh	/^#define IS_THIEF(/;"	d
IS_VULNERABLE	src/include/constants.hh	/^#define IS_VULNERABLE /;"	d
ITEM_ANTI_EVIL	src/include/constants.hh	/^#define ITEM_ANTI_EVIL /;"	d
ITEM_ANTI_GOOD	src/include/constants.hh	/^#define ITEM_ANTI_GOOD /;"	d
ITEM_ANTI_NEUTRAL	src/include/constants.hh	/^#define ITEM_ANTI_NEUTRAL /;"	d
ITEM_ANVIL	src/include/constants.hh	/^#define ITEM_ANVIL /;"	d
ITEM_ARMOR	src/include/constants.hh	/^#define ITEM_ARMOR /;"	d
ITEM_BLESS	src/include/constants.hh	/^#define ITEM_BLESS /;"	d
ITEM_BOAT	src/include/constants.hh	/^#define ITEM_BOAT /;"	d
ITEM_BURN_PROOF	src/include/constants.hh	/^#define ITEM_BURN_PROOF /;"	d
ITEM_CLOTHING	src/include/constants.hh	/^#define ITEM_CLOTHING /;"	d
ITEM_COMPARTMENT	src/include/constants.hh	/^#define ITEM_COMPARTMENT /;"	d
ITEM_CONTAINER	src/include/constants.hh	/^#define ITEM_CONTAINER /;"	d
ITEM_CORPSE_NPC	src/include/constants.hh	/^#define ITEM_CORPSE_NPC /;"	d
ITEM_CORPSE_PC	src/include/constants.hh	/^#define ITEM_CORPSE_PC /;"	d
ITEM_DRINK_CON	src/include/constants.hh	/^#define ITEM_DRINK_CON /;"	d
ITEM_EVIL	src/include/constants.hh	/^#define ITEM_EVIL /;"	d
ITEM_FOOD	src/include/constants.hh	/^#define ITEM_FOOD /;"	d
ITEM_FOUNTAIN	src/include/constants.hh	/^#define ITEM_FOUNTAIN /;"	d
ITEM_FURNITURE	src/include/constants.hh	/^#define ITEM_FURNITURE /;"	d
ITEM_GEM	src/include/constants.hh	/^#define ITEM_GEM /;"	d
ITEM_GLOW	src/include/constants.hh	/^#define ITEM_GLOW /;"	d
ITEM_HOLD	src/include/constants.hh	/^#define ITEM_HOLD /;"	d
ITEM_HUM	src/include/constants.hh	/^#define ITEM_HUM /;"	d
ITEM_INVENTORY	src/include/constants.hh	/^#define ITEM_INVENTORY /;"	d
ITEM_INVIS	src/include/constants.hh	/^#define ITEM_INVIS /;"	d
ITEM_JEWELRY	src/include/constants.hh	/^#define ITEM_JEWELRY /;"	d
ITEM_JUKEBOX	src/include/constants.hh	/^#define ITEM_JUKEBOX /;"	d
ITEM_KEY	src/include/constants.hh	/^#define ITEM_KEY /;"	d
ITEM_LIGHT	src/include/constants.hh	/^#define ITEM_LIGHT /;"	d
ITEM_MAGIC	src/include/constants.hh	/^#define ITEM_MAGIC /;"	d
ITEM_MAP	src/include/constants.hh	/^#define ITEM_MAP /;"	d
ITEM_MATERIAL	src/include/constants.hh	/^#define ITEM_MATERIAL /;"	d
ITEM_MELT_DROP	src/include/constants.hh	/^#define ITEM_MELT_DROP /;"	d
ITEM_MONEY	src/include/constants.hh	/^#define ITEM_MONEY /;"	d
ITEM_NODROP	src/include/constants.hh	/^#define ITEM_NODROP /;"	d
ITEM_NOLOCATE	src/include/constants.hh	/^#define ITEM_NOLOCATE /;"	d
ITEM_NONMETAL	src/include/constants.hh	/^#define ITEM_NONMETAL /;"	d
ITEM_NOPURGE	src/include/constants.hh	/^#define ITEM_NOPURGE /;"	d
ITEM_NOREMOVE	src/include/constants.hh	/^#define ITEM_NOREMOVE /;"	d
ITEM_NOSAC	src/include/constants.hh	/^#define ITEM_NOSAC /;"	d
ITEM_NOUNCURSE	src/include/constants.hh	/^#define ITEM_NOUNCURSE /;"	d
ITEM_NO_SAC	src/include/constants.hh	/^#define ITEM_NO_SAC /;"	d
ITEM_PBGUN	src/include/constants.hh	/^#define ITEM_PBGUN /;"	d
ITEM_PBTUBE	src/include/constants.hh	/^#define ITEM_PBTUBE /;"	d
ITEM_PILL	src/include/constants.hh	/^#define ITEM_PILL /;"	d
ITEM_PORTAL	src/include/constants.hh	/^#define ITEM_PORTAL /;"	d
ITEM_POTION	src/include/constants.hh	/^#define ITEM_POTION /;"	d
ITEM_QUESTSELL	src/include/constants.hh	/^#define ITEM_QUESTSELL /;"	d
ITEM_QUESTSHOP	src/include/constants.hh	/^#define ITEM_QUESTSHOP /;"	d
ITEM_ROT_DEATH	src/include/constants.hh	/^#define ITEM_ROT_DEATH /;"	d
ITEM_SCROLL	src/include/constants.hh	/^#define ITEM_SCROLL /;"	d
ITEM_SELL_EXTRACT	src/include/constants.hh	/^#define ITEM_SELL_EXTRACT /;"	d
ITEM_STAFF	src/include/constants.hh	/^#define ITEM_STAFF /;"	d
ITEM_TAKE	src/include/constants.hh	/^#define ITEM_TAKE /;"	d
ITEM_TOKEN	src/include/constants.hh	/^#define ITEM_TOKEN /;"	d
ITEM_TRANSPARENT	src/include/constants.hh	/^#define ITEM_TRANSPARENT /;"	d
ITEM_TRASH	src/include/constants.hh	/^#define ITEM_TRASH /;"	d
ITEM_TREASURE	src/include/constants.hh	/^#define ITEM_TREASURE /;"	d
ITEM_VIS_DEATH	src/include/constants.hh	/^#define ITEM_VIS_DEATH /;"	d
ITEM_WAND	src/include/constants.hh	/^#define ITEM_WAND /;"	d
ITEM_WARP_CRYSTAL	src/include/constants.hh	/^#define ITEM_WARP_CRYSTAL /;"	d
ITEM_WARP_STONE	src/include/constants.hh	/^#define ITEM_WARP_STONE /;"	d
ITEM_WEAPON	src/include/constants.hh	/^#define ITEM_WEAPON /;"	d
ITEM_WEAR_ABOUT	src/include/constants.hh	/^#define ITEM_WEAR_ABOUT /;"	d
ITEM_WEAR_ARMS	src/include/constants.hh	/^#define ITEM_WEAR_ARMS /;"	d
ITEM_WEAR_BODY	src/include/constants.hh	/^#define ITEM_WEAR_BODY /;"	d
ITEM_WEAR_FEET	src/include/constants.hh	/^#define ITEM_WEAR_FEET /;"	d
ITEM_WEAR_FINGER	src/include/constants.hh	/^#define ITEM_WEAR_FINGER /;"	d
ITEM_WEAR_FLOAT	src/include/constants.hh	/^#define ITEM_WEAR_FLOAT /;"	d
ITEM_WEAR_HANDS	src/include/constants.hh	/^#define ITEM_WEAR_HANDS /;"	d
ITEM_WEAR_HEAD	src/include/constants.hh	/^#define ITEM_WEAR_HEAD /;"	d
ITEM_WEAR_LEGS	src/include/constants.hh	/^#define ITEM_WEAR_LEGS /;"	d
ITEM_WEAR_NECK	src/include/constants.hh	/^#define ITEM_WEAR_NECK /;"	d
ITEM_WEAR_SHIELD	src/include/constants.hh	/^#define ITEM_WEAR_SHIELD /;"	d
ITEM_WEAR_WAIST	src/include/constants.hh	/^#define ITEM_WEAR_WAIST /;"	d
ITEM_WEAR_WEDDINGRING	src/include/constants.hh	/^#define ITEM_WEAR_WEDDINGRING	/;"	d
ITEM_WEAR_WRIST	src/include/constants.hh	/^#define ITEM_WEAR_WRIST /;"	d
ITEM_WEDDINGRING	src/include/constants.hh	/^#define ITEM_WEDDINGRING	/;"	d
ITEM_WIELD	src/include/constants.hh	/^#define ITEM_WIELD /;"	d
Image	src/include/util/Image.hh	/^	Image() {}$/;"	f	class:util::Image
Image	src/include/util/Image.hh	/^class Image {$/;"	c	namespace:util
JSON	src/include/JSON/cJSON.hh	/^namespace JSON {$/;"	n
KEYWD_OWNER	src/include/constants.hh	/^#define KEYWD_OWNER /;"	d
LEVEL_AVATAR	src/include/constants.hh	/^#define LEVEL_AVATAR	/;"	d
LEVEL_HERO	src/include/constants.hh	/^#define LEVEL_HERO /;"	d
LEVEL_IMMORTAL	src/include/constants.hh	/^#define LEVEL_IMMORTAL /;"	d
LIB	src/Makefile	/^LIB      = -L\/opt\/local\/lib$/;"	m
LIQ_WATER	src/include/constants.hh	/^#define LIQ_WATER /;"	d
LOG_ALWAYS	src/interp.cc	/^#define LOG_ALWAYS /;"	d	file:
LOG_DIR	src/include/constants.hh	/^#define LOG_DIR /;"	d
LOG_NEVER	src/interp.cc	/^#define LOG_NEVER /;"	d	file:
LOG_NORMAL	src/interp.cc	/^#define LOG_NORMAL /;"	d	file:
LOWER	src/include/macros.hh	/^#define LOWER(/;"	d
L_FLAGS	src/Makefile	/^L_FLAGS  = ${LIB} -lsqlite3 -lm -lpng16$/;"	m
Lightning	src/include/Weather.hh	/^    	Lightning,$/;"	e	enum:Weather::Sky
Location	src/include/Location.hh	/^	Location() : coord(), room_id() {}$/;"	f	class:Location
Location	src/include/Location.hh	/^	Location(const Location& l) : coord(l.coord), room_id(l.room_id) {}$/;"	f	class:Location
Location	src/include/Location.hh	/^	explicit Location(const RoomID& id) : coord(), room_id(id) {}$/;"	f	class:Location
Location	src/include/Location.hh	/^	explicit Location(const String& s) : Location() {$/;"	f	class:Location
Location	src/include/Location.hh	/^	explicit Location(const worldmap::Coordinate& c) : coord(c), room_id() {}$/;"	f	class:Location
Location	src/include/Location.hh	/^	explicit Location(const worldmap::Coordinate& c, const RoomID& id) : coord(c), room_id(id) {}$/;"	f	class:Location
Location	src/include/Location.hh	/^	explicit Location(int value) : coord(value), room_id(value) {}$/;"	f	class:Location
Location	src/include/Location.hh	/^class Location {$/;"	c
Logging	src/include/Logging.hh	/^namespace Logging {$/;"	n
MAXFSYL1	src/quest.cc	/^#define MAXFSYL1 /;"	d	file:
MAXFSYL2	src/quest.cc	/^#define MAXFSYL2 /;"	d	file:
MAXFSYL3	src/quest.cc	/^#define MAXFSYL3 /;"	d	file:
MAXMSYL1	src/quest.cc	/^#define MAXMSYL1 /;"	d	file:
MAXMSYL2	src/quest.cc	/^#define MAXMSYL2 /;"	d	file:
MAXMSYL3	src/quest.cc	/^#define MAXMSYL3 /;"	d	file:
MAX_ATTR	src/include/Character.hh	/^#define MAX_ATTR /;"	d
MAX_ATTR_FLAG	src/include/Character.hh	/^#define MAX_ATTR_FLAG /;"	d
MAX_ATTR_VALUE	src/include/Character.hh	/^#define MAX_ATTR_VALUE /;"	d
MAX_BOW_DISTANCE	src/include/constants.hh	/^#define MAX_BOW_DISTANCE /;"	d
MAX_COLORS	src/include/constants.hh	/^#define MAX_COLORS /;"	d
MAX_DONATED	src/include/constants.hh	/^#define MAX_DONATED /;"	d
MAX_EDIT_LENGTH	src/edit.cc	/^#define MAX_EDIT_LENGTH /;"	d	file:
MAX_EQSOCKETS	src/include/constants.hh	/^#define MAX_EQSOCKETS /;"	d
MAX_EXTRACLASS_SLOTS	src/include/constants.hh	/^#define MAX_EXTRACLASS_SLOTS /;"	d
MAX_GEM_SETTINGS	src/include/gem/gem.hh	/^#define MAX_GEM_SETTINGS /;"	d
MAX_GLOBAL	src/include/music.hh	/^#define MAX_GLOBAL	/;"	d
MAX_INPUT_LENGTH	src/include/memory.hh	/^#define MAX_INPUT_LENGTH /;"	d
MAX_KEY_HASH	src/include/memory.hh	/^#define MAX_KEY_HASH /;"	d
MAX_KILLER	src/include/constants.hh	/^#define MAX_KILLER	/;"	d
MAX_LEVEL	src/include/constants.hh	/^#define MAX_LEVEL /;"	d
MAX_LINES	src/include/music.hh	/^#define MAX_LINES	/;"	d
MAX_PROMPT_LEN	src/act_info.cc	/^#define MAX_PROMPT_LEN /;"	d	file:
MAX_QUERY	src/include/constants.hh	/^#define MAX_QUERY /;"	d
MAX_RAFFECTS	src/include/constants.hh	/^#define MAX_RAFFECTS	/;"	d
MAX_RAFFECT_SLOTS	src/include/constants.hh	/^#define MAX_RAFFECT_SLOTS /;"	d
MAX_STATS	src/include/constants.hh	/^#define MAX_STATS /;"	d
MAX_STRING_LENGTH	src/include/memory.hh	/^#define MAX_STRING_LENGTH /;"	d
MAX_THIEF	src/include/constants.hh	/^#define MAX_THIEF	/;"	d
MAX_TRADE	src/include/Shop.hh	/^#define MAX_TRADE /;"	d
MAX_WEAR	src/include/constants.hh	/^#define MAX_WEAR /;"	d
MEXP_LEGACY_NEWBIE	src/include/Player.hh	/^#define MEXP_LEGACY_NEWBIE	/;"	d
MEXP_LEGACY_OLDBIE	src/include/Player.hh	/^#define MEXP_LEGACY_OLDBIE	/;"	d
MEXP_TOTAL_NEWBIE	src/include/Player.hh	/^#define MEXP_TOTAL_NEWBIE	/;"	d
MIL	src/include/constants.hh	/^#define MIL /;"	d
MISC_DIR	src/include/constants.hh	/^#define MISC_DIR /;"	d
MOB_DIR	src/include/constants.hh	/^#define MOB_DIR /;"	d
MOB_VNUM_CITYGUARD	src/include/constants.hh	/^#define MOB_VNUM_CITYGUARD /;"	d
MOB_VNUM_FIDO	src/include/constants.hh	/^#define MOB_VNUM_FIDO /;"	d
MOB_VNUM_GARGOYLE	src/include/constants.hh	/^#define MOB_VNUM_GARGOYLE /;"	d
MOB_VNUM_HELGA	src/include/constants.hh	/^#define MOB_VNUM_HELGA /;"	d
MOB_VNUM_PATROLMAN	src/include/constants.hh	/^#define MOB_VNUM_PATROLMAN /;"	d
MOB_VNUM_RESZOMBIE	src/include/constants.hh	/^#define MOB_VNUM_RESZOMBIE /;"	d
MOB_VNUM_SKELETON	src/include/constants.hh	/^#define MOB_VNUM_SKELETON /;"	d
MOB_VNUM_SQUESTMOB	src/include/constants.hh	/^#define MOB_VNUM_SQUESTMOB	/;"	d
MOB_VNUM_VAMPIRE	src/include/constants.hh	/^#define MOB_VNUM_VAMPIRE /;"	d
MOB_VNUM_WRAITH	src/include/constants.hh	/^#define MOB_VNUM_WRAITH /;"	d
MOB_VNUM_ZOMBIE	src/include/constants.hh	/^#define MOB_VNUM_ZOMBIE /;"	d
MOBtrigger	src/mob_prog.cc	/^bool MOBtrigger;$/;"	v
MSL	src/include/constants.hh	/^#define MSL /;"	d
MTL	src/include/constants.hh	/^#define MTL	/;"	d
MUD_DAY	src/include/GameTime.hh	/^#define MUD_DAY	/;"	d
MUD_HOUR	src/include/GameTime.hh	/^#define MUD_HOUR	/;"	d
MUD_MONTH	src/include/GameTime.hh	/^#define MUD_MONTH	/;"	d
MUD_YEAR	src/include/GameTime.hh	/^#define MUD_YEAR	/;"	d
MUSIC_FILE	src/include/constants.hh	/^#define MUSIC_FILE /;"	d
MagT_table	src/tables.cc	/^const std::vector<MagT_type> MagT_table = {$/;"	v
MagT_type	src/include/tables.hh	/^struct MagT_type$/;"	s
MapColor	src/include/worldmap/MapColor.hh	/^	MapColor(const MapColor& m) :$/;"	f	class:worldmap::MapColor
MapColor	src/include/worldmap/MapColor.hh	/^	MapColor(unsigned int r, unsigned int g, unsigned int b) :$/;"	f	class:worldmap::MapColor
MapColor	src/include/worldmap/MapColor.hh	/^class MapColor {$/;"	c	namespace:worldmap
MobProg	src/MobProg.cc	/^MobProg(FILE *fp) {$/;"	f	class:MobProg
MobProg	src/include/MobProg.hh	/^class MobProg$/;"	c
MobProgActList	src/include/MobProgActList.hh	/^	MobProgActList() {}$/;"	f	class:MobProgActList
MobProgActList	src/include/MobProgActList.hh	/^class MobProgActList$/;"	c
MobilePrototype	src/MobilePrototype.cc	/^MobilePrototype(Area& area, const Vnum& vnum, FILE *fp) :$/;"	f	class:MobilePrototype
MobilePrototype	src/include/MobilePrototype.hh	/^class MobilePrototype$/;"	c
Msyl1	src/tables.cc	/^const String Msyl1[] = {$/;"	v
Msyl2	src/tables.cc	/^const String Msyl2[] = {$/;"	v
Msyl3	src/tables.cc	/^const String Msyl3[] = {$/;"	v
N	src/scripts/fix_pcindex.py	/^  N = mudstr.parse_flags('N')$/;"	v
NEW_LAY_COUNTER	src/include/constants.hh	/^#define NEW_LAY_COUNTER /;"	d
NOBOLD	src/include/constants.hh	/^#define NOBOLD /;"	d
NOP	src/include/telnet.hh	/^#define	NOP	/;"	d
NOTE_CHANGES	src/include/Note.hh	/^#define NOTE_CHANGES /;"	d
NOTE_DIR	src/include/constants.hh	/^#define NOTE_DIR /;"	d
NOTE_FILE	src/include/constants.hh	/^#define NOTE_FILE /;"	d
NOTE_IDEA	src/include/Note.hh	/^#define NOTE_IDEA /;"	d
NOTE_IMMQUEST	src/include/Note.hh	/^#define NOTE_IMMQUEST /;"	d
NOTE_NOTE	src/include/Note.hh	/^#define NOTE_NOTE /;"	d
NOTE_PERSONAL	src/include/Note.hh	/^#define NOTE_PERSONAL /;"	d
NOTE_ROLEPLAY	src/include/Note.hh	/^#define NOTE_ROLEPLAY /;"	d
NOTE_TRADE	src/include/Note.hh	/^#define NOTE_TRADE /;"	d
NTELOPTS	src/include/telnet.hh	/^#define	NTELOPTS	/;"	d
NULL_FILE	src/include/constants.hh	/^#define NULL_FILE /;"	d
Night	src/include/GameTime.hh	/^    	Night,$/;"	e	enum:GameTime::Sun
Note	src/include/Note.hh	/^    Note() {}$/;"	f	class:Note
Note	src/include/Note.hh	/^class Note :$/;"	c
O	src/scripts/fix_pcindex.py	/^  O = mudstr.parse_flags('O')$/;"	v
OBJDIR	src/Makefile	/^OBJDIR  = .obj$/;"	m
OBJ_VNUM_ARMS	src/include/lootv2.hh	/^#define OBJ_VNUM_ARMS	/;"	d
OBJ_VNUM_BODY	src/include/lootv2.hh	/^#define OBJ_VNUM_BODY	/;"	d
OBJ_VNUM_BRAINS	src/include/constants.hh	/^#define OBJ_VNUM_BRAINS /;"	d
OBJ_VNUM_CAMP	src/include/constants.hh	/^#define OBJ_VNUM_CAMP /;"	d
OBJ_VNUM_CORPSE_NPC	src/include/constants.hh	/^#define OBJ_VNUM_CORPSE_NPC /;"	d
OBJ_VNUM_CORPSE_PC	src/include/constants.hh	/^#define OBJ_VNUM_CORPSE_PC /;"	d
OBJ_VNUM_DISC	src/include/constants.hh	/^#define OBJ_VNUM_DISC /;"	d
OBJ_VNUM_DOO	src/include/constants.hh	/^#define OBJ_VNUM_DOO /;"	d
OBJ_VNUM_FEET	src/include/lootv2.hh	/^#define OBJ_VNUM_FEET	/;"	d
OBJ_VNUM_FINGER	src/include/lootv2.hh	/^#define OBJ_VNUM_FINGER	/;"	d
OBJ_VNUM_FLOATING	src/include/lootv2.hh	/^#define OBJ_VNUM_FLOATING	/;"	d
OBJ_VNUM_GEM_EMERALD	src/include/gem/gem.hh	/^#define OBJ_VNUM_GEM_EMERALD /;"	d
OBJ_VNUM_GEM_RUBY	src/include/gem/gem.hh	/^#define OBJ_VNUM_GEM_RUBY /;"	d
OBJ_VNUM_GUTS	src/include/constants.hh	/^#define OBJ_VNUM_GUTS /;"	d
OBJ_VNUM_HANDS	src/include/lootv2.hh	/^#define OBJ_VNUM_HANDS	/;"	d
OBJ_VNUM_HEAD	src/include/lootv2.hh	/^#define OBJ_VNUM_HEAD	/;"	d
OBJ_VNUM_HOLD	src/include/lootv2.hh	/^#define OBJ_VNUM_HOLD	/;"	d
OBJ_VNUM_HOLYSWORD	src/include/constants.hh	/^#define OBJ_VNUM_HOLYSWORD /;"	d
OBJ_VNUM_LEGS	src/include/lootv2.hh	/^#define OBJ_VNUM_LEGS	/;"	d
OBJ_VNUM_LIGHT	src/include/lootv2.hh	/^#define OBJ_VNUM_LIGHT	/;"	d
OBJ_VNUM_LIGHT_BALL	src/include/constants.hh	/^#define OBJ_VNUM_LIGHT_BALL /;"	d
OBJ_VNUM_MAP	src/include/constants.hh	/^#define OBJ_VNUM_MAP /;"	d
OBJ_VNUM_NECK	src/include/lootv2.hh	/^#define OBJ_VNUM_NECK	/;"	d
OBJ_VNUM_NEWBIEBAG	src/include/constants.hh	/^#define OBJ_VNUM_NEWBIEBAG /;"	d
OBJ_VNUM_PARCH	src/include/constants.hh	/^#define OBJ_VNUM_PARCH /;"	d
OBJ_VNUM_PIT	src/include/constants.hh	/^#define OBJ_VNUM_PIT /;"	d
OBJ_VNUM_PORTAL	src/include/constants.hh	/^#define OBJ_VNUM_PORTAL /;"	d
OBJ_VNUM_SCHOOL_AXE	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_AXE /;"	d
OBJ_VNUM_SCHOOL_BANNER	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_BANNER /;"	d
OBJ_VNUM_SCHOOL_BOW	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_BOW /;"	d
OBJ_VNUM_SCHOOL_DAGGER	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_DAGGER /;"	d
OBJ_VNUM_SCHOOL_FLAIL	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_FLAIL /;"	d
OBJ_VNUM_SCHOOL_MACE	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_MACE /;"	d
OBJ_VNUM_SCHOOL_POLEARM	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_POLEARM /;"	d
OBJ_VNUM_SCHOOL_SHIELD	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_SHIELD /;"	d
OBJ_VNUM_SCHOOL_SPEAR	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_SPEAR /;"	d
OBJ_VNUM_SCHOOL_STAFF	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_STAFF /;"	d
OBJ_VNUM_SCHOOL_SWORD	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_SWORD /;"	d
OBJ_VNUM_SCHOOL_VEST	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_VEST /;"	d
OBJ_VNUM_SCHOOL_WHIP	src/include/constants.hh	/^#define OBJ_VNUM_SCHOOL_WHIP /;"	d
OBJ_VNUM_SEVERED_HEAD	src/include/constants.hh	/^#define OBJ_VNUM_SEVERED_HEAD /;"	d
OBJ_VNUM_SHIELD	src/include/lootv2.hh	/^#define OBJ_VNUM_SHIELD	/;"	d
OBJ_VNUM_SIGN	src/include/constants.hh	/^#define OBJ_VNUM_SIGN /;"	d
OBJ_VNUM_SLICED_ARM	src/include/constants.hh	/^#define OBJ_VNUM_SLICED_ARM /;"	d
OBJ_VNUM_SLICED_LEG	src/include/constants.hh	/^#define OBJ_VNUM_SLICED_LEG /;"	d
OBJ_VNUM_SPRING	src/include/constants.hh	/^#define OBJ_VNUM_SPRING /;"	d
OBJ_VNUM_SQUESTOBJ	src/include/constants.hh	/^#define OBJ_VNUM_SQUESTOBJ	/;"	d
OBJ_VNUM_TOKEN	src/include/constants.hh	/^#define OBJ_VNUM_TOKEN /;"	d
OBJ_VNUM_TORCH	src/include/constants.hh	/^#define OBJ_VNUM_TORCH /;"	d
OBJ_VNUM_TORN_HEART	src/include/constants.hh	/^#define OBJ_VNUM_TORN_HEART /;"	d
OBJ_VNUM_TORSO	src/include/lootv2.hh	/^#define OBJ_VNUM_TORSO	/;"	d
OBJ_VNUM_VIAL	src/include/constants.hh	/^#define OBJ_VNUM_VIAL /;"	d
OBJ_VNUM_WAIST	src/include/lootv2.hh	/^#define OBJ_VNUM_WAIST	/;"	d
OBJ_VNUM_WEAPON	src/include/constants.hh	/^#define OBJ_VNUM_WEAPON /;"	d
OBJ_VNUM_WHISTLE	src/include/constants.hh	/^#define OBJ_VNUM_WHISTLE /;"	d
OBJ_VNUM_WIELD_AXE	src/include/lootv2.hh	/^#define OBJ_VNUM_WIELD_AXE	/;"	d
OBJ_VNUM_WIELD_BOW	src/include/lootv2.hh	/^#define OBJ_VNUM_WIELD_BOW	/;"	d
OBJ_VNUM_WIELD_DAGGER	src/include/lootv2.hh	/^#define OBJ_VNUM_WIELD_DAGGER	/;"	d
OBJ_VNUM_WIELD_EXOTIC	src/include/lootv2.hh	/^#define OBJ_VNUM_WIELD_EXOTIC	/;"	d
OBJ_VNUM_WIELD_FLAIL	src/include/lootv2.hh	/^#define OBJ_VNUM_WIELD_FLAIL	/;"	d
OBJ_VNUM_WIELD_MACE	src/include/lootv2.hh	/^#define OBJ_VNUM_WIELD_MACE	/;"	d
OBJ_VNUM_WIELD_POLEARM	src/include/lootv2.hh	/^#define OBJ_VNUM_WIELD_POLEARM	/;"	d
OBJ_VNUM_WIELD_SPEAR	src/include/lootv2.hh	/^#define OBJ_VNUM_WIELD_SPEAR	/;"	d
OBJ_VNUM_WIELD_SWORD	src/include/lootv2.hh	/^#define OBJ_VNUM_WIELD_SWORD	/;"	d
OBJ_VNUM_WIELD_WHIP	src/include/lootv2.hh	/^#define OBJ_VNUM_WIELD_WHIP	/;"	d
OBJ_VNUM_WRIST	src/include/lootv2.hh	/^#define OBJ_VNUM_WRIST	/;"	d
OFF_AREA_ATTACK	src/include/constants.hh	/^#define OFF_AREA_ATTACK /;"	d
OFF_BACKSTAB	src/include/constants.hh	/^#define OFF_BACKSTAB /;"	d
OFF_BASH	src/include/constants.hh	/^#define OFF_BASH /;"	d
OFF_BERSERK	src/include/constants.hh	/^#define OFF_BERSERK /;"	d
OFF_CRUSH	src/include/constants.hh	/^#define OFF_CRUSH /;"	d
OFF_DISARM	src/include/constants.hh	/^#define OFF_DISARM /;"	d
OFF_DODGE	src/include/constants.hh	/^#define OFF_DODGE /;"	d
OFF_FADE	src/include/constants.hh	/^#define OFF_FADE /;"	d
OFF_FAST	src/include/constants.hh	/^#define OFF_FAST /;"	d
OFF_KICK	src/include/constants.hh	/^#define OFF_KICK /;"	d
OFF_KICK_DIRT	src/include/constants.hh	/^#define OFF_KICK_DIRT /;"	d
OFF_PARRY	src/include/constants.hh	/^#define OFF_PARRY /;"	d
OFF_RESCUE	src/include/constants.hh	/^#define OFF_RESCUE /;"	d
OFF_TAIL	src/include/constants.hh	/^#define OFF_TAIL /;"	d
OFF_TRIP	src/include/constants.hh	/^#define OFF_TRIP /;"	d
OLDCHAR_DIR	src/include/constants.hh	/^#define OLDCHAR_DIR	/;"	d
OUTRANKS	src/include/Character.hh	/^#define OUTRANKS(/;"	d
OUTRANKS	src/include/macros.hh	/^#define OUTRANKS(/;"	d
Object	src/include/Object.hh	/^	Object(ObjectPrototype *p) : pIndexData(p) {}$/;"	f	class:Object
Object	src/include/Object.hh	/^    Object() {};$/;"	f	class:Object
Object	src/include/Object.hh	/^class Object :$/;"	c
ObjectPrototype	src/ObjectPrototype.cc	/^ObjectPrototype(Area& area, const Vnum& vnum, FILE *fp) :$/;"	f	class:ObjectPrototype
ObjectPrototype	src/include/ObjectPrototype.hh	/^class ObjectPrototype$/;"	c
ObjectValue	src/ObjectValue.cc	/^ObjectValue(const Flags& v) : _value(v.to_ulong()), _as_flags(true) {}$/;"	f	class:ObjectValue
ObjectValue	src/include/ObjectValue.hh	/^	ObjectValue() {}$/;"	f	class:ObjectValue
ObjectValue	src/include/ObjectValue.hh	/^	ObjectValue(const ObjectValue& v) : _value(v._value), _as_flags(v._as_flags) {}$/;"	f	class:ObjectValue
ObjectValue	src/include/ObjectValue.hh	/^	explicit ObjectValue(int v) : _value(v) {}$/;"	f	class:ObjectValue
ObjectValue	src/include/ObjectValue.hh	/^class ObjectValue {$/;"	c
Opponent	src/include/War.hh	/^        Opponent() {}$/;"	f	class:War::Opponent
Opponent	src/include/War.hh	/^    class Opponent$/;"	c	class:War
PAGELEN	src/include/memory.hh	/^#define PAGELEN /;"	d
PART_ARMS	src/include/constants.hh	/^#define PART_ARMS /;"	d
PART_BRAINS	src/include/constants.hh	/^#define PART_BRAINS /;"	d
PART_CLAWS	src/include/constants.hh	/^#define PART_CLAWS /;"	d
PART_EAR	src/include/constants.hh	/^#define PART_EAR /;"	d
PART_EYE	src/include/constants.hh	/^#define PART_EYE /;"	d
PART_EYESTALKS	src/include/constants.hh	/^#define PART_EYESTALKS /;"	d
PART_FANGS	src/include/constants.hh	/^#define PART_FANGS /;"	d
PART_FEET	src/include/constants.hh	/^#define PART_FEET /;"	d
PART_FINGERS	src/include/constants.hh	/^#define PART_FINGERS /;"	d
PART_FINS	src/include/constants.hh	/^#define PART_FINS /;"	d
PART_GUTS	src/include/constants.hh	/^#define PART_GUTS /;"	d
PART_HANDS	src/include/constants.hh	/^#define PART_HANDS /;"	d
PART_HEAD	src/include/constants.hh	/^#define PART_HEAD /;"	d
PART_HEART	src/include/constants.hh	/^#define PART_HEART /;"	d
PART_HORNS	src/include/constants.hh	/^#define PART_HORNS /;"	d
PART_LEGS	src/include/constants.hh	/^#define PART_LEGS /;"	d
PART_LONG_TONGUE	src/include/constants.hh	/^#define PART_LONG_TONGUE /;"	d
PART_SCALES	src/include/constants.hh	/^#define PART_SCALES /;"	d
PART_TAIL	src/include/constants.hh	/^#define PART_TAIL /;"	d
PART_TENTACLES	src/include/constants.hh	/^#define PART_TENTACLES /;"	d
PART_TUSKS	src/include/constants.hh	/^#define PART_TUSKS /;"	d
PART_WINGS	src/include/constants.hh	/^#define PART_WINGS /;"	d
PERS	src/include/Character.hh	/^#define PERS(/;"	d
PERS	src/include/macros.hh	/^#define PERS(/;"	d
PERSONAL_FILE	src/include/constants.hh	/^#define PERSONAL_FILE /;"	d
PID_FILE	src/include/constants.hh	/^#define PID_FILE /;"	d
PKTIME	src/fight.cc	/^#define PKTIME /;"	d	file:
PLAYER_DIR	src/include/constants.hh	/^#define PLAYER_DIR /;"	d
PLR_AUTOASSIST	src/include/constants.hh	/^#define PLR_AUTOASSIST /;"	d
PLR_AUTOEXIT	src/include/constants.hh	/^#define PLR_AUTOEXIT /;"	d
PLR_AUTOGOLD	src/include/constants.hh	/^#define PLR_AUTOGOLD /;"	d
PLR_AUTOLOOT	src/include/constants.hh	/^#define PLR_AUTOLOOT /;"	d
PLR_AUTOPEEK	src/include/constants.hh	/^#define PLR_AUTOPEEK /;"	d
PLR_AUTOSAC	src/include/constants.hh	/^#define PLR_AUTOSAC /;"	d
PLR_AUTOSPLIT	src/include/constants.hh	/^#define PLR_AUTOSPLIT /;"	d
PLR_CANLOOT	src/include/constants.hh	/^#define PLR_CANLOOT /;"	d
PLR_CHATMODE	src/include/constants.hh	/^#define PLR_CHATMODE /;"	d
PLR_CLOSED	src/include/constants.hh	/^#define PLR_CLOSED /;"	d
PLR_COLOR	src/include/constants.hh	/^#define PLR_COLOR /;"	d
PLR_COLOR2	src/include/constants.hh	/^#define PLR_COLOR2 /;"	d
PLR_DEFENSIVE	src/include/constants.hh	/^#define PLR_DEFENSIVE /;"	d
PLR_DUEL_IGNORE	src/include/constants.hh	/^#define PLR_DUEL_IGNORE	/;"	d
PLR_FREEZE	src/include/constants.hh	/^#define PLR_FREEZE /;"	d
PLR_HEEDNAME	src/include/constants.hh	/^#define PLR_HEEDNAME	/;"	d
PLR_KILLER	src/include/constants.hh	/^#define PLR_KILLER /;"	d
PLR_LINK_DEAD	src/include/constants.hh	/^#define PLR_LINK_DEAD /;"	d
PLR_LOG	src/include/constants.hh	/^#define PLR_LOG /;"	d
PLR_LOOKINPIT	src/include/constants.hh	/^#define PLR_LOOKINPIT /;"	d
PLR_MAKEBAG	src/include/constants.hh	/^#define PLR_MAKEBAG /;"	d
PLR_MARRIED	src/include/constants.hh	/^#define PLR_MARRIED	/;"	d
PLR_NOFOLLOW	src/include/constants.hh	/^#define PLR_NOFOLLOW /;"	d
PLR_NONOTIFY	src/include/constants.hh	/^#define PLR_NONOTIFY /;"	d
PLR_NOPK	src/include/constants.hh	/^#define PLR_NOPK /;"	d
PLR_NOSHOWLAST	src/include/constants.hh	/^#define PLR_NOSHOWLAST /;"	d
PLR_NOSUMMON	src/include/constants.hh	/^#define PLR_NOSUMMON /;"	d
PLR_OOC	src/include/constants.hh	/^#define PLR_OOC /;"	d
PLR_PAINT	src/include/constants.hh	/^#define PLR_PAINT /;"	d
PLR_PERMIT	src/include/constants.hh	/^#define PLR_PERMIT /;"	d
PLR_PK	src/include/constants.hh	/^#define PLR_PK /;"	d
PLR_PRIVATE	src/include/constants.hh	/^#define PLR_PRIVATE /;"	d
PLR_QUESTOR	src/include/constants.hh	/^#define PLR_QUESTOR /;"	d
PLR_SHOWEMAIL	src/include/constants.hh	/^#define PLR_SHOWEMAIL /;"	d
PLR_SHOWLOST	src/include/constants.hh	/^#define PLR_SHOWLOST /;"	d
PLR_SHOWRAFF	src/include/constants.hh	/^#define PLR_SHOWRAFF /;"	d
PLR_SNOOP_PROOF	src/include/constants.hh	/^#define PLR_SNOOP_PROOF /;"	d
PLR_SQUESTOR	src/include/constants.hh	/^#define PLR_SQUESTOR	/;"	d
PLR_STOPCRASH	src/include/constants.hh	/^#define PLR_STOPCRASH /;"	d
PLR_SUPERWIZ	src/include/constants.hh	/^#define PLR_SUPERWIZ /;"	d
PLR_THIEF	src/include/constants.hh	/^#define PLR_THIEF /;"	d
PLR_TICKS	src/include/constants.hh	/^#define PLR_TICKS /;"	d
PLR_VT100	src/include/constants.hh	/^#define PLR_VT100 /;"	d
PLR_WIMPY	src/include/constants.hh	/^#define PLR_WIMPY /;"	d
POSTCOMPILE	src/Makefile	/^POSTCOMPILE = @mv -f $(DEPDIR)\/$*.Td $(DEPDIR)\/$*.d && touch $@$/;"	m
POS_DEAD	src/include/constants.hh	/^#define POS_DEAD /;"	d
POS_FIGHTING	src/include/constants.hh	/^#define POS_FIGHTING /;"	d
POS_FLYING	src/include/constants.hh	/^#define POS_FLYING /;"	d
POS_INCAP	src/include/constants.hh	/^#define POS_INCAP /;"	d
POS_MORTAL	src/include/constants.hh	/^#define POS_MORTAL /;"	d
POS_RESTING	src/include/constants.hh	/^#define POS_RESTING /;"	d
POS_SITTING	src/include/constants.hh	/^#define POS_SITTING /;"	d
POS_SLEEPING	src/include/constants.hh	/^#define POS_SLEEPING /;"	d
POS_SNEAK	src/include/constants.hh	/^#define POS_SNEAK /;"	d
POS_STANDING	src/include/constants.hh	/^#define POS_STANDING /;"	d
POS_STUNNED	src/include/constants.hh	/^#define POS_STUNNED /;"	d
PULSE_AREA	src/include/constants.hh	/^#define PULSE_AREA	/;"	d
PULSE_AUCTION	src/include/constants.hh	/^#define PULSE_AUCTION	/;"	d
PULSE_JANITOR	src/include/constants.hh	/^#define PULSE_JANITOR	/;"	d
PULSE_MOBILE	src/include/constants.hh	/^#define PULSE_MOBILE	/;"	d
PULSE_MUSIC	src/include/constants.hh	/^#define PULSE_MUSIC	/;"	d
PULSE_MYSQL_UPD	src/include/constants.hh	/^#define PULSE_MYSQL_UPD	/;"	d
PULSE_PER_SECOND	src/include/constants.hh	/^#define PULSE_PER_SECOND	/;"	d
PULSE_QUEST	src/include/constants.hh	/^#define PULSE_QUEST	/;"	d
PULSE_TELEPORT	src/include/constants.hh	/^#define PULSE_TELEPORT	/;"	d
PULSE_TICK	src/include/constants.hh	/^#define PULSE_TICK	/;"	d
PULSE_UNDERWATER	src/include/constants.hh	/^#define PULSE_UNDERWATER	/;"	d
PULSE_VIOLENCE	src/include/constants.hh	/^#define PULSE_VIOLENCE	/;"	d
PUNISHMENT_FILE	src/include/constants.hh	/^#define PUNISHMENT_FILE /;"	d
PURPLE	src/include/constants.hh	/^#define PURPLE /;"	d
PUT_AT	src/include/constants.hh	/^#define PUT_AT /;"	d
PUT_IN	src/include/constants.hh	/^#define PUT_IN /;"	d
PUT_INSIDE	src/include/constants.hh	/^#define PUT_INSIDE /;"	d
PUT_ON	src/include/constants.hh	/^#define PUT_ON /;"	d
Player	src/Player.cc	/^Player::Player(Character &ch) :$/;"	f	class:Player
Player	src/include/Player.hh	/^class Player$/;"	c
PlayingState	src/include/conn/State.hh	/^struct PlayingState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
Pooled	src/include/Pooled.hh	/^	Pooled() {$/;"	f	class:Pooled
Pooled	src/include/Pooled.hh	/^template <class T > class Pooled$/;"	c
QPS_PER_PRAC	src/include/constants.hh	/^#define QPS_PER_PRAC	/;"	d
QPS_PER_TRAIN	src/include/constants.hh	/^#define QPS_PER_TRAIN	/;"	d
QUEST_OBJQUEST1	src/quest.cc	/^#define QUEST_OBJQUEST1 /;"	d	file:
QUEST_OBJQUEST2	src/quest.cc	/^#define QUEST_OBJQUEST2 /;"	d	file:
QUEST_OBJQUEST3	src/quest.cc	/^#define QUEST_OBJQUEST3 /;"	d	file:
QUEST_OBJQUEST4	src/quest.cc	/^#define QUEST_OBJQUEST4 /;"	d	file:
QUEST_OBJQUEST5	src/quest.cc	/^#define QUEST_OBJQUEST5 /;"	d	file:
QUEST_STARTROOM	src/QuestArea.cc	/^#define QUEST_STARTROOM /;"	d	file:
Quadtree	src/include/worldmap/Quadtree.hh	/^	Quadtree(unsigned int capacity) : capacity(capacity) { }$/;"	f	class:worldmap::Quadtree
Quadtree	src/include/worldmap/Quadtree.hh	/^class Quadtree {$/;"	c	namespace:worldmap
QuestArea	src/include/QuestArea.hh	/^	QuestArea() {}$/;"	f	class:QuestArea
QuestArea	src/include/QuestArea.hh	/^class QuestArea {$/;"	c
RAFF_BUGGYREC	src/include/constants.hh	/^#define  RAFF_BUGGYREC	/;"	d
RAFF_CHEAPSPELLS	src/include/constants.hh	/^#define  RAFF_CHEAPSPELLS	/;"	d
RAFF_CLUMSY	src/include/constants.hh	/^#define  RAFF_CLUMSY	/;"	d
RAFF_COSTLYSPELLS	src/include/constants.hh	/^#define  RAFF_COSTLYSPELLS	/;"	d
RAFF_EXTRAHUNGRY	src/include/constants.hh	/^#define  RAFF_EXTRAHUNGRY	/;"	d
RAFF_EXTRATHIRSTY	src/include/constants.hh	/^#define  RAFF_EXTRATHIRSTY	/;"	d
RAFF_FASTCAST	src/include/constants.hh	/^#define  RAFF_FASTCAST	/;"	d
RAFF_FAVORGOD	src/include/constants.hh	/^#define  RAFF_FAVORGOD	/;"	d
RAFF_LAUGHTERGOD	src/include/constants.hh	/^#define  RAFF_LAUGHTERGOD	/;"	d
RAFF_LESSDAMAGE	src/include/constants.hh	/^#define  RAFF_LESSDAMAGE	/;"	d
RAFF_LESSEXP	src/include/constants.hh	/^#define  RAFF_LESSEXP	/;"	d
RAFF_LIGHTFEET	src/include/constants.hh	/^#define  RAFF_LIGHTFEET	/;"	d
RAFF_MAGEREGEN	src/include/constants.hh	/^#define  RAFF_MAGEREGEN	/;"	d
RAFF_MOREDAMAGE	src/include/constants.hh	/^#define  RAFF_MOREDAMAGE	/;"	d
RAFF_MOREEXP	src/include/constants.hh	/^#define  RAFF_MOREEXP	/;"	d
RAFF_NOHUNGER	src/include/constants.hh	/^#define  RAFF_NOHUNGER	/;"	d
RAFF_NOTHIRST	src/include/constants.hh	/^#define  RAFF_NOTHIRST	/;"	d
RAFF_RES_ACID	src/include/constants.hh	/^#define  RAFF_RES_ACID	/;"	d
RAFF_RES_BLUNT	src/include/constants.hh	/^#define  RAFF_RES_BLUNT	/;"	d
RAFF_RES_COLD	src/include/constants.hh	/^#define  RAFF_RES_COLD	/;"	d
RAFF_RES_DISEASE	src/include/constants.hh	/^#define  RAFF_RES_DISEASE	/;"	d
RAFF_RES_DROWNING	src/include/constants.hh	/^#define  RAFF_RES_DROWNING	/;"	d
RAFF_RES_ELECTRICITY	src/include/constants.hh	/^#define  RAFF_RES_ELECTRICITY	/;"	d
RAFF_RES_ENERGY	src/include/constants.hh	/^#define  RAFF_RES_ENERGY	/;"	d
RAFF_RES_FIRE	src/include/constants.hh	/^#define  RAFF_RES_FIRE	/;"	d
RAFF_RES_HOLY	src/include/constants.hh	/^#define  RAFF_RES_HOLY	/;"	d
RAFF_RES_LIGHT	src/include/constants.hh	/^#define  RAFF_RES_LIGHT	/;"	d
RAFF_RES_MENTAL	src/include/constants.hh	/^#define  RAFF_RES_MENTAL	/;"	d
RAFF_RES_NEGATIVE	src/include/constants.hh	/^#define  RAFF_RES_NEGATIVE	/;"	d
RAFF_RES_PIERCE	src/include/constants.hh	/^#define  RAFF_RES_PIERCE	/;"	d
RAFF_RES_POISON	src/include/constants.hh	/^#define  RAFF_RES_POISON	/;"	d
RAFF_RES_SLASH	src/include/constants.hh	/^#define  RAFF_RES_SLASH	/;"	d
RAFF_RES_SOUND	src/include/constants.hh	/^#define  RAFF_RES_SOUND	/;"	d
RAFF_SLOWCAST	src/include/constants.hh	/^#define  RAFF_SLOWCAST	/;"	d
RAFF_SLOWWALK	src/include/constants.hh	/^#define  RAFF_SLOWWALK	/;"	d
RAFF_TEST	src/include/constants.hh	/^#define  RAFF_TEST	/;"	d
RAFF_VAMPREGEN	src/include/constants.hh	/^#define  RAFF_VAMPREGEN	/;"	d
RAFF_VULN_ACID	src/include/constants.hh	/^#define  RAFF_VULN_ACID	/;"	d
RAFF_VULN_BLUNT	src/include/constants.hh	/^#define  RAFF_VULN_BLUNT	/;"	d
RAFF_VULN_COLD	src/include/constants.hh	/^#define  RAFF_VULN_COLD	/;"	d
RAFF_VULN_DISEASE	src/include/constants.hh	/^#define  RAFF_VULN_DISEASE	/;"	d
RAFF_VULN_DROWNING	src/include/constants.hh	/^#define  RAFF_VULN_DROWNING	/;"	d
RAFF_VULN_ELECTRICITY	src/include/constants.hh	/^#define  RAFF_VULN_ELECTRICITY	/;"	d
RAFF_VULN_ENERGY	src/include/constants.hh	/^#define  RAFF_VULN_ENERGY	/;"	d
RAFF_VULN_FIRE	src/include/constants.hh	/^#define  RAFF_VULN_FIRE	/;"	d
RAFF_VULN_HOLY	src/include/constants.hh	/^#define  RAFF_VULN_HOLY	/;"	d
RAFF_VULN_LIGHT	src/include/constants.hh	/^#define  RAFF_VULN_LIGHT	/;"	d
RAFF_VULN_MENTAL	src/include/constants.hh	/^#define  RAFF_VULN_MENTAL	/;"	d
RAFF_VULN_NEGATIVE	src/include/constants.hh	/^#define  RAFF_VULN_NEGATIVE	/;"	d
RAFF_VULN_PIERCE	src/include/constants.hh	/^#define  RAFF_VULN_PIERCE	/;"	d
RAFF_VULN_POISON	src/include/constants.hh	/^#define  RAFF_VULN_POISON	/;"	d
RAFF_VULN_SLASH	src/include/constants.hh	/^#define  RAFF_VULN_SLASH	/;"	d
RAFF_VULN_SOUND	src/include/constants.hh	/^#define  RAFF_VULN_SOUND	/;"	d
RAFF_WEAKGRIP	src/include/constants.hh	/^#define  RAFF_WEAKGRIP	/;"	d
RAND_AREA_PROG	src/include/MobProg.hh	/^#define RAND_AREA_PROG /;"	d
RAND_PROG	src/include/MobProg.hh	/^#define RAND_PROG /;"	d
RANGE_ALL	src/include/Area.hh	/^#define RANGE_ALL /;"	d
RANGE_CLAN	src/include/Area.hh	/^#define RANGE_CLAN /;"	d
RANGE_IMM	src/include/Area.hh	/^#define RANGE_IMM /;"	d
RANGE_OK	src/include/Area.hh	/^#define RANGE_OK /;"	d
RANK	src/include/Character.hh	/^#define RANK(/;"	d
RANK	src/include/macros.hh	/^#define RANK(/;"	d
RANK_HEAD	src/include/constants.hh	/^#define	RANK_HEAD	/;"	d
RANK_IMM	src/include/constants.hh	/^#define	RANK_IMM	/;"	d
RANK_IMP	src/include/constants.hh	/^#define	RANK_IMP	/;"	d
RANK_MOBILE	src/include/constants.hh	/^#define	RANK_MOBILE	/;"	d
RANK_MORTAL	src/include/constants.hh	/^#define	RANK_MORTAL	/;"	d
RED	src/include/constants.hh	/^#define RED /;"	d
REST_AT	src/include/constants.hh	/^#define REST_AT /;"	d
REST_IN	src/include/constants.hh	/^#define REST_IN /;"	d
REST_ON	src/include/constants.hh	/^#define REST_ON /;"	d
RES_ACID	src/include/constants.hh	/^#define RES_ACID /;"	d
RES_BASH	src/include/constants.hh	/^#define RES_BASH /;"	d
RES_CHARM	src/include/constants.hh	/^#define RES_CHARM /;"	d
RES_COLD	src/include/constants.hh	/^#define RES_COLD /;"	d
RES_DISEASE	src/include/constants.hh	/^#define RES_DISEASE /;"	d
RES_DROWNING	src/include/constants.hh	/^#define RES_DROWNING /;"	d
RES_ELECTRICITY	src/include/constants.hh	/^#define RES_ELECTRICITY /;"	d
RES_ENERGY	src/include/constants.hh	/^#define RES_ENERGY /;"	d
RES_FIRE	src/include/constants.hh	/^#define RES_FIRE /;"	d
RES_HOLY	src/include/constants.hh	/^#define RES_HOLY /;"	d
RES_IRON	src/include/constants.hh	/^#define RES_IRON /;"	d
RES_LIGHT	src/include/constants.hh	/^#define RES_LIGHT /;"	d
RES_MAGIC	src/include/constants.hh	/^#define RES_MAGIC /;"	d
RES_MENTAL	src/include/constants.hh	/^#define RES_MENTAL /;"	d
RES_NEGATIVE	src/include/constants.hh	/^#define RES_NEGATIVE /;"	d
RES_PIERCE	src/include/constants.hh	/^#define RES_PIERCE /;"	d
RES_POISON	src/include/constants.hh	/^#define RES_POISON /;"	d
RES_SILVER	src/include/constants.hh	/^#define RES_SILVER /;"	d
RES_SLASH	src/include/constants.hh	/^#define RES_SLASH /;"	d
RES_SOUND	src/include/constants.hh	/^#define RES_SOUND /;"	d
RES_WEAPON	src/include/constants.hh	/^#define RES_WEAPON /;"	d
RES_WOOD	src/include/constants.hh	/^#define RES_WOOD /;"	d
REVERSE	src/include/constants.hh	/^#define REVERSE /;"	d
REVOKE_AUCTION	src/include/constants.hh	/^#define REVOKE_AUCTION /;"	d
REVOKE_CLAN	src/include/constants.hh	/^#define REVOKE_CLAN /;"	d
REVOKE_EMOTE	src/include/constants.hh	/^#define REVOKE_EMOTE	/;"	d
REVOKE_EXP	src/include/constants.hh	/^#define REVOKE_EXP	/;"	d
REVOKE_FLAME	src/include/constants.hh	/^#define REVOKE_FLAME /;"	d
REVOKE_FLAMEONLY	src/include/constants.hh	/^#define REVOKE_FLAMEONLY	/;"	d
REVOKE_GOSSIP	src/include/constants.hh	/^#define REVOKE_GOSSIP	/;"	d
REVOKE_GRATS	src/include/constants.hh	/^#define REVOKE_GRATS /;"	d
REVOKE_IC	src/include/constants.hh	/^#define REVOKE_IC /;"	d
REVOKE_MUSIC	src/include/constants.hh	/^#define REVOKE_MUSIC /;"	d
REVOKE_NOCHANNELS	src/include/constants.hh	/^#define REVOKE_NOCHANNELS	/;"	d
REVOKE_NOTE	src/include/constants.hh	/^#define REVOKE_NOTE	/;"	d
REVOKE_NULL	src/include/constants.hh	/^#define REVOKE_NULL	/;"	d
REVOKE_PAGE	src/include/constants.hh	/^#define REVOKE_PAGE /;"	d
REVOKE_PRAY	src/include/constants.hh	/^#define REVOKE_PRAY	/;"	d
REVOKE_QA	src/include/constants.hh	/^#define REVOKE_QA /;"	d
REVOKE_QTELL	src/include/constants.hh	/^#define REVOKE_QTELL /;"	d
REVOKE_QWEST	src/include/constants.hh	/^#define REVOKE_QWEST /;"	d
REVOKE_SAY	src/include/constants.hh	/^#define REVOKE_SAY	/;"	d
REVOKE_SOCIAL	src/include/constants.hh	/^#define REVOKE_SOCIAL /;"	d
REVOKE_TELL	src/include/constants.hh	/^#define REVOKE_TELL	/;"	d
RIDEA_FILE	src/include/constants.hh	/^#define RIDEA_FILE /;"	d
ROLEPLAY_FILE	src/include/constants.hh	/^#define ROLEPLAY_FILE /;"	d
ROOM_BANK	src/include/constants.hh	/^#define ROOM_BANK /;"	d
ROOM_DARK	src/include/constants.hh	/^#define ROOM_DARK /;"	d
ROOM_FEMALE_ONLY	src/include/constants.hh	/^#define ROOM_FEMALE_ONLY /;"	d
ROOM_GODS_ONLY	src/include/constants.hh	/^#define ROOM_GODS_ONLY /;"	d
ROOM_HEROES_ONLY	src/include/constants.hh	/^#define ROOM_HEROES_ONLY /;"	d
ROOM_IMP_ONLY	src/include/constants.hh	/^#define ROOM_IMP_ONLY /;"	d
ROOM_INDOORS	src/include/constants.hh	/^#define ROOM_INDOORS /;"	d
ROOM_LAW	src/include/constants.hh	/^#define ROOM_LAW /;"	d
ROOM_LEADER_ONLY	src/include/constants.hh	/^#define ROOM_LEADER_ONLY /;"	d
ROOM_LOCKER	src/include/constants.hh	/^#define ROOM_LOCKER /;"	d
ROOM_MALE_ONLY	src/include/constants.hh	/^#define ROOM_MALE_ONLY /;"	d
ROOM_NEWBIES_ONLY	src/include/constants.hh	/^#define ROOM_NEWBIES_ONLY /;"	d
ROOM_NOLIGHT	src/include/constants.hh	/^#define ROOM_NOLIGHT	/;"	d
ROOM_NOPORTAL	src/include/constants.hh	/^#define ROOM_NOPORTAL /;"	d
ROOM_NOQUEST	src/include/constants.hh	/^#define ROOM_NOQUEST	/;"	d
ROOM_NORANDOMRESET	src/include/constants.hh	/^#define ROOM_NORANDOMRESET	/;"	d
ROOM_NOSLEEP	src/include/constants.hh	/^#define ROOM_NOSLEEP	/;"	d
ROOM_NOVISION	src/include/constants.hh	/^#define ROOM_NOVISION	/;"	d
ROOM_NOWHERE	src/include/constants.hh	/^#define ROOM_NOWHERE /;"	d
ROOM_NO_MOB	src/include/constants.hh	/^#define ROOM_NO_MOB /;"	d
ROOM_NO_RECALL	src/include/constants.hh	/^#define ROOM_NO_RECALL /;"	d
ROOM_PET_SHOP	src/include/constants.hh	/^#define ROOM_PET_SHOP /;"	d
ROOM_PRIVATE	src/include/constants.hh	/^#define ROOM_PRIVATE /;"	d
ROOM_REMORT_ONLY	src/include/constants.hh	/^#define ROOM_REMORT_ONLY /;"	d
ROOM_SAFE	src/include/constants.hh	/^#define ROOM_SAFE /;"	d
ROOM_SILENT	src/include/constants.hh	/^#define ROOM_SILENT	/;"	d
ROOM_SOLITARY	src/include/constants.hh	/^#define ROOM_SOLITARY /;"	d
ROOM_TELEPORT	src/include/constants.hh	/^#define ROOM_TELEPORT /;"	d
ROOM_UNDER_WATER	src/include/constants.hh	/^#define ROOM_UNDER_WATER /;"	d
ROOM_VNUM_ALTAR	src/include/constants.hh	/^#define ROOM_VNUM_ALTAR /;"	d
ROOM_VNUM_ARENACENTER	src/include/constants.hh	/^#define ROOM_VNUM_ARENACENTER /;"	d
ROOM_VNUM_ARENATICKET	src/include/constants.hh	/^#define ROOM_VNUM_ARENATICKET /;"	d
ROOM_VNUM_BALANCE	src/include/constants.hh	/^#define ROOM_VNUM_BALANCE /;"	d
ROOM_VNUM_CHAT	src/include/constants.hh	/^#define ROOM_VNUM_CHAT /;"	d
ROOM_VNUM_CIRCLE	src/include/constants.hh	/^#define ROOM_VNUM_CIRCLE /;"	d
ROOM_VNUM_DEMISE	src/include/constants.hh	/^#define ROOM_VNUM_DEMISE /;"	d
ROOM_VNUM_HONOR	src/include/constants.hh	/^#define ROOM_VNUM_HONOR /;"	d
ROOM_VNUM_LIMBO	src/include/constants.hh	/^#define ROOM_VNUM_LIMBO /;"	d
ROOM_VNUM_MORGUE	src/include/constants.hh	/^#define ROOM_VNUM_MORGUE /;"	d
ROOM_VNUM_PARK	src/include/constants.hh	/^#define ROOM_VNUM_PARK /;"	d
ROOM_VNUM_SCHOOL	src/include/constants.hh	/^#define ROOM_VNUM_SCHOOL /;"	d
ROOM_VNUM_STRONGBOX	src/include/constants.hh	/^#define ROOM_VNUM_STRONGBOX /;"	d
ROOM_VNUM_TEMPLE	src/include/constants.hh	/^#define ROOM_VNUM_TEMPLE /;"	d
ROOM_VNUM_TICKETBACKROOM	src/include/constants.hh	/^#define ROOM_VNUM_TICKETBACKROOM /;"	d
Raining	src/include/Weather.hh	/^    	Raining,$/;"	e	enum:Weather::Sky
ReadIMOTDState	src/include/conn/State.hh	/^struct ReadIMOTDState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
ReadMOTDState	src/include/conn/State.hh	/^struct ReadMOTDState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
ReadNewMOTDState	src/include/conn/State.hh	/^struct ReadNewMOTDState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
Region	src/include/worldmap/Region.hh	/^class Region {$/;"	c	namespace:worldmap
Region	src/worldmap/Region.cc	/^Region::Region(Area& area, FILE *fp) : area(area) {$/;"	f	class:worldmap::Region
Reset	src/Reset.cc	/^Reset(FILE *fp) {$/;"	f	class:Reset
Reset	src/include/Reset.hh	/^class Reset$/;"	c
RollStatsState	src/include/conn/State.hh	/^struct RollStatsState : public State { virtual State *handleInput(Descriptor *, const String&); };$/;"	s	namespace:conn
Room	src/Room.cc	/^Room(RoomPrototype& p) : $/;"	f	class:Room
Room	src/include/Room.hh	/^class Room$/;"	c
RoomID	src/RoomID.cc	/^RoomID(const String& s) : RoomID() {$/;"	f	class:RoomID
RoomID	src/RoomID.cc	/^RoomID(const Vnum& vnum, int number) : RoomID() {$/;"	f	class:RoomID
RoomID	src/include/RoomID.hh	/^	RoomID() : number_data(-1), vnum_data(0) {}$/;"	f	class:RoomID
RoomID	src/include/RoomID.hh	/^	RoomID(const RoomID& id) : number_data(id.number_data), vnum_data(id.vnum_data) {}$/;"	f	class:RoomID
RoomID	src/include/RoomID.hh	/^class RoomID {$/;"	c
RoomPrototype	src/RoomPrototype.cc	/^RoomPrototype(Area& a, const Vnum& v, FILE *fp) :$/;"	f	class:RoomPrototype
RoomPrototype	src/include/RoomPrototype.hh	/^class RoomPrototype$/;"	c
SB	src/include/telnet.hh	/^#define	SB	/;"	d
SE	src/include/telnet.hh	/^#define	SE	/;"	d
SET_CLERIC_DIVINE	src/include/constants.hh	/^#define SET_CLERIC_DIVINE	/;"	d
SET_MAGE_INVOKER	src/include/constants.hh	/^#define SET_MAGE_INVOKER	/;"	d
SET_PALADIN_GRACE	src/include/constants.hh	/^#define SET_PALADIN_GRACE	/;"	d
SET_THIEF_CUTPURSE	src/include/constants.hh	/^#define SET_THIEF_CUTPURSE	/;"	d
SET_WARRIOR_BESERKER	src/include/constants.hh	/^#define SET_WARRIOR_BESERKER	/;"	d
SEX_FEMALE	src/include/constants.hh	/^#define SEX_FEMALE /;"	d
SEX_MALE	src/include/constants.hh	/^#define SEX_MALE /;"	d
SEX_NEUTRAL	src/include/constants.hh	/^#define SEX_NEUTRAL /;"	d
SHUTDOWN_FILE	src/include/constants.hh	/^#define SHUTDOWN_FILE /;"	d
SIT_AT	src/include/constants.hh	/^#define SIT_AT /;"	d
SIT_IN	src/include/constants.hh	/^#define SIT_IN /;"	d
SIT_ON	src/include/constants.hh	/^#define SIT_ON /;"	d
SIZE_GIANT	src/include/constants.hh	/^#define SIZE_GIANT /;"	d
SIZE_HUGE	src/include/constants.hh	/^#define SIZE_HUGE /;"	d
SIZE_LARGE	src/include/constants.hh	/^#define SIZE_LARGE /;"	d
SIZE_MEDIUM	src/include/constants.hh	/^#define SIZE_MEDIUM /;"	d
SIZE_SMALL	src/include/constants.hh	/^#define SIZE_SMALL /;"	d
SIZE_TINY	src/include/constants.hh	/^#define SIZE_TINY /;"	d
SKIPKEY	src/save.cc	/^#define SKIPKEY(/;"	d	file:
SKIPKEY	src/save.cc	/^#undef SKIPKEY$/;"	d	file:
SLEEP_AT	src/include/constants.hh	/^#define SLEEP_AT /;"	d
SLEEP_IN	src/include/constants.hh	/^#define SLEEP_IN /;"	d
SLEEP_ON	src/include/constants.hh	/^#define SLEEP_ON /;"	d
SLOG_FILE	src/include/constants.hh	/^#define SLOG_FILE /;"	d
SOCIAL_FILE	src/social.cc	/^#define SOCIAL_FILE /;"	d	file:
SPEC_FUN	src/include/declare.hh	/^typedef bool SPEC_FUN   args( ( Character *ch ) );$/;"	t
SPEECH_PROG	src/include/MobProg.hh	/^#define SPEECH_PROG /;"	d
SPELL_FUN	src/include/magic.hh	/^typedef void SPELL_FUN args(( skill::type sn, int level, Character *ch, void *vo, int target, int evolution));$/;"	t
SQL_ERROR	src/include/sql.hh	/^#define SQL_ERROR	/;"	d
SQL_OK	src/include/sql.hh	/^#define SQL_OK	/;"	d
STAND_AT	src/include/constants.hh	/^#define STAND_AT /;"	d
STAND_IN	src/include/constants.hh	/^#define STAND_IN /;"	d
STAND_ON	src/include/constants.hh	/^#define STAND_ON /;"	d
STAT_CHR	src/include/constants.hh	/^#define STAT_CHR /;"	d
STAT_CON	src/include/constants.hh	/^#define STAT_CON /;"	d
STAT_DEX	src/include/constants.hh	/^#define STAT_DEX /;"	d
STAT_INT	src/include/constants.hh	/^#define STAT_INT /;"	d
STAT_STR	src/include/constants.hh	/^#define STAT_STR /;"	d
STAT_WIS	src/include/constants.hh	/^#define STAT_WIS /;"	d
STD	src/Makefile	/^STD      = -std=c++14$/;"	m
STORAGE_DIR	src/include/constants.hh	/^#define STORAGE_DIR	/;"	d
STORAGE_FILE	src/include/constants.hh	/^#define STORAGE_FILE	/;"	d
STRKEY	src/save.cc	/^#define STRKEY(/;"	d	file:
STRKEY	src/save.cc	/^#undef STRKEY$/;"	d	file:
SYNCH	src/include/telnet.hh	/^#define SYNCH	/;"	d
Sector	src/include/Sector.hh	/^enum class Sector {$/;"	c
Shop	src/Shop.cc	/^Shop(FILE *fp) {$/;"	f	class:Shop
Shop	src/include/Shop.hh	/^class Shop$/;"	c
Sky	src/include/Weather.hh	/^    enum Sky {$/;"	g	class:Weather
Social	src/include/Social.hh	/^    Social() {}$/;"	f	class:Social
Social	src/include/Social.hh	/^class Social$/;"	c
State	src/include/conn/State.hh	/^struct State$/;"	s	namespace:conn
StoredPlayer	src/include/StoredPlayer.hh	/^	StoredPlayer() {}$/;"	f	class:StoredPlayer
StoredPlayer	src/include/StoredPlayer.hh	/^class StoredPlayer$/;"	c
String	src/include/String.hh	/^	String() : std::string() {};$/;"	f	class:String
String	src/include/String.hh	/^	String(const String &name) : std::string(name) {};$/;"	f	class:String
String	src/include/String.hh	/^	String(const char *c_str) : std::string(c_str == nullptr ? "" : c_str) {};$/;"	f	class:String
String	src/include/String.hh	/^	String(const std::string &s_str) : std::string(s_str) {};$/;"	f	class:String
String	src/include/String.hh	/^class String: public std::string, public Actable {$/;"	c
Sun	src/include/GameTime.hh	/^    enum Sun {$/;"	g	class:GameTime
Sunrise	src/include/GameTime.hh	/^    	Sunrise,$/;"	e	enum:GameTime::Sun
Sunset	src/include/GameTime.hh	/^    	Sunset,$/;"	e	enum:GameTime::Sun
TAIL_ACT	src/include/Tail.hh	/^#define TAIL_ACT /;"	d
TAIL_ALL	src/include/Tail.hh	/^#define TAIL_ALL /;"	d
TAIL_NONE	src/include/Tail.hh	/^#define TAIL_NONE /;"	d
TARGET_CHAR	src/include/constants.hh	/^#define TARGET_CHAR /;"	d
TARGET_NONE	src/include/constants.hh	/^#define TARGET_NONE /;"	d
TARGET_OBJ	src/include/constants.hh	/^#define TARGET_OBJ /;"	d
TARGET_ROOM	src/include/constants.hh	/^#define TARGET_ROOM /;"	d
TAR_CHAR_DEFENSIVE	src/include/constants.hh	/^#define TAR_CHAR_DEFENSIVE /;"	d
TAR_CHAR_OFFENSIVE	src/include/constants.hh	/^#define TAR_CHAR_OFFENSIVE /;"	d
TAR_CHAR_SELF	src/include/constants.hh	/^#define TAR_CHAR_SELF /;"	d
TAR_IGNORE	src/include/constants.hh	/^#define TAR_IGNORE /;"	d
TAR_OBJ_CHAR_DEF	src/include/constants.hh	/^#define TAR_OBJ_CHAR_DEF /;"	d
TAR_OBJ_CHAR_OFF	src/include/constants.hh	/^#define TAR_OBJ_CHAR_OFF /;"	d
TAR_OBJ_HERE	src/include/constants.hh	/^#define TAR_OBJ_HERE /;"	d
TAR_OBJ_INV	src/include/constants.hh	/^#define TAR_OBJ_INV /;"	d
TELOPT_BINARY	src/include/telnet.hh	/^#define TELOPT_BINARY	/;"	d
TELOPT_BM	src/include/telnet.hh	/^#define	TELOPT_BM	/;"	d
TELOPT_DET	src/include/telnet.hh	/^#define	TELOPT_DET	/;"	d
TELOPT_ECHO	src/include/telnet.hh	/^#define TELOPT_ECHO	/;"	d
TELOPT_EOR	src/include/telnet.hh	/^#define	TELOPT_EOR	/;"	d
TELOPT_EXOPL	src/include/telnet.hh	/^#define TELOPT_EXOPL	/;"	d
TELOPT_LOGOUT	src/include/telnet.hh	/^#define	TELOPT_LOGOUT	/;"	d
TELOPT_NAMS	src/include/telnet.hh	/^#define	TELOPT_NAMS	/;"	d
TELOPT_NAOCRD	src/include/telnet.hh	/^#define TELOPT_NAOCRD	/;"	d
TELOPT_NAOFFD	src/include/telnet.hh	/^#define TELOPT_NAOFFD	/;"	d
TELOPT_NAOHTD	src/include/telnet.hh	/^#define TELOPT_NAOHTD	/;"	d
TELOPT_NAOHTS	src/include/telnet.hh	/^#define TELOPT_NAOHTS	/;"	d
TELOPT_NAOL	src/include/telnet.hh	/^#define TELOPT_NAOL /;"	d
TELOPT_NAOLFD	src/include/telnet.hh	/^#define TELOPT_NAOLFD	/;"	d
TELOPT_NAOP	src/include/telnet.hh	/^#define TELOPT_NAOP /;"	d
TELOPT_NAOVTD	src/include/telnet.hh	/^#define TELOPT_NAOVTD	/;"	d
TELOPT_NAOVTS	src/include/telnet.hh	/^#define TELOPT_NAOVTS	/;"	d
TELOPT_RCP	src/include/telnet.hh	/^#define	TELOPT_RCP	/;"	d
TELOPT_RCTE	src/include/telnet.hh	/^#define	TELOPT_RCTE	/;"	d
TELOPT_SGA	src/include/telnet.hh	/^#define	TELOPT_SGA	/;"	d
TELOPT_SNDLOC	src/include/telnet.hh	/^#define	TELOPT_SNDLOC	/;"	d
TELOPT_STATUS	src/include/telnet.hh	/^#define	TELOPT_STATUS	/;"	d
TELOPT_SUPDUP	src/include/telnet.hh	/^#define	TELOPT_SUPDUP	/;"	d
TELOPT_SUPDUPOUTPUT	src/include/telnet.hh	/^#define	TELOPT_SUPDUPOUTPUT /;"	d
TELOPT_TM	src/include/telnet.hh	/^#define	TELOPT_TM	/;"	d
TELOPT_TTYPE	src/include/telnet.hh	/^#define	TELOPT_TTYPE	/;"	d
TELOPT_XASCII	src/include/telnet.hh	/^#define TELOPT_XASCII	/;"	d
TELQUAL_IS	src/include/telnet.hh	/^#define	TELQUAL_IS	/;"	d
TELQUAL_SEND	src/include/telnet.hh	/^#define	TELQUAL_SEND	/;"	d
TEMP_FILE	src/include/constants.hh	/^#define TEMP_FILE /;"	d
TICK_PROG	src/include/MobProg.hh	/^#define TICK_PROG /;"	d
TO_ABSORB	src/include/affect/Affect.hh	/^#define TO_ABSORB /;"	d
TO_AFFECTS	src/include/affect/Affect.hh	/^#define TO_AFFECTS /;"	d
TO_ALL	src/include/constants.hh	/^#define TO_ALL /;"	d
TO_CHAR	src/include/constants.hh	/^#define TO_CHAR /;"	d
TO_DEFENSE	src/include/affect/Affect.hh	/^#define TO_DEFENSE /;"	d
TO_HPREGEN	src/include/affect/Affect.hh	/^#define TO_HPREGEN	/;"	d
TO_IMMUNE	src/include/affect/Affect.hh	/^#define TO_IMMUNE /;"	d
TO_MPREGEN	src/include/affect/Affect.hh	/^#define TO_MPREGEN	/;"	d
TO_NOTVICT	src/include/constants.hh	/^#define TO_NOTVICT /;"	d
TO_NOTVIEW	src/include/constants.hh	/^#define TO_NOTVIEW /;"	d
TO_OBJECT	src/include/affect/Affect.hh	/^#define TO_OBJECT /;"	d
TO_RESIST	src/include/affect/Affect.hh	/^#define TO_RESIST /;"	d
TO_ROOM	src/include/constants.hh	/^#define TO_ROOM /;"	d
TO_ROOMFLAGS	src/include/affect/Affect.hh	/^#define TO_ROOMFLAGS	/;"	d
TO_VICT	src/include/constants.hh	/^#define TO_VICT /;"	d
TO_VICT_CHANNEL	src/include/constants.hh	/^#define TO_VICT_CHANNEL /;"	d
TO_VIEW	src/include/constants.hh	/^#define TO_VIEW /;"	d
TO_VULN	src/include/affect/Affect.hh	/^#define TO_VULN /;"	d
TO_WEAPON	src/include/affect/Affect.hh	/^#define TO_WEAPON /;"	d
TO_WORLD	src/include/constants.hh	/^#define TO_WORLD /;"	d
TRADE_FILE	src/include/constants.hh	/^#define TRADE_FILE	/;"	d
TYPO_FILE	src/include/constants.hh	/^#define TYPO_FILE /;"	d
Tail	src/include/Tail.hh	/^    Tail() {}$/;"	f	class:Tail
Tail	src/include/Tail.hh	/^class Tail$/;"	c
ThiT_table	src/tables.cc	/^const std::vector<ThiT_type> ThiT_table = {$/;"	v
ThiT_type	src/include/tables.hh	/^struct ThiT_type$/;"	s
Type	src/include/event/event.hh	/^enum Type {$/;"	g	namespace:event
UMAX	src/include/macros.hh	/^#define UMAX(/;"	d
UMIN	src/include/macros.hh	/^#define UMIN(/;"	d
UNDERLINE	src/include/constants.hh	/^#define UNDERLINE /;"	d
UPPER	src/include/macros.hh	/^#define UPPER(/;"	d
URANGE	src/include/macros.hh	/^#define URANGE(/;"	d
URANGE	src/include/merc.hh	/^#define URANGE(/;"	d
VIDEO_CODES_SHOW	src/include/constants.hh	/^#define VIDEO_CODES_SHOW /;"	d
VIDEO_DARK_MOD	src/include/constants.hh	/^#define VIDEO_DARK_MOD /;"	d
VIDEO_FLASH_LINE	src/include/constants.hh	/^#define VIDEO_FLASH_LINE /;"	d
VIDEO_FLASH_OFF	src/include/constants.hh	/^#define VIDEO_FLASH_OFF /;"	d
VIDEO_VT100	src/include/constants.hh	/^#define VIDEO_VT100 /;"	d
VIS_ALL	src/include/constants.hh	/^#define VIS_ALL	/;"	d
VIS_CHAR	src/include/constants.hh	/^#define VIS_CHAR	/;"	d
VIS_PLR	src/include/constants.hh	/^#define VIS_PLR	/;"	d
VT_BAR	src/include/vt100.hh	/^#define VT_BAR /;"	d
VT_CLEAR_LINE	src/include/vt100.hh	/^#define VT_CLEAR_LINE /;"	d
VT_CLEAR_SCREEN	src/include/vt100.hh	/^#define VT_CLEAR_SCREEN /;"	d
VT_RESET_TERMINAL	src/include/vt100.hh	/^#define VT_RESET_TERMINAL /;"	d
VT_RESTORECURSOR	src/include/vt100.hh	/^#define VT_RESTORECURSOR /;"	d
VT_SAVECURSOR	src/include/vt100.hh	/^#define VT_SAVECURSOR /;"	d
VT_SETWIN_CLEAR	src/include/vt100.hh	/^#define VT_SETWIN_CLEAR /;"	d
VULN_ACID	src/include/constants.hh	/^#define VULN_ACID /;"	d
VULN_BASH	src/include/constants.hh	/^#define VULN_BASH /;"	d
VULN_CHARM	src/include/constants.hh	/^#define VULN_CHARM /;"	d
VULN_COLD	src/include/constants.hh	/^#define VULN_COLD /;"	d
VULN_DISEASE	src/include/constants.hh	/^#define VULN_DISEASE /;"	d
VULN_DROWNING	src/include/constants.hh	/^#define VULN_DROWNING /;"	d
VULN_ELECTRICITY	src/include/constants.hh	/^#define VULN_ELECTRICITY /;"	d
VULN_ENERGY	src/include/constants.hh	/^#define VULN_ENERGY /;"	d
VULN_FIRE	src/include/constants.hh	/^#define VULN_FIRE /;"	d
VULN_HOLY	src/include/constants.hh	/^#define VULN_HOLY /;"	d
VULN_IRON	src/include/constants.hh	/^#define VULN_IRON /;"	d
VULN_LIGHT	src/include/constants.hh	/^#define VULN_LIGHT /;"	d
VULN_MAGIC	src/include/constants.hh	/^#define VULN_MAGIC /;"	d
VULN_MENTAL	src/include/constants.hh	/^#define VULN_MENTAL /;"	d
VULN_NEGATIVE	src/include/constants.hh	/^#define VULN_NEGATIVE /;"	d
VULN_PIERCE	src/include/constants.hh	/^#define VULN_PIERCE /;"	d
VULN_POISON	src/include/constants.hh	/^#define VULN_POISON /;"	d
VULN_SILVER	src/include/constants.hh	/^#define VULN_SILVER /;"	d
VULN_SLASH	src/include/constants.hh	/^#define VULN_SLASH /;"	d
VULN_SOUND	src/include/constants.hh	/^#define VULN_SOUND /;"	d
VULN_WEAPON	src/include/constants.hh	/^#define VULN_WEAPON /;"	d
VULN_WOOD	src/include/constants.hh	/^#define VULN_WOOD /;"	d
Vnum	src/include/Vnum.hh	/^	Vnum(const Vnum& v) : _value(v._value) {}$/;"	f	class:Vnum
Vnum	src/include/Vnum.hh	/^	Vnum(int v) : _value(v) {}$/;"	f	class:Vnum
Vnum	src/include/Vnum.hh	/^class Vnum {$/;"	c
VnumRange	src/include/World.hh	/^	VnumRange(Vnum mn, Vnum mx) : min(mn), max(mx) {}$/;"	f	struct:VnumRange
VnumRange	src/include/World.hh	/^struct VnumRange {$/;"	s
WAIT_STATE	src/include/Character.hh	/^#define WAIT_STATE(/;"	d
WAIT_STATE	src/include/macros.hh	/^#define WAIT_STATE(/;"	d
WARNING	src/Makefile	/^WARNING  = -Wall -Winline -Wno-write-strings -Wno-format-security -Wsign-compare$/;"	m
WAR_DIR	src/War.cc	/^#define WAR_DIR /;"	d	file:
WAR_FILE	src/War.cc	/^#define WAR_FILE /;"	d	file:
WBB_FILE	src/include/constants.hh	/^#define WBB_FILE /;"	d
WBI_FILE	src/include/constants.hh	/^#define WBI_FILE /;"	d
WEAPON_ACIDIC	src/include/constants.hh	/^#define WEAPON_ACIDIC /;"	d
WEAPON_AXE	src/include/constants.hh	/^#define WEAPON_AXE /;"	d
WEAPON_BOW	src/include/constants.hh	/^#define WEAPON_BOW /;"	d
WEAPON_DAGGER	src/include/constants.hh	/^#define WEAPON_DAGGER /;"	d
WEAPON_EXOTIC	src/include/constants.hh	/^#define WEAPON_EXOTIC /;"	d
WEAPON_FLAIL	src/include/constants.hh	/^#define WEAPON_FLAIL /;"	d
WEAPON_FLAMING	src/include/constants.hh	/^#define WEAPON_FLAMING /;"	d
WEAPON_FROST	src/include/constants.hh	/^#define WEAPON_FROST /;"	d
WEAPON_MACE	src/include/constants.hh	/^#define WEAPON_MACE /;"	d
WEAPON_POISON	src/include/constants.hh	/^#define WEAPON_POISON /;"	d
WEAPON_POLEARM	src/include/constants.hh	/^#define WEAPON_POLEARM /;"	d
WEAPON_SHARP	src/include/constants.hh	/^#define WEAPON_SHARP /;"	d
WEAPON_SHOCKING	src/include/constants.hh	/^#define WEAPON_SHOCKING /;"	d
WEAPON_SPEAR	src/include/constants.hh	/^#define WEAPON_SPEAR /;"	d
WEAPON_SWORD	src/include/constants.hh	/^#define WEAPON_SWORD /;"	d
WEAPON_TWO_HANDS	src/include/constants.hh	/^#define WEAPON_TWO_HANDS /;"	d
WEAPON_VAMPIRIC	src/include/constants.hh	/^#define WEAPON_VAMPIRIC /;"	d
WEAPON_VORPAL	src/include/constants.hh	/^#define WEAPON_VORPAL /;"	d
WEAPON_WHIP	src/include/constants.hh	/^#define WEAPON_WHIP /;"	d
WEAR_ABOUT	src/include/constants.hh	/^#define WEAR_ABOUT /;"	d
WEAR_ARMS	src/include/constants.hh	/^#define WEAR_ARMS /;"	d
WEAR_BODY	src/include/constants.hh	/^#define WEAR_BODY /;"	d
WEAR_FEET	src/include/constants.hh	/^#define WEAR_FEET /;"	d
WEAR_FINGER_L	src/include/constants.hh	/^#define WEAR_FINGER_L /;"	d
WEAR_FINGER_R	src/include/constants.hh	/^#define WEAR_FINGER_R /;"	d
WEAR_FLOAT	src/include/constants.hh	/^#define WEAR_FLOAT /;"	d
WEAR_HANDS	src/include/constants.hh	/^#define WEAR_HANDS /;"	d
WEAR_HEAD	src/include/constants.hh	/^#define WEAR_HEAD /;"	d
WEAR_HOLD	src/include/constants.hh	/^#define WEAR_HOLD /;"	d
WEAR_LEGS	src/include/constants.hh	/^#define WEAR_LEGS /;"	d
WEAR_LIGHT	src/include/constants.hh	/^#define WEAR_LIGHT /;"	d
WEAR_NECK_1	src/include/constants.hh	/^#define WEAR_NECK_1 /;"	d
WEAR_NECK_2	src/include/constants.hh	/^#define WEAR_NECK_2 /;"	d
WEAR_NONE	src/include/constants.hh	/^#define WEAR_NONE /;"	d
WEAR_SECONDARY	src/include/constants.hh	/^#define WEAR_SECONDARY /;"	d
WEAR_SHIELD	src/include/constants.hh	/^#define WEAR_SHIELD /;"	d
WEAR_WAIST	src/include/constants.hh	/^#define WEAR_WAIST /;"	d
WEAR_WEDDINGRING	src/include/constants.hh	/^#define WEAR_WEDDINGRING	/;"	d
WEAR_WIELD	src/include/constants.hh	/^#define WEAR_WIELD /;"	d
WEAR_WRIST_L	src/include/constants.hh	/^#define WEAR_WRIST_L /;"	d
WEAR_WRIST_R	src/include/constants.hh	/^#define WEAR_WRIST_R /;"	d
WEIGHT_MULT	src/include/Object.hh	/^#define WEIGHT_MULT(/;"	d
WEIGHT_MULT	src/include/macros.hh	/^#define WEIGHT_MULT(/;"	d
WHITE	src/include/constants.hh	/^#define WHITE /;"	d
WIELD_AXE	src/include/lootv2.hh	/^#define WIELD_AXE	/;"	d
WIELD_BOW	src/include/lootv2.hh	/^#define WIELD_BOW	/;"	d
WIELD_DAGGER	src/include/lootv2.hh	/^#define WIELD_DAGGER	/;"	d
WIELD_EXOTIC	src/include/lootv2.hh	/^#define WIELD_EXOTIC	/;"	d
WIELD_FLAIL	src/include/lootv2.hh	/^#define WIELD_FLAIL	/;"	d
WIELD_MACE	src/include/lootv2.hh	/^#define WIELD_MACE	/;"	d
WIELD_POLEARM	src/include/lootv2.hh	/^#define WIELD_POLEARM	/;"	d
WIELD_SPEAR	src/include/lootv2.hh	/^#define WIELD_SPEAR	/;"	d
WIELD_SWORD	src/include/lootv2.hh	/^#define WIELD_SWORD	/;"	d
WIELD_WHIP	src/include/lootv2.hh	/^#define WIELD_WHIP	/;"	d
WILL	src/include/telnet.hh	/^#define	WILL	/;"	d
WIZ_AUCTION	src/include/constants.hh	/^#define WIZ_AUCTION /;"	d
WIZ_BUGS	src/include/constants.hh	/^#define WIZ_BUGS /;"	d
WIZ_CHEAT	src/include/constants.hh	/^#define WIZ_CHEAT /;"	d
WIZ_DEATHS	src/include/constants.hh	/^#define WIZ_DEATHS /;"	d
WIZ_FLAGS	src/include/constants.hh	/^#define WIZ_FLAGS /;"	d
WIZ_LEVELS	src/include/constants.hh	/^#define WIZ_LEVELS /;"	d
WIZ_LINKS	src/include/constants.hh	/^#define WIZ_LINKS /;"	d
WIZ_LOAD	src/include/constants.hh	/^#define WIZ_LOAD /;"	d
WIZ_LOGINS	src/include/constants.hh	/^#define WIZ_LOGINS /;"	d
WIZ_MAIL	src/include/constants.hh	/^#define WIZ_MAIL /;"	d
WIZ_MALLOC	src/include/constants.hh	/^#define WIZ_MALLOC /;"	d
WIZ_MISC	src/include/constants.hh	/^#define WIZ_MISC /;"	d
WIZ_MOBDEATHS	src/include/constants.hh	/^#define WIZ_MOBDEATHS /;"	d
WIZ_NEWBIE	src/include/constants.hh	/^#define WIZ_NEWBIE /;"	d
WIZ_ON	src/include/constants.hh	/^#define WIZ_ON /;"	d
WIZ_PENALTIES	src/include/constants.hh	/^#define WIZ_PENALTIES /;"	d
WIZ_PREFIX	src/include/constants.hh	/^#define WIZ_PREFIX /;"	d
WIZ_PURGE	src/include/constants.hh	/^#define WIZ_PURGE	/;"	d
WIZ_QUEST	src/include/constants.hh	/^#define WIZ_QUEST /;"	d
WIZ_RESETS	src/include/constants.hh	/^#define WIZ_RESETS /;"	d
WIZ_RESTORE	src/include/constants.hh	/^#define WIZ_RESTORE /;"	d
WIZ_SACCING	src/include/constants.hh	/^#define WIZ_SACCING /;"	d
WIZ_SECURE	src/include/constants.hh	/^#define WIZ_SECURE /;"	d
WIZ_SITES	src/include/constants.hh	/^#define WIZ_SITES /;"	d
WIZ_SNOOPS	src/include/constants.hh	/^#define WIZ_SNOOPS /;"	d
WIZ_SPAM	src/include/constants.hh	/^#define WIZ_SPAM /;"	d
WIZ_SWITCHES	src/include/constants.hh	/^#define WIZ_SWITCHES /;"	d
WONT	src/include/telnet.hh	/^#define	WONT	/;"	d
WORK_FILE	src/include/constants.hh	/^#define WORK_FILE	/;"	d
WORLDMAP_DIR	src/include/constants.hh	/^#define WORLDMAP_DIR /;"	d
WORLDMAP_IMAGE_FILE	src/include/constants.hh	/^#define WORLDMAP_IMAGE_FILE /;"	d
WRAP_WIDTH	src/edit.cc	/^#define WRAP_WIDTH /;"	d	file:
War	src/War.cc	/^War::War() {$/;"	f	class:War
War	src/include/War.hh	/^class War$/;"	c
WarT_table	src/tables.cc	/^const std::vector<WarT_type> WarT_table = {$/;"	v
WarT_type	src/include/tables.hh	/^struct WarT_type$/;"	s
Weather	src/Weather.cc	/^Weather(const GameTime& t) :$/;"	f	class:Weather
Weather	src/include/Weather.hh	/^class Weather$/;"	c
World	src/World.cc	/^World() :$/;"	f	class:World
World	src/include/World.hh	/^class World$/;"	c
Worldmap	src/include/worldmap/Worldmap.hh	/^class Worldmap {$/;"	c	namespace:worldmap
Worldmap	src/worldmap/Worldmap.cc	/^Worldmap() {$/;"	f	class:worldmap::Worldmap
YELLOW	src/include/constants.hh	/^#define YELLOW /;"	d
_align_x	src/include/worldmap/Region.hh	/^	unsigned int _align_x;$/;"	m	class:worldmap::Region
_align_y	src/include/worldmap/Region.hh	/^	unsigned int _align_y;$/;"	m	class:worldmap::Region
_as_flags	src/include/ObjectValue.hh	/^	bool _as_flags = false;$/;"	m	class:ObjectValue
_bitvector	src/include/affect/Affect.hh	/^    int                 _bitvector = 0; \/\/ only for weapon flags now$/;"	m	class:affect::Affect
_computed	src/include/worldmap/MapColor.hh	/^	unsigned int _computed = 0;$/;"	m	class:worldmap::MapColor
_db	src/sqlite.cc	/^sqlite3* _db = nullptr;$/;"	v
_garbage	src/include/Garbage.hh	/^	bool _garbage = true;$/;"	m	class:Garbage
_height	src/include/util/Image.hh	/^	unsigned int _height = 0;$/;"	m	class:util::Image
_height	src/include/worldmap/Worldmap.hh	/^	unsigned int _height, _width;$/;"	m	class:worldmap::Worldmap
_num_imms	src/include/Area.hh	/^    int _num_imms = 0;$/;"	m	class:Area
_num_players	src/include/Area.hh	/^    int _num_players = 0;$/;"	m	class:Area
_prototype_color_map	src/include/worldmap/Region.hh	/^	std::map<Vnum, MapColor> _prototype_color_map;$/;"	m	class:worldmap::Region
_result	src/sqlite.cc	/^sqlite3_stmt* _result = nullptr;$/;"	v
_value	src/include/ObjectValue.hh	/^	int _value = 0;$/;"	m	class:ObjectValue
_value	src/include/Vnum.hh	/^	int _value = 0;$/;"	m	class:Vnum
_width	src/include/util/Image.hh	/^	unsigned int _width = 0;$/;"	m	class:util::Image
_width	src/include/worldmap/Worldmap.hh	/^	unsigned int _height, _width;$/;"	m	class:worldmap::Worldmap
absorb_flags	src/include/MobilePrototype.hh	/^    Flags               absorb_flags;$/;"	m	class:MobilePrototype
ac	src/include/MobilePrototype.hh	/^    int              ac[4] = {0};$/;"	m	class:MobilePrototype
accept_timer	src/include/Duel.hh	/^    int     accept_timer = 0;$/;"	m	class:Duel
acceptable_sac	src/act_obj.cc	/^bool acceptable_sac(Character *ch, Object *obj)$/;"	f
access_room	src/hunt.cc	/^static Room *access_room(HUNT_CONDITIONS *cond, Exit *ex)$/;"	f	file:
acid_blast	src/include/skill/Type.hh	/^    acid_blast,$/;"	m	class:skill::type
acid_breath	src/include/affect/Type.hh	/^    acid_breath,$/;"	m	class:affect::type
acid_breath	src/include/skill/Type.hh	/^    acid_breath,$/;"	m	class:skill::type
acid_effect	src/effects.cc	/^void acid_effect(void *vo, int level, int dam, int target, int evolution)$/;"	f
acid_rain	src/include/skill/Type.hh	/^    acid_rain,$/;"	m	class:skill::type
act	src/act.cc	/^void act(const String& format, Character *actor, const Actable& arg1, const Actable& arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, const Actable& arg1, const Actable* arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, const Actable& arg1, const char *arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, const Actable& arg1, std::nullptr_t arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, const Actable* arg1, const Actable& arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, const Actable* arg1, const Actable* arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, const Actable* arg1, const char *arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, const Actable* arg1, std::nullptr_t arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, const char *arg1, const Actable& arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, const char *arg1, const Actable* arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, const char *arg1, const char *arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, const char *arg1, std::nullptr_t arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, std::nullptr_t arg1, const Actable& arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, std::nullptr_t arg1, const Actable* arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, std::nullptr_t arg1, const char *arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/act.cc	/^void act(const String& format, Character *actor, std::nullptr_t arg1, std::nullptr_t arg2, int type, int min_pos, bool censor, Room *room) {$/;"	f
act	src/include/merc.hh	/^	Flags       act;                    \/* act bits for the race *\/$/;"	m	struct:race_type
act	src/scripts/fix_pcindex.py	/^  act = int(player['act'])$/;"	v
act_bit_name	src/typename.cc	/^const String act_bit_name(const Flags& flags, bool npc) {$/;"	f
act_bug	src/act.cc	/^void act_bug(const String& var, char letter, const String fmt) {$/;"	f
act_flags	src/include/Character.hh	/^    Flags               act_flags;$/;"	m	class:Character
act_flags	src/include/MobilePrototype.hh	/^    Flags               act_flags;$/;"	m	class:MobilePrototype
act_flags	src/tables.cc	/^const std::vector<flag_type> act_flags = {$/;"	v
act_format	src/act.cc	/^void act_format(const String& format, Character *actor,$/;"	f
act_parse	src/act.cc	/^void act_parse($/;"	f
add	src/include/GarbageCollectingList.hh	/^    void add(T ptr) { container.push_front(ptr); ptr->not_garbage(); }$/;"	f	class:GarbageCollectingList
add	src/include/tables.hh	/^    Flags add;$/;"	m	struct:raffects
addStringToObject	src/include/JSON/cJSON.hh	/^inline void addStringToObject(cJSON *obj, const String& key, const String& str) {$/;"	f	namespace:JSON
add_base_stats	src/lootv2.cc	/^void add_base_stats(Object *obj, int ilevel, int item_qual) {$/;"	f
add_cgroup	src/Character.cc	/^add_cgroup(const Flags& cg) {$/;"	f	class:Character
add_char	src/Area.cc	/^add_char(Character *ch) {$/;"	f	class:Area
add_char	src/Room.cc	/^add_char(Character *ch) {$/;"	f	class:Room
add_char	src/World.cc	/^add_char(Character *ch) {$/;"	f	class:World
add_follower	src/act_comm.cc	/^void add_follower(Character *ch, Character *master)$/;"	f
add_help	src/help.cc	/^void add_help(int group, int order, int level, const String& keywords, const String& text)$/;"	f
add_perm_to_char	src/affect/affect_char.cc	/^void add_perm_to_char(Character *ch, ::affect::type type) {$/;"	f	namespace:affect
add_racial_to_char	src/affect/affect_char.cc	/^void add_racial_to_char(Character *ch) {$/;"	f	namespace:affect
add_type_to_char	src/affect/affect_char.cc	/^void add_type_to_char(Character *ch, ::affect::type type, int level, int duration, int evolution, bool permanent) {$/;"	f	namespace:affect
advance_level	src/update.cc	/^void advance_level(Character *ch)$/;"	f
af_loc	src/include/lootv2.hh	/^	int af_loc;$/;"	m	struct:mod_t
af_mod_max	src/include/lootv2.hh	/^	int af_mod_max;$/;"	m	struct:mod_t
af_mod_min	src/include/lootv2.hh	/^	int af_mod_min;$/;"	m	struct:mod_t
af_where	src/include/lootv2.hh	/^	int af_where;$/;"	m	struct:mod_t
aff	src/include/merc.hh	/^	Flags       aff;                    \/* aff bits for the race *\/$/;"	m	struct:race_type
affect	src/affect/affect.cc	/^namespace affect {$/;"	n	file:
affect	src/affect/affect_cache_array.cc	/^namespace affect {$/;"	n	file:
affect	src/affect/affect_char.cc	/^namespace affect {$/;"	n	file:
affect	src/affect/affect_list.cc	/^namespace affect {$/;"	n	file:
affect	src/affect/affect_obj.cc	/^namespace affect {$/;"	n	file:
affect	src/affect/affect_room.cc	/^namespace affect {$/;"	n	file:
affect	src/affect/affect_table.cc	/^namespace affect {$/;"	n	file:
affect	src/include/Character.hh	/^namespace affect { class Affect; }$/;"	n
affect	src/include/Object.hh	/^namespace affect { class Affect; }$/;"	n
affect	src/include/ObjectPrototype.hh	/^namespace affect { class Affect; }$/;"	n
affect	src/include/Room.hh	/^namespace affect { class Affect; }$/;"	n
affect	src/include/affect/Affect.hh	/^namespace affect {$/;"	n
affect	src/include/affect/Type.hh	/^namespace affect {$/;"	n
affect	src/include/affect/affect_int.hh	/^namespace affect {$/;"	n
affect	src/include/affect/affect_list.hh	/^namespace affect {$/;"	n
affect	src/include/merc.hh	/^	int      affect[5];$/;"	m	struct:liq_type
affect_cache	src/include/Character.hh	/^    void *              affect_cache = nullptr;$/;"	m	class:Character
affect_callback_weaken_bonewall	src/fight.cc	/^int affect_callback_weaken_bonewall(affect::Affect *node, void *null) {$/;"	f
affect_checksum	src/include/ObjectPrototype.hh	/^    unsigned long       affect_checksum = 0; \/\/ for comparing to instances on saving$/;"	m	class:ObjectPrototype
affect_flags	src/include/MobilePrototype.hh	/^    Flags               affect_flags;$/;"	m	class:MobilePrototype
affect_flags	src/tables.cc	/^const std::vector<flag_type> affect_flags = {$/;"	v
affect_fn	src/include/affect/Affect.hh	/^typedef int (*affect_fn)(Affect *node, void *data);$/;"	t	namespace:affect
affect_fn_dispel_char	src/dispel.cc	/^int affect_fn_dispel_char(affect::Affect *node, void *data) {$/;"	f
affect_fn_dispel_obj	src/dispel.cc	/^int affect_fn_dispel_obj(affect::Affect *node, void *data) {$/;"	f
affect_fn_params	src/include/affect/Affect.hh	/^} affect_fn_params;$/;"	t	namespace:affect	typeref:struct:affect::fn_params
affect_index_lookup	src/tables.cc	/^int affect_index_lookup(const String& name, const std::vector<affect_table_type>& affect_table)$/;"	f
affect_loc_name	src/typename.cc	/^String affect_loc_name(int location)$/;"	f
affect_table	src/affect/affect_table.cc	/^const std::map<::affect::type, const table_entry> affect_table = {$/;"	m	namespace:affect	file:
affect_table_type	src/include/tables.hh	/^struct affect_table_type {$/;"	s
affected	src/include/Character.hh	/^    affect::Affect *    affected = nullptr;$/;"	m	class:Character
affected	src/include/Object.hh	/^    affect::Affect *   affected = nullptr; \/\/ the compiled list, never shown in 'stat' or 'lore', so it can be deduped.$/;"	m	class:Object
affected	src/include/ObjectPrototype.hh	/^    affect::Affect *       affected = nullptr;$/;"	m	class:ObjectPrototype
affected	src/include/Room.hh	/^	affect::Affect *		affected = nullptr;		\/* Montrey *\/$/;"	m	class:Room
affects_modified	src/include/Object.hh	/^    bool            affects_modified = false; \/\/ set true if an affect changes, so they can be recompiled in the update loop$/;"	m	class:Object
afk	src/include/Player.hh	/^	String              afk;$/;"	m	class:Player
age	src/include/Area.hh	/^    int              age = 0;$/;"	m	class:Area
age	src/include/affect/Type.hh	/^    age,$/;"	m	class:affect::type
age	src/include/skill/Type.hh	/^    age,$/;"	m	class:skill::type
age_update	src/update.cc	/^void age_update(void)$/;"	f
aggr_update	src/update.cc	/^void aggr_update(void)$/;"	f
air	src/include/Sector.hh	/^	air = 9,$/;"	m	class:Sector
alias	src/include/Player.hh	/^	std::map<String, String> alias;$/;"	m	class:Player
align	src/act_comm.cc	/^void align(Character *ch, int new_align, char *align_str)$/;"	f
align	src/include/merc.hh	/^	String      align;$/;"	m	struct:deity_type
align	src/include/skill/Type.hh	/^    align,$/;"	m	class:skill::type
align_x	src/include/worldmap/Region.hh	/^	unsigned int align_x() const { return _align_x; }$/;"	f	class:worldmap::Region
align_y	src/include/worldmap/Region.hh	/^	unsigned int align_y() const { return _align_y; }$/;"	f	class:worldmap::Region
alignment	src/include/Character.hh	/^    int              alignment = 0;$/;"	m	class:Character
alignment	src/include/MobilePrototype.hh	/^    int              alignment = 0;$/;"	m	class:MobilePrototype
alloc_new	src/include/Pooled.hh	/^	static void alloc_new() {$/;"	f	class:Pooled
allowed_mob_resets	src/include/worldmap/Region.hh	/^	std::set<Vnum> allowed_mob_resets; \/\/ list of mob vnums that can reset in this region$/;"	m	class:worldmap::Region
allowed_room_resets	src/include/worldmap/Region.hh	/^	std::set<Vnum> allowed_room_resets; \/\/ list of room vnums that can have mobs reset into$/;"	m	class:worldmap::Region
alpha	src/include/util/Image.hh	/^	enum Channel { red = 0, green, blue, alpha };$/;"	e	enum:util::Image::Channel
animate_gargoyle	src/include/skill/Type.hh	/^    animate_gargoyle,$/;"	m	class:skill::type
animate_mob	src/magic.cc	/^void animate_mob(Character *ch, int level, const char *name, long vnum)$/;"	f
animate_skeleton	src/include/skill/Type.hh	/^    animate_skeleton,$/;"	m	class:skill::type
animate_wraith	src/include/skill/Type.hh	/^    animate_wraith,$/;"	m	class:skill::type
animate_zombie	src/include/skill/Type.hh	/^    animate_zombie,$/;"	m	class:skill::type
anvil_owner_name	src/act_obj.cc	/^String anvil_owner_name(Object *anvil)$/;"	f
append_clan	src/clan-edit.cc	/^void append_clan(Clan *c)$/;"	f
append_duel	src/duel.cc	/^void append_duel(Duel *c)$/;"	f
append_note	src/Note.cc	/^void append_note(Note *pnote)$/;"	f
append_war	src/War.cc	/^void append_war(War *war)$/;"	f
apply_ac	src/handler.cc	/^int apply_ac(Object *obj, int iWear, int type)$/;"	f
apply_cache	src/include/Character.hh	/^    int *               apply_cache = nullptr; \/\/ maximum stat without eq\/affects$/;"	m	class:Character
apply_loc	src/include/gem/gem.hh	/^    int			apply_loc;$/;"	m	struct:gem::type_st
archery	src/include/skill/Type.hh	/^    archery,$/;"	m	class:skill::type
area	src/QuestArea.cc	/^area() const {$/;"	f	class:QuestArea
area	src/Room.cc	/^Area& Room::area() const { return prototype.area; }$/;"	f	class:Room
area	src/hunt.cc	/^	const Area *area;$/;"	m	struct:hunt_conditions	file:
area	src/include/MobilePrototype.hh	/^    Area&                   area;$/;"	m	class:MobilePrototype
area	src/include/ObjectPrototype.hh	/^    Area&                   area;$/;"	m	class:ObjectPrototype
area	src/include/RoomPrototype.hh	/^	Area&		area;$/;"	m	class:RoomPrototype
area	src/include/worldmap/Region.hh	/^	Area& area;$/;"	m	class:worldmap::Region
area_entrance	src/include/Sector.hh	/^    area_entrance = 253,$/;"	m	class:Sector
area_maxvnum	src/include/Clan.hh	/^    Vnum      area_maxvnum = 0;$/;"	m	class:Clan
area_minvnum	src/include/Clan.hh	/^    Vnum      area_minvnum = 0;$/;"	m	class:Clan
area_type	src/include/Area.hh	/^    char                area_type = 0;  \/* -- Elrac *\/$/;"	m	class:Area
areas	src/include/World.hh	/^	std::map<VnumRange, Area *> areas;$/;"	m	class:World
arena	src/include/Duel.hh	/^    Duel::Arena *    arena = nullptr;$/;"	m	class:Duel
arena	src/include/Sector.hh	/^	arena = 20,$/;"	m	class:Sector
arena_table_head	src/duel.cc	/^Duel::Arena *arena_table_head;$/;"	v
arena_table_tail	src/duel.cc	/^Duel::Arena *arena_table_tail;$/;"	v
arenakilled	src/include/Player.hh	/^	int              arenakilled = 0;$/;"	m	class:Player
arenakills	src/include/Player.hh	/^	int              arenakills = 0;$/;"	m	class:Player
arg1	src/include/Reset.hh	/^    int              arg1 = 0;$/;"	m	class:Reset
arg2	src/include/Reset.hh	/^    int              arg2 = 0;$/;"	m	class:Reset
arg3	src/include/Reset.hh	/^    int              arg3 = 0;$/;"	m	class:Reset
arg4	src/include/Reset.hh	/^    int              arg4 = 0;$/;"	m	class:Reset
arglist	src/include/MobProg.hh	/^    String      arglist;$/;"	m	class:MobProg
args	src/include/declare.hh	/^#define args(/;"	d
armor	src/include/affect/Type.hh	/^    armor,$/;"	m	class:affect::type
armor	src/include/skill/Type.hh	/^    armor,$/;"	m	class:skill::type
armor_base	src/include/Character.hh	/^	int		        armor_base[4] = {0};$/;"	m	class:Character
astr	src/include/War.hh	/^        String  astr;$/;"	m	class:War::Event
atoi	src/include/String.hh	/^inline int atoi(const String& astr) {$/;"	f
attack_lookup	src/lookup.cc	/^int attack_lookup(const String& name)$/;"	f
attack_table	src/const.cc	/^const std::vector<attack_type> attack_table = {$/;"	v
attack_type	src/include/merc.hh	/^struct attack_type$/;"	s
attempt_reconnect	src/conn/GetOldPassState.cc	/^bool attempt_reconnect(Descriptor *d, const String& name)$/;"	f	namespace:conn
attr_base	src/include/Character.hh	/^    int                 attr_base[MAX_ATTR] = {0};$/;"	m	class:Character
attr_location_check	src/affect/affect.cc	/^int attr_location_check(int location) {$/;"	f	namespace:affect
attribute_check	src/attribute.cc	/^void attribute_check(Character *ch) {$/;"	f
auction	src/Auction.cc	/^Auction auction;$/;"	v
aura	src/include/Player.hh	/^    String              aura;$/;"	m	class:Player
author	src/include/Area.hh	/^    String              author;     \/* -- Elrac *\/$/;"	m	class:Area
axe	src/include/skill/Type.hh	/^    axe,$/;"	m	class:skill::type
backstab	src/include/skill/Type.hh	/^    backstab,$/;"	m	class:skill::type
backup	src/edit.cc	/^static void backup(void)$/;"	f	file:
backup	src/include/Player.hh	/^	int                 backup = 0;$/;"	m	class:Player
backup_char_obj	src/save.cc	/^void backup_char_obj(Character *ch)$/;"	f
bamfin	src/include/Player.hh	/^	String              bamfin;$/;"	m	class:Player
bamfout	src/include/Player.hh	/^	String              bamfout;$/;"	m	class:Player
bard	src/include/Guild.hh	/^	bard,$/;"	e	enum:Guild
bard_poses	src/act_comm.cc	/^std::vector<new_pose_struct> bard_poses           = {$/;"	v
barrier	src/include/affect/Type.hh	/^    barrier,$/;"	m	class:affect::type
barrier	src/include/skill/Type.hh	/^    barrier,$/;"	m	class:skill::type
base_age	src/include/merc.hh	/^	int	    base_age;		\/* the base age for the race *\/$/;"	m	struct:pc_race_type
base_group	src/include/merc.hh	/^	String      base_group;             \/* base skills gained           *\/$/;"	m	struct:guild_type
base_name_table	src/loot_tables.cc	/^const std::multimap<int, String> base_name_table = {$/;"	v
bash	src/include/skill/Type.hh	/^    bash,$/;"	m	class:skill::type
battle	src/Battle.cc	/^Battle battle;$/;"	v
beats	src/include/skill/skill.hh	/^	int      beats;                  \/* Waiting time after use       *\/$/;"	m	struct:skill::skill_table_t
begin	src/include/GarbageCollectingList.hh	/^    iterator begin() {$/;"	f	class:GarbageCollectingList
berserk	src/include/affect/Type.hh	/^    berserk,$/;"	m	class:affect::type
berserk	src/include/skill/Type.hh	/^    berserk,$/;"	m	class:skill::type
bet	src/include/Auction.hh	/^    int         bet = 0;    \/* last bet - or 0 if noone has bet anything *\/$/;"	m	class:Auction
bit	src/include/tables.hh	/^	Flags::Bit bit;$/;"	m	struct:chan_type
bit	src/include/tables.hh	/^	Flags::Bit bit;$/;"	m	struct:revoke_type
bit	src/include/tables.hh	/^    Flags::Bit bit;$/;"	m	struct:flag_type
bit_to_type	src/affect/affect.cc	/^::affect::type bit_to_type(Flags::Bit bit) {$/;"	f	namespace:affect
bits	src/include/Flags.hh	/^	std::bitset<FLAGS_NBITS> bits = {0};$/;"	m	class:Flags
bitvector	src/include/affect/Affect.hh	/^    const Flags bitvector() const { return Flags(_bitvector); }$/;"	f	class:affect::Affect
bitvector	src/include/affect/Affect.hh	/^    void bitvector(const Flags& f) { _bitvector = f.to_ulong(); }$/;"	f	class:affect::Affect
bless	src/include/affect/Type.hh	/^    bless,$/;"	m	class:affect::type
bless	src/include/skill/Type.hh	/^    bless,$/;"	m	class:skill::type
blind_fight	src/include/skill/Type.hh	/^    blind_fight,$/;"	m	class:skill::type
blindness	src/include/affect/Type.hh	/^    blindness,$/;"	m	class:affect::type
blindness	src/include/skill/Type.hh	/^    blindness,$/;"	m	class:skill::type
blizzard	src/include/skill/Type.hh	/^    blizzard,$/;"	m	class:skill::type
blood_blade	src/include/skill/Type.hh	/^    blood_blade,$/;"	m	class:skill::type
blood_moon	src/include/affect/Type.hh	/^    blood_moon,$/;"	m	class:affect::type
blood_moon	src/include/skill/Type.hh	/^    blood_moon,$/;"	m	class:skill::type
blue	src/include/util/Image.hh	/^	enum Channel { red = 0, green, blue, alpha };$/;"	e	enum:util::Image::Channel
blue	src/include/worldmap/MapColor.hh	/^	unsigned int red, green, blue;$/;"	m	class:worldmap::MapColor
blur	src/include/skill/Type.hh	/^    blur,$/;"	m	class:skill::type
board_hdr	src/include/Note.hh	/^    const String board_hdr;$/;"	m	struct:board_index_struct
board_index	src/Note.cc	/^const std::vector<board_index_struct> board_index = {$/;"	v
board_index_struct	src/include/Note.hh	/^struct board_index_struct$/;"	s
board_list	src/include/Note.hh	/^    Note **board_list;$/;"	m	struct:board_index_struct
board_long	src/include/Note.hh	/^    const String board_long;$/;"	m	struct:board_index_struct
board_plural	src/include/Note.hh	/^    const String board_plural;$/;"	m	struct:board_index_struct
board_short	src/include/Note.hh	/^    const String board_short;$/;"	m	struct:board_index_struct
bold	src/include/Player.hh	/^	int              bold           [MAX_COLORS] = {0};$/;"	m	class:Player
bold	src/include/tables.hh	/^	int bold;$/;"	m	struct:color_type
bold	src/include/tables.hh	/^	int bold;$/;"	m	struct:csetting_type
bone_wall	src/include/affect/Type.hh	/^    bone_wall,$/;"	m	class:affect::type
bone_wall	src/include/skill/Type.hh	/^    bone_wall,$/;"	m	class:skill::type
boot	src/Game.cc	/^boot() {$/;"	f	class:Game
booting	src/Game.cc	/^bool Game::booting = false;$/;"	m	class:Game	file:
booting	src/include/Game.hh	/^    static bool booting;$/;"	m	class:Game
breakConnect	src/conn/State.cc	/^BreakConnectState State::breakConnect;$/;"	m	class:conn::State	file:
breakConnect	src/include/conn/State.hh	/^	static BreakConnectState breakConnect;$/;"	m	struct:conn::State
brew	src/include/skill/Type.hh	/^    brew,$/;"	m	class:skill::type
bstr	src/include/War.hh	/^        String  bstr;$/;"	m	class:War::Event
buf	src/include/MobProgActList.hh	/^    String           buf;$/;"	m	class:MobProgActList
buffer	src/deps/cJSON/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon2	file:
buffer	src/include/Player.hh	/^	String              buffer;$/;"	m	class:Player
bug	src/Logging.cc	/^bug(const String& str, int param)$/;"	f	class:Logging
bugf	src/include/Logging.hh	/^void bugf(const String& fmt, Params... params)$/;"	f	namespace:Logging
burning_hands	src/include/skill/Type.hh	/^    burning_hands,$/;"	m	class:skill::type
bust_a_prompt	src/comm.cc	/^void bust_a_prompt(Character *ch)$/;"	f
buy_type	src/include/Shop.hh	/^    int      buy_type [MAX_TRADE] = {0};   \/* Item types shop will buy     *\/$/;"	m	class:Shop
buyer	src/include/Auction.hh	/^    Character * buyer = nullptr;  \/* a pointer to the buyer - which may NOT quit *\/$/;"	m	class:Auction
by_who	src/include/StoredPlayer.hh	/^    String by_who;$/;"	m	class:StoredPlayer
c	src/random.cc	/^	float c;$/;"	m	struct:prd_table_entry	file:
cJSON	src/deps/cJSON/cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	src/deps/cJSON/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddBoolToObject	src/deps/cJSON/cJSON.h	/^#define cJSON_AddBoolToObject(/;"	d
cJSON_AddFalseToObject	src/deps/cJSON/cJSON.h	/^#define cJSON_AddFalseToObject(/;"	d
cJSON_AddItemReferenceToArray	src/deps/cJSON/cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f
cJSON_AddItemReferenceToObject	src/deps/cJSON/cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f
cJSON_AddItemToArray	src/deps/cJSON/cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f
cJSON_AddItemToObject	src/deps/cJSON/cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f
cJSON_AddItemToObjectCS	src/deps/cJSON/cJSON.c	/^void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (!(item->type&cJSON_StringIsConst) && item->string) cJSON_free(item->string);item->string=(char*)string;item->type|=cJSON_StringIsConst;cJSON_AddItemToArray(object,item);}$/;"	f
cJSON_AddNullToObject	src/deps/cJSON/cJSON.h	/^#define cJSON_AddNullToObject(/;"	d
cJSON_AddNumberToObject	src/deps/cJSON/cJSON.h	/^#define cJSON_AddNumberToObject(/;"	d
cJSON_AddStringToObject	src/deps/cJSON/cJSON.h	/^#define cJSON_AddStringToObject(/;"	d
cJSON_AddTrueToObject	src/deps/cJSON/cJSON.h	/^#define cJSON_AddTrueToObject(/;"	d
cJSON_Array	src/deps/cJSON/cJSON.h	/^#define cJSON_Array /;"	d
cJSON_ArrayForEach	src/deps/cJSON/cJSON.h	/^#define cJSON_ArrayForEach(/;"	d
cJSON_CreateArray	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f
cJSON_CreateBool	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f
cJSON_CreateDoubleArray	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!n){cJSON_Delete(a);return 0;}if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateFalse	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f
cJSON_CreateFloatArray	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!n){cJSON_Delete(a);return 0;}if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateIntArray	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!n){cJSON_Delete(a);return 0;}if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateNull	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f
cJSON_CreateNumber	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f
cJSON_CreateObject	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f
cJSON_CreateString	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);if(!item->valuestring){cJSON_Delete(item);return 0;}}return item;}$/;"	f
cJSON_CreateStringArray	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!n){cJSON_Delete(a);return 0;}if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateTrue	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f
cJSON_Delete	src/deps/cJSON/cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f
cJSON_DeleteItemFromArray	src/deps/cJSON/cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f
cJSON_DeleteItemFromObject	src/deps/cJSON/cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f
cJSON_DetachItemFromArray	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f
cJSON_DetachItemFromObject	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f
cJSON_Duplicate	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f
cJSON_False	src/deps/cJSON/cJSON.h	/^#define cJSON_False /;"	d
cJSON_GetArrayItem	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array?array->child:0;while (c && item>0) item--,c=c->next; return c;}$/;"	f
cJSON_GetArraySize	src/deps/cJSON/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f
cJSON_GetErrorPtr	src/deps/cJSON/cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return global_ep;}$/;"	f
cJSON_GetObjectItem	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object?object->child:0;while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f
cJSON_HasObjectItem	src/deps/cJSON/cJSON.c	/^int cJSON_HasObjectItem(cJSON *object,const char *string)		{return cJSON_GetObjectItem(object,string)?1:0;}$/;"	f
cJSON_Hooks	src/deps/cJSON/cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	src/deps/cJSON/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	src/deps/cJSON/cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_InsertItemInArray	src/deps/cJSON/cJSON.c	/^void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}$/;"	f
cJSON_IsReference	src/deps/cJSON/cJSON.h	/^#define cJSON_IsReference /;"	d
cJSON_Minify	src/deps/cJSON/cJSON.c	/^void cJSON_Minify(char *json)$/;"	f
cJSON_NULL	src/deps/cJSON/cJSON.h	/^#define cJSON_NULL /;"	d
cJSON_New_Item	src/deps/cJSON/cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:
cJSON_Number	src/deps/cJSON/cJSON.h	/^#define cJSON_Number /;"	d
cJSON_Object	src/deps/cJSON/cJSON.h	/^#define cJSON_Object /;"	d
cJSON_Parse	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f
cJSON_ParseWithOpts	src/deps/cJSON/cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f
cJSON_Print	src/deps/cJSON/cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}$/;"	f
cJSON_PrintBuffered	src/deps/cJSON/cJSON.c	/^char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt)$/;"	f
cJSON_PrintUnformatted	src/deps/cJSON/cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}$/;"	f
cJSON_ReplaceItemInArray	src/deps/cJSON/cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f
cJSON_ReplaceItemInObject	src/deps/cJSON/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f
cJSON_SetIntValue	src/deps/cJSON/cJSON.h	/^#define cJSON_SetIntValue(/;"	d
cJSON_SetNumberValue	src/deps/cJSON/cJSON.h	/^#define cJSON_SetNumberValue(/;"	d
cJSON_String	src/deps/cJSON/cJSON.h	/^#define cJSON_String /;"	d
cJSON_StringIsConst	src/deps/cJSON/cJSON.h	/^#define cJSON_StringIsConst /;"	d
cJSON_True	src/deps/cJSON/cJSON.h	/^#define cJSON_True /;"	d
cJSON__h	src/deps/cJSON/cJSON.h	/^#define cJSON__h$/;"	d
cJSON_free	src/deps/cJSON/cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_malloc	src/deps/cJSON/cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_strcasecmp	src/deps/cJSON/cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:
cJSON_strdup	src/deps/cJSON/cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:
cache_size	src/affect/affect_cache_array.cc	/^#define cache_size /;"	d	file:
cached_extra_flags	src/include/Object.hh	/^    Flags           cached_extra_flags;$/;"	m	class:Object
cached_room_flags	src/include/Room.hh	/^    Flags           cached_room_flags = 0;$/;"	m	class:Room
calc_cp	src/clan-edit.cc	/^int calc_cp(Clan *clan, bool curve)$/;"	f
call_lightning	src/include/skill/Type.hh	/^    call_lightning,$/;"	m	class:skill::type
calm	src/include/affect/Type.hh	/^    calm,$/;"	m	class:affect::type
calm	src/include/skill/Type.hh	/^    calm,$/;"	m	class:skill::type
can_cancel	src/dispel.cc	/^	bool can_cancel; \/\/ can cancel on self$/;"	m	struct:dispel_type	file:
can_carry_n	src/handler.cc	/^int can_carry_n(Character *ch)$/;"	f
can_carry_w	src/handler.cc	/^int can_carry_w(Character *ch)$/;"	f
can_dispel	src/dispel.cc	/^	bool can_dispel; \/\/ can dispel on others with "dispel magic"$/;"	m	struct:dispel_type	file:
can_drop_obj	src/handler.cc	/^bool can_drop_obj(Character *ch, Object *obj)$/;"	f
can_evolve	src/skills.cc	/^int can_evolve(Character *ch, skill::type type)$/;"	f
can_loot	src/act_obj.cc	/^bool can_loot(Character *ch, Object *obj)$/;"	f
can_see_char	src/handler.cc	/^bool can_see_char(const Character *ch, const Character *victim)$/;"	f
can_see_in_room	src/handler.cc	/^bool can_see_in_room(const Character *ch, const Room *room)$/;"	f
can_see_obj	src/handler.cc	/^bool can_see_obj(const Character *ch, const Object *obj)$/;"	f
can_see_room	src/handler.cc	/^bool can_see_room(const Character *ch, const Room *room)$/;"	f
can_see_who	src/handler.cc	/^bool can_see_who(const Character *ch, const Character *victim)$/;"	f
can_undo	src/dispel.cc	/^	bool can_undo;$/;"	m	struct:dispel_type	file:
cancellation	src/include/skill/Type.hh	/^    cancellation,$/;"	m	class:skill::type
cand	src/include/tables.hh	/^	int				cand;$/;"	m	struct:field_type
capacity	src/include/worldmap/Quadtree.hh	/^	unsigned int capacity = 0;$/;"	m	class:worldmap::Quadtree
capitalize	src/String.cc	/^capitalize() const {$/;"	f	class:String
carried_by	src/include/Object.hh	/^	Character *		carried_by = nullptr;$/;"	m	class:Object
carry	src/include/merc.hh	/^	int      carry;$/;"	m	struct:str_app_type
carrying	src/include/Character.hh	/^    Object *            carrying = nullptr;$/;"	m	class:Character
case_insensitive_equal	src/String.cc	/^struct case_insensitive_equal {$/;"	s	file:
cause_critical	src/include/skill/Type.hh	/^    cause_critical,$/;"	m	class:skill::type
cause_light	src/include/skill/Type.hh	/^    cause_light,$/;"	m	class:skill::type
cause_serious	src/include/skill/Type.hh	/^    cause_serious,$/;"	m	class:skill::type
censor_bit_name	src/typename.cc	/^const String censor_bit_name(const Flags& flags) {$/;"	f
censor_flags	src/include/Character.hh	/^    Flags               censor_flags;			\/* New censor flags -- Montrey *\/$/;"	m	class:Character
censor_flags	src/tables.cc	/^const std::vector<flag_type> censor_flags = {$/;"	v
center	src/String.cc	/^center(std::size_t total_len) const {$/;"	f	class:String
cgroup	src/scripts/fix_pcindex.py	/^  cgroup = mudstr.parse_flags(player['cgroup'])$/;"	v
cgroup_bit_name	src/typename.cc	/^const String cgroup_bit_name(const Flags& flags) {$/;"	f
cgroup_flags	src/include/Player.hh	/^	Flags               cgroup_flags;$/;"	m	class:Player
cgroup_flags	src/tables.cc	/^const std::vector<flag_type> cgroup_flags = {$/;"	v
ch	src/include/MobProgActList.hh	/^    Character *      ch = nullptr;$/;"	m	class:MobProgActList
ch	src/include/Player.hh	/^	Character &	        ch;	\/* i may be missing something, but this seems like a 'duh',$/;"	m	class:Player
chain_lightning	src/include/skill/Type.hh	/^    chain_lightning,$/;"	m	class:skill::type
chain_spell	src/magic.cc	/^void chain_spell(Character *ch, void *vo, skill::type sn, int type, int level)$/;"	f
chal	src/include/War.hh	/^    War::Opponent *  chal[4] = {nullptr};$/;"	m	class:War
challenger	src/include/Duel.hh	/^    Character * challenger = nullptr;$/;"	m	class:Duel
chalprep	src/include/Duel.hh	/^        Room *chalprep = nullptr;$/;"	m	class:Duel::Arena
chan_table	src/tables.cc	/^const std::vector<chan_type> chan_table = {$/;"	v
chan_type	src/include/tables.hh	/^struct chan_type$/;"	s
chance	src/include/macros.hh	/^#define chance(/;"	d
chance	src/include/merc.hh	/^	int      chance;$/;"	m	struct:chr_app_type
chance	src/include/tables.hh	/^    int chance;$/;"	m	struct:raffects
chance	src/lootv2.cc	/^	int chance;$/;"	m	struct:eq_meta_t	file:
chance	src/lootv2.cc	/^	int chance;$/;"	m	struct:eq_quality_t	file:
change	src/include/Weather.hh	/^    int         change = 0;$/;"	m	class:Weather
change_sex	src/include/affect/Type.hh	/^    change_sex,$/;"	m	class:affect::type
change_sex	src/include/skill/Type.hh	/^    change_sex,$/;"	m	class:skill::type
changes_list	src/Note.cc	/^Note *changes_list;$/;"	v
channel	src/channels.cc	/^void channel(Character *ch, const String& argument, int channel)$/;"	f
channel	src/include/affect/Type.hh	/^    channel,$/;"	m	class:affect::type
channel	src/include/skill/Type.hh	/^    channel,$/;"	m	class:skill::type
channel_songs	src/music.cc	/^int channel_songs[MAX_GLOBAL + 1];$/;"	v
channel_who	src/channels.cc	/^void channel_who(Character *ch, const String& channelname, const Flags::Bit& channel, int custom)$/;"	f
char_at_war	src/War.cc	/^bool char_at_war(Character *ch)$/;"	f
char_auto	src/include/Social.hh	/^    String      char_auto;$/;"	m	class:Social
char_found	src/include/Social.hh	/^    String    char_found;$/;"	m	class:Social
char_from_room	src/handler.cc	/^void char_from_room(Character *ch)$/;"	f
char_in_darena	src/duel.cc	/^bool char_in_darena(Character *ch)$/;"	f
char_in_darena_room	src/duel.cc	/^bool char_in_darena_room(Character *ch)$/;"	f
char_in_duel	src/duel.cc	/^bool char_in_duel(Character *ch)$/;"	f
char_in_duel_room	src/duel.cc	/^bool char_in_duel_room(Character *ch)$/;"	f
char_list	src/include/World.hh	/^	GarbageCollectingList<Character *> char_list; \/\/ owned here$/;"	m	class:World
char_no_arg	src/include/Social.hh	/^    String    char_no_arg;$/;"	m	class:Social
char_opponents	src/War.cc	/^bool char_opponents(Character *charA, Character *charB)$/;"	f
char_to_room	src/handler.cc	/^void char_to_room(Character *ch, Room *room)$/;"	f
char_update	src/update.cc	/^void char_update(void)$/;"	f
character	src/include/Descriptor.hh	/^    Character *         character = nullptr;$/;"	m	class:Descriptor
character_give_obj	src/include/event/event.hh	/^	character_give_obj,$/;"	e	enum:event::Type
character_kill_other	src/include/event/event.hh	/^	character_kill_other,$/;"	e	enum:event::Type
character_to_room	src/include/event/event.hh	/^	character_to_room,$/;"	e	enum:event::Type
charm_person	src/include/affect/Type.hh	/^    charm_person,$/;"	m	class:affect::type
charm_person	src/include/skill/Type.hh	/^    charm_person,$/;"	m	class:skill::type
check_all_cond	src/fight.cc	/^void check_all_cond(Character *ch)$/;"	f
check_assist	src/fight.cc	/^void check_assist(Character *ch, Character *victim)$/;"	f
check_attack_ok	src/fight.cc	/^bool check_attack_ok(Character *ch, Character *victim) {$/;"	f
check_ban	src/conn/GetNameState.cc	/^bool check_ban(const String& site, int type)$/;"	f	namespace:conn
check_blind	src/act_info.cc	/^bool check_blind(Character *ch)$/;"	f
check_blur	src/fight.cc	/^bool check_blur(Character *ch, Character *victim, skill::type attack_skill, int attack_type)$/;"	f
check_channel_social	src/channels.cc	/^bool check_channel_social(Character *ch, Flags::Bit channel, int custom, const String& command, const String& argument)$/;"	f
check_cond	src/fight.cc	/^void check_cond(Character *ch, Object *obj)$/;"	f
check_deny	src/conn/GetNameState.cc	/^bool check_deny(const String& name)$/;"	f	namespace:conn
check_disabled	src/Disabled.cc	/^bool check_disabled(const struct cmd_type *command)$/;"	f
check_dispel_char	src/dispel.cc	/^bool check_dispel_char(int dis_level, Character *victim, affect::type type, bool save)$/;"	f
check_dispel_obj	src/dispel.cc	/^bool check_dispel_obj(int dis_level, Object *obj, affect::type type, bool save)$/;"	f
check_dodge	src/fight.cc	/^bool check_dodge(Character *ch, Character *victim, skill::type attack_skill, int attack_type)$/;"	f
check_dual_parry	src/fight.cc	/^bool check_dual_parry(Character *ch, Character *victim, skill::type attack_skill, int attack_type)$/;"	f
check_improve	src/skills.cc	/^void check_improve(Character *ch, skill::type type, bool success, int multiplier)$/;"	f
check_killer	src/fight.cc	/^void check_killer(Character *ch, Character *victim)$/;"	f
check_line	src/edit.cc	/^static bool check_line(Character *ch, int line)$/;"	f	file:
check_parry	src/fight.cc	/^bool check_parry(Character *ch, Character *victim, skill::type attack_skill, int attack_type)$/;"	f
check_parse_name	src/save.cc	/^bool check_parse_name(const String& name)$/;"	f
check_player_exist	src/conn/GetNameState.cc	/^bool check_player_exist(Descriptor *d, const String& name)$/;"	f	namespace:conn
check_playing	src/conn/GetOldPassState.cc	/^bool check_playing(Descriptor *d, const String& name)$/;"	f	namespace:conn
check_protection_aura	src/fight.cc	/^void check_protection_aura(Character *ch, Character *victim) {$/;"	f
check_pulse	src/fight.cc	/^bool check_pulse(Character *victim)$/;"	f
check_range	src/edit.cc	/^static bool check_range(Character *ch, int *fromline, int *toline)$/;"	f	file:
check_reconnect	src/conn/GetNameState.cc	/^bool check_reconnect(Descriptor *d, const String& name)$/;"	f	namespace:conn
check_shblock	src/fight.cc	/^bool check_shblock(Character *ch, Character *victim, skill::type attack_skill, int attack_type)$/;"	f
check_social	src/interp.cc	/^bool check_social(Character *ch, const String& command, const String& argument)$/;"	f
checkexits	src/wiz_build.cc	/^String checkexits(Room *room, const Area *pArea) {$/;"	f
checkexitstoroom	src/wiz_build.cc	/^String checkexitstoroom(Room *room, Room *dest)$/;"	f
checksum	src/affect/affect.cc	/^unsigned long checksum(const Affect *paf) {$/;"	f	namespace:affect
checksum_list	src/affect/affect_list.cc	/^unsigned long checksum_list(Affect **list_head) {$/;"	f	namespace:affect
child	src/deps/cJSON/cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
children	src/include/worldmap/Quadtree.hh	/^	Quadtree *children[4] = {nullptr}; \/\/ NW NE SE SW$/;"	m	class:worldmap::Quadtree
chill_touch	src/include/affect/Type.hh	/^    chill_touch,$/;"	m	class:affect::type
chill_touch	src/include/skill/Type.hh	/^    chill_touch,$/;"	m	class:skill::type
chr_app	src/const.cc	/^const struct chr_app_type chr_app[26] = {$/;"	v	typeref:struct:chr_app_type
chr_app_type	src/include/merc.hh	/^struct  chr_app_type$/;"	s
circle	src/include/skill/Type.hh	/^    circle,$/;"	m	class:skill::type
city	src/include/Sector.hh	/^	city = 1,$/;"	m	class:Sector
clan	src/Room.cc	/^const Clan *Room::clan() const { return prototype.clan; }$/;"	f	class:Room
clan	src/include/Character.hh	/^    Clan *         clan = nullptr;$/;"	m	class:Character
clan	src/include/RoomPrototype.hh	/^	Clan *		clan = nullptr;$/;"	m	class:RoomPrototype
clan_at_war	src/War.cc	/^bool clan_at_war(Clan *clan)$/;"	f
clan_eq_ok	src/act_obj.cc	/^bool clan_eq_ok(Character *ch, Object *obj, const String& action)$/;"	f
clan_in_war	src/War.cc	/^bool clan_in_war(Clan *clan, War *war, bool onlycurrent)$/;"	f
clan_is_challenger	src/War.cc	/^bool clan_is_challenger(Clan *clan, War *war)$/;"	f
clan_lookup	src/lookup.cc	/^Clan *clan_lookup(const String& name)$/;"	f
clan_opponents	src/War.cc	/^bool clan_opponents(Clan *clanA, Clan *clanB)$/;"	f
clan_table_head	src/clan-edit.cc	/^Clan *clan_table_head;$/;"	v
clan_table_tail	src/clan-edit.cc	/^Clan *clan_table_tail;$/;"	v
clan_vnum_lookup	src/lookup.cc	/^Clan *clan_vnum_lookup(const Vnum& vnum)$/;"	f
clanarena	src/include/Sector.hh	/^	clanarena = 21,$/;"	m	class:Sector
clanname	src/include/Clan.hh	/^    String  clanname;$/;"	m	class:Clan
clanname	src/include/War.hh	/^        String  clanname;$/;"	m	class:War::Opponent
clanqp	src/include/Clan.hh	/^    long        clanqp = 0;$/;"	m	class:Clan
clean_timer	src/include/Object.hh	/^	int			clean_timer = 0;		\/* Montrey *\/$/;"	m	class:Object
clear	src/include/Flags.hh	/^	void clear() { bits.reset(); }$/;"	f	class:Flags
clear_arena	src/duel.cc	/^void clear_arena(Duel::Arena *arena)$/;"	f
clear_list	src/affect/affect_list.cc	/^void clear_list(Affect **list_head) {$/;"	f	namespace:affect
clear_window	src/comm.cc	/^void clear_window(Character *ch) {$/;"	f
cleric	src/include/Guild.hh	/^	cleric,$/;"	e	enum:Guild
cleric_poses	src/act_comm.cc	/^std::vector<new_pose_struct> cleric_poses           = {$/;"	v
clone_mobile	src/area_handler.cc	/^void clone_mobile(Character *parent, Character *clone)$/;"	f
clone_object	src/area_handler.cc	/^void clone_object(Object *parent, Object *clone)$/;"	f
close_hour	src/include/Shop.hh	/^    int      close_hour = 0;             \/* First closing hour           *\/$/;"	m	class:Shop
close_socket	src/comm.cc	/^void close_socket(Descriptor *dclose)$/;"	f
closed	src/conn/State.cc	/^ClosedState State::closed;$/;"	m	class:conn::State	file:
closed	src/include/conn/State.hh	/^	static ClosedState  closed;$/;"	m	struct:conn::State
cmd_table	src/interp.cc	/^const std::vector<cmd_type> cmd_table = {$/;"	v
cmd_type	src/include/interp.hh	/^struct  cmd_type$/;"	s
code	src/include/tables.hh	/^	String code;$/;"	m	struct:color_type
cold_effect	src/effects.cc	/^void cold_effect(void *vo, int level, int dam, int target, int evolution)$/;"	f
color	src/include/Player.hh	/^	int              color          [MAX_COLORS] = {0};$/;"	m	class:Player
color	src/include/merc.hh	/^	String      color;$/;"	m	struct:liq_type
color	src/include/tables.hh	/^	int color;$/;"	m	struct:color_type
color	src/include/tables.hh	/^	int color;$/;"	m	struct:csetting_type
color_code	src/include/gem/gem.hh	/^    char		color_code;$/;"	m	struct:gem::type_st
color_sector_map	src/worldmap/Worldmap.cc	/^const std::map<MapColor, Sector> color_sector_map = {$/;"	m	namespace:worldmap	file:
color_table	src/tables.cc	/^const std::vector<color_type> color_table = {$/;"	v
color_to_sector	src/worldmap/Worldmap.cc	/^color_to_sector(const MapColor& color) const {$/;"	f	class:worldmap::Worldmap
color_to_vnum	src/worldmap/Region.cc	/^const Vnum Region::color_to_vnum(const MapColor& color) const {$/;"	f	class:worldmap::Region
color_type	src/include/tables.hh	/^struct color_type$/;"	s
colour_spray	src/include/skill/Type.hh	/^    colour_spray,$/;"	m	class:skill::type
combat_regen	src/fight.cc	/^void combat_regen(Character *ch)$/;"	f
combattimer	src/include/Player.hh	/^    int              combattimer = 0;$/;"	m	class:Player
comlist	src/include/MobProg.hh	/^    String      comlist;$/;"	m	class:MobProg
comm_bit_name	src/typename.cc	/^const String comm_bit_name(const Flags& flags) {$/;"	f
comm_flags	src/include/Character.hh	/^    Flags               comm_flags;   \/* RT added to pad the vector *\/$/;"	m	class:Character
comm_flags	src/tables.cc	/^const std::vector<flag_type> comm_flags = {$/;"	v
command	src/comm.cc	/^char                command[MAX_STRING_LENGTH];$/;"	v
command	src/include/Disabled.hh	/^    struct cmd_type const *command = nullptr;  \/* pointer to the command struct*\/$/;"	m	class:Disabled
command	src/include/Reset.hh	/^    char                command = 0;$/;"	m	class:Reset
comp_groupnames	src/skills.cc	/^int comp_groupnames(const void *gn1, const void *gn2)$/;"	f
comp_spells	src/skills.cc	/^int comp_spells(const void *sn1, const void *sn2)$/;"	f
comparator	src/include/affect/Affect.hh	/^typedef int (*comparator)(const Affect *lhs, const Affect *rhs);$/;"	t	namespace:affect
comparator_duration	src/affect/affect.cc	/^int comparator_duration(const Affect *lhs, const Affect *rhs) {$/;"	f	namespace:affect
comparator_mark	src/affect/affect.cc	/^int comparator_mark(const Affect *lhs, const Affect *rhs) {$/;"	f	namespace:affect
comparator_permanent	src/affect/affect.cc	/^int comparator_permanent(const Affect *lhs, const Affect *rhs) {$/;"	f	namespace:affect
comparator_type	src/affect/affect.cc	/^int comparator_type(const Affect *lhs, const Affect *rhs) {$/;"	f	namespace:affect
compare_clans	src/act_info.cc	/^int compare_clans(const void *p1, const void *p2)$/;"	f
compile_effects	src/gem/gem.cc	/^void compile_effects(Object *eq) {$/;"	f	namespace:gem
completed_group	src/skills.cc	/^bool completed_group(Character *ch, int gn)$/;"	f
con_app	src/const.cc	/^const struct con_app_type con_app [26] = {$/;"	v	typeref:struct:con_app_type
con_app_type	src/include/merc.hh	/^struct  con_app_type$/;"	s
condition	src/include/Object.hh	/^	int			condition = 0;$/;"	m	class:Object
condition	src/include/ObjectPrototype.hh	/^    int              condition = 0;$/;"	m	class:ObjectPrototype
condition	src/include/Player.hh	/^	int              condition      [4] = {0};$/;"	m	class:Player
condition_lookup	src/lookup.cc	/^String condition_lookup(int condition)$/;"	f
config_censor	src/config.cc	/^void config_censor(Character *ch, String argument)$/;"	f
config_color	src/config.cc	/^void config_color(Character *ch, String argument)$/;"	f
config_color_func	src/config.cc	/^void config_color_func(Character *ch, String argument, int type)$/;"	f
config_immortal	src/config.cc	/^void config_immortal(Character *ch, String argument)$/;"	f
config_video	src/config.cc	/^void config_video(Character *ch, String argument)$/;"	f
config_wiznet	src/config.cc	/^void config_wiznet(Character *ch, String argument)$/;"	f
confirmNewName	src/conn/State.cc	/^ConfirmNewNameState State::confirmNewName;$/;"	m	class:conn::State	file:
confirmNewName	src/include/conn/State.hh	/^	static ConfirmNewNameState confirmNewName;$/;"	m	struct:conn::State
confirmNewPass	src/conn/State.cc	/^ConfirmNewPassState State::confirmNewPass;$/;"	m	class:conn::State	file:
confirmNewPass	src/include/conn/State.hh	/^	static ConfirmNewPassState confirmNewPass;$/;"	m	struct:conn::State
confirm_delete	src/include/Player.hh	/^	int              confirm_delete = 0;$/;"	m	class:Player
conn	src/conn/BreakConnectState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/ClosedState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/ConfirmNewNameState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/ConfirmNewPassState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/CopyoverRecoverState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/GetAlignmentState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/GetDeityState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/GetGuildState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/GetMudExpState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/GetNameState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/GetNewPassState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/GetOldPassState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/GetRaceState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/GetSexState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/GetWeaponState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/PlayingState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/ReadIMOTDState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/ReadMOTDState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/ReadNewMOTDState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/RollStatsState.cc	/^namespace conn {$/;"	n	file:
conn	src/conn/State.cc	/^namespace conn {$/;"	n	file:
conn	src/include/Descriptor.hh	/^namespace conn { struct State; }$/;"	n
conn	src/include/conn/State.hh	/^namespace conn {$/;"	n
conn	src/include/declare.hh	/^namespace conn {$/;"	n
cont_bit_name	src/typename.cc	/^const String cont_bit_name(const Flags& flags) {$/;"	f
cont_flags	src/tables.cc	/^const std::vector<flag_type> cont_flags = {$/;"	v
container	src/include/GarbageCollectingList.hh	/^	std::list<T> container;$/;"	m	class:GarbageCollectingList
contains	src/include/Object.hh	/^	Object *		contains = nullptr;$/;"	m	class:Object
contents	src/include/Room.hh	/^	Object *		contents = nullptr;$/;"	m	class:Room
continual_light	src/include/skill/Type.hh	/^    continual_light,$/;"	m	class:skill::type
control	src/comm.cc	/^int                 control;$/;"	v
control_weather	src/include/skill/Type.hh	/^    control_weather,$/;"	m	class:skill::type
coord	src/include/Location.hh	/^	worldmap::Coordinate coord;$/;"	m	class:Location
copy_flags_to_char	src/affect/affect_char.cc	/^void copy_flags_to_char(Character *ch, char letter, Flags bitvector, bool permanent) {$/;"	f	namespace:affect
copy_to_char	src/affect/affect_char.cc	/^void copy_to_char(Character *ch, const Affect *aff_template)$/;"	f	namespace:affect
copy_to_list	src/affect/affect_list.cc	/^void copy_to_list(Affect **list_head, const Affect *aff_template)$/;"	f	namespace:affect
copy_to_obj	src/affect/affect_obj.cc	/^void copy_to_obj(Object *obj, const Affect *aff_template)$/;"	f	namespace:affect
copy_to_room	src/affect/affect_room.cc	/^void copy_to_room(Room *room, const Affect *aff_template)$/;"	f	namespace:affect
copyoverRecover	src/conn/State.cc	/^CopyoverRecoverState State::copyoverRecover;$/;"	m	class:conn::State	file:
copyoverRecover	src/include/conn/State.hh	/^	static CopyoverRecoverState copyoverRecover;$/;"	m	struct:conn::State
copyover_recover	src/comm.cc	/^void copyover_recover()$/;"	f
cost	src/include/Object.hh	/^	int			cost = 0;$/;"	m	class:Object
cost	src/include/ObjectPrototype.hh	/^    int                 cost = 0;$/;"	m	class:ObjectPrototype
count	src/dispel.cc	/^	int count;$/;"	m	struct:dispel_params	file:
count	src/include/MobilePrototype.hh	/^    int              count = 0;$/;"	m	class:MobilePrototype
count	src/include/ObjectPrototype.hh	/^    int              count = 0;$/;"	m	class:ObjectPrototype
count	src/include/RoomPrototype.hh	/^	int         count = 0; \/\/ number of rooms created from this prototype, incremented by Room$/;"	m	class:RoomPrototype
count_clan_members	src/clan-edit.cc	/^int count_clan_members(Clan *clan, int bit)$/;"	f
count_clans	src/clan-edit.cc	/^int count_clans()$/;"	f
count_items	src/objstate.cc	/^int count_items(const Object *obj) {$/;"	f
count_lines	src/edit.cc	/^int count_lines()$/;"	f
count_obj_list	src/handler.cc	/^int count_obj_list(ObjectPrototype *pObjIndex, Object *list)$/;"	f
count_players	src/act_info.cc	/^char *count_players(Character *ch)$/;"	f
count_socials	src/social.cc	/^int count_socials()$/;"	f
count_spool	src/Note.cc	/^int count_spool(Character *ch, Note *spool)$/;"	f
count_stored_characters	src/storage.cc	/^int count_stored_characters()$/;"	f
count_users	src/handler.cc	/^int count_users(Object *obj)$/;"	f
countdown	src/include/Player.hh	/^    int              countdown = 0;    \/* Vassago *\/$/;"	m	class:Player
create_exits	src/World.cc	/^create_exits(void)$/;"	f	class:World
create_food	src/include/skill/Type.hh	/^    create_food,$/;"	m	class:skill::type
create_mobile	src/area_handler.cc	/^Character *create_mobile(MobilePrototype *pMobIndex)$/;"	f
create_money	src/handler.cc	/^Object *create_money(int gold, int silver)$/;"	f
create_object	src/area_handler.cc	/^Object *create_object(ObjectPrototype *pObjIndex, int level)$/;"	f
create_parchment	src/include/skill/Type.hh	/^    create_parchment,$/;"	m	class:skill::type
create_reference	src/deps/cJSON/cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:
create_rooms	src/Area.cc	/^create_rooms() {$/;"	f	class:Area
create_rooms	src/World.cc	/^create_rooms() {$/;"	f	class:World
create_rooms	src/worldmap/Region.cc	/^create_rooms() const {$/;"	f	class:worldmap::Region
create_rose	src/include/skill/Type.hh	/^    create_rose,$/;"	m	class:skill::type
create_sign	src/include/skill/Type.hh	/^    create_sign,$/;"	m	class:skill::type
create_spring	src/include/skill/Type.hh	/^    create_spring,$/;"	m	class:skill::type
create_vial	src/include/skill/Type.hh	/^    create_vial,$/;"	m	class:skill::type
create_water	src/include/skill/Type.hh	/^    create_water,$/;"	m	class:skill::type
creator	src/include/Clan.hh	/^    String  creator;$/;"	m	class:Clan
credits	src/include/Area.hh	/^    String              credits;$/;"	m	class:Area
critical_blow	src/include/skill/Type.hh	/^    critical_blow,$/;"	m	class:skill::type
crush	src/include/skill/Type.hh	/^    crush,$/;"	m	class:skill::type
csetting_table	src/tables.cc	/^const std::vector<csetting_type> csetting_table = {$/;"	v
csetting_type	src/include/tables.hh	/^struct csetting_type$/;"	s
cslot	src/include/tables.hh	/^	int cslot;$/;"	m	struct:chan_type
cure_blindness	src/include/skill/Type.hh	/^    cure_blindness,$/;"	m	class:skill::type
cure_critical	src/include/skill/Type.hh	/^    cure_critical,$/;"	m	class:skill::type
cure_disease	src/include/skill/Type.hh	/^    cure_disease,$/;"	m	class:skill::type
cure_light	src/include/skill/Type.hh	/^    cure_light,$/;"	m	class:skill::type
cure_poison	src/include/skill/Type.hh	/^    cure_poison,$/;"	m	class:skill::type
cure_serious	src/include/skill/Type.hh	/^    cure_serious,$/;"	m	class:skill::type
current_time	src/Game.cc	/^time_t Game::current_time = 0;$/;"	m	class:Game	file:
current_time	src/include/Game.hh	/^    static time_t current_time;$/;"	m	class:Game
curse	src/include/affect/Type.hh	/^    curse,$/;"	m	class:affect::type
curse	src/include/skill/Type.hh	/^    curse,$/;"	m	class:skill::type
cwtb	src/comm.cc	/^void cwtb(Descriptor *d, const String& txt)$/;"	f
d_next	src/comm.cc	/^Descriptor    *d_next;             \/* Next descriptor in loop      *\/$/;"	v
dagger	src/include/skill/Type.hh	/^    dagger,$/;"	m	class:skill::type
dam_message	src/fight.cc	/^void dam_message(Character *ch, Character *victim, int dam, skill::type attack_skill, int attack_type, bool immune, bool sanc_immune)$/;"	f
dam_type	src/include/Character.hh	/^    int              dam_type = 0;$/;"	m	class:Character
dam_type	src/include/MobilePrototype.hh	/^    int              dam_type = 0;$/;"	m	class:MobilePrototype
dam_type_name	src/typename.cc	/^String dam_type_name(int type)$/;"	f
damage	src/fight.cc	/^bool damage(Character *ch, Character *victim, int dam, skill::type attack_skill, int attack_type, int dam_type, bool show, bool spell)$/;"	f
damage	src/include/Character.hh	/^    int              damage[3] = {0};$/;"	m	class:Character
damage	src/include/MobilePrototype.hh	/^    int              damage[3] = {0};$/;"	m	class:MobilePrototype
damage	src/include/merc.hh	/^	int         damage;                 \/* damage class *\/$/;"	m	struct:attack_type
darkness	src/include/affect/Type.hh	/^    darkness,$/;"	m	class:affect::type
darkness	src/include/skill/Type.hh	/^    darkness,$/;"	m	class:skill::type
data	src/include/affect/Affect.hh	/^	void *data;$/;"	m	struct:affect::fn_params
data	src/include/worldmap/Quadtree.hh	/^	T *data = nullptr;$/;"	m	class:worldmap::Quadtree
date	src/include/Note.hh	/^    String      date;$/;"	m	class:Note
date	src/include/StoredPlayer.hh	/^    String date;$/;"	m	class:StoredPlayer
date_stamp	src/include/Note.hh	/^    time_t      date_stamp = 0;$/;"	m	class:Note
day	src/include/GameTime.hh	/^    int         day = 0;$/;"	m	class:GameTime
day_name	src/GameTime.cc	/^day_name() const {$/;"	f	class:GameTime
day_names	src/file.cc	/^static const String day_names[] =$/;"	v	file:
day_string	src/GameTime.cc	/^day_string() const {$/;"	f	class:GameTime
daze	src/include/Character.hh	/^    int              daze = 0;$/;"	m	class:Character
dazzle	src/include/affect/Type.hh	/^    dazzle,$/;"	m	class:affect::type
dazzle	src/include/skill/Type.hh	/^    dazzle,$/;"	m	class:skill::type
dazzling_light	src/include/affect/Type.hh	/^    dazzling_light,$/;"	m	class:affect::type
dazzling_light	src/include/skill/Type.hh	/^    dazzling_light,$/;"	m	class:skill::type
db_close	src/sqlite.cc	/^void db_close()$/;"	f
db_command	src/sqlite.cc	/^int db_command(const String& func, const String& query)$/;"	f
db_commandf	src/include/sql.hh	/^int			db_commandf			(const String& func, const String& query, Params... params) {$/;"	f
db_count	src/sqlite.cc	/^int db_count(const String& func, const String& query)$/;"	f
db_countf	src/include/sql.hh	/^int			db_countf			(const String& func, const String& query, Params... params) {$/;"	f
db_error	src/sqlite.cc	/^void db_error(const String& func, const String& query)$/;"	f
db_esc	src/sqlite.cc	/^String db_esc(const String& str)$/;"	f
db_get_column_flags	src/sqlite.cc	/^const Flags db_get_column_flags(int index) {$/;"	f
db_get_column_int	src/sqlite.cc	/^int db_get_column_int(int index) {$/;"	f
db_get_column_str	src/sqlite.cc	/^const char * db_get_column_str(int index) {$/;"	f
db_next_row	src/sqlite.cc	/^int db_next_row() {$/;"	f
db_open	src/sqlite.cc	/^void db_open()$/;"	f
db_query	src/sqlite.cc	/^int db_query(const String& func, const String& query)$/;"	f
db_queryf	src/include/sql.hh	/^int			db_queryf			(const String& func, const String& query, Params... params) {$/;"	f
db_rows_affected	src/sqlite.cc	/^int db_rows_affected() {$/;"	f
death_cry	src/fight.cc	/^void death_cry(Character *ch)$/;"	f
debug_json	src/save.cc	/^bool debug_json = false;$/;"	v
deduct_cost	src/handler.cc	/^bool deduct_cost(Character *ch, int cost)$/;"	f
deduct_stamina	src/skills.cc	/^bool deduct_stamina(Character *ch, skill::type type)$/;"	f
dedup_in_list	src/affect/affect_list.cc	/^void dedup_in_list(Affect **list_head, Affect *paf, fn_params *params)$/;"	f	namespace:affect
def	src/include/War.hh	/^    War::Opponent *  def[4] = {nullptr};$/;"	m	class:War
default_group	src/include/merc.hh	/^	String      default_group;          \/* default skills gained        *\/$/;"	m	struct:guild_type
default_pos	src/include/Character.hh	/^    int              default_pos = 0;$/;"	m	class:Character
default_pos	src/include/MobilePrototype.hh	/^    int              default_pos = 0;$/;"	m	class:MobilePrototype
defeat_clan	src/War.cc	/^void defeat_clan(War *war, Character *ch, Character *victim)$/;"	f
defender	src/include/Duel.hh	/^    Character * defender = nullptr;$/;"	m	class:Duel
defense_heal	src/fight.cc	/^bool defense_heal(Character *victim, int chance, int percent)$/;"	f
defense_mod	src/include/Character.hh	/^    int *            defense_mod = nullptr;$/;"	m	class:Character
defensive	src/include/merc.hh	/^	int      defensive;$/;"	m	struct:dex_app_type
defprep	src/include/Duel.hh	/^        Room *defprep = nullptr;$/;"	m	class:Duel::Arena
deity	src/include/Player.hh	/^    String              deity;$/;"	m	class:Player
deity_lookup	src/handler.cc	/^int deity_lookup(const String& name)$/;"	f
deity_table	src/const.cc	/^const std::vector<deity_type> deity_table = {$/;"	v
deity_type	src/include/merc.hh	/^struct deity_type$/;"	s
delete_garbage	src/include/GarbageCollectingList.hh	/^    void delete_garbage() {$/;"	f	class:GarbageCollectingList
demonfire	src/include/skill/Type.hh	/^    demonfire,$/;"	m	class:skill::type
demote_level	src/update.cc	/^void demote_level(Character *ch)$/;"	f
departed_list_head	src/departed.cc	/^DepartedPlayer *departed_list_head;$/;"	v
departed_list_line	src/departed.cc	/^char *departed_list_line = "            {c|  {g\\\\{WV{g\/  {c|      {k.{W";$/;"	v
departed_list_tail	src/departed.cc	/^DepartedPlayer *departed_list_tail;$/;"	v
desc	src/include/Character.hh	/^    Descriptor *        desc = nullptr;$/;"	m	class:Character
desc	src/include/Duel.hh	/^        String  desc;$/;"	m	class:Duel::Arena
desc	src/include/merc.hh	/^	String      desc;$/;"	m	struct:wiznet_type
describe	src/Weather.cc	/^describe() const {$/;"	f	class:Weather
descrip_update	src/update.cc	/^void descrip_update(void)$/;"	f
description	src/Exit.cc	/^description() const {$/;"	f	class:Exit
description	src/Room.cc	/^const String& Room::description() const { return prototype.description; }$/;"	f	class:Room
description	src/include/Character.hh	/^    String              description;$/;"	m	class:Character
description	src/include/ExitPrototype.hh	/^    String              description;$/;"	m	class:ExitPrototype
description	src/include/ExtraDescr.hh	/^    String description;          \/* What to see                      *\/$/;"	m	class:ExtraDescr
description	src/include/MobilePrototype.hh	/^    String              description;$/;"	m	class:MobilePrototype
description	src/include/Object.hh	/^	String 	        description;$/;"	m	class:Object
description	src/include/ObjectPrototype.hh	/^    String              description;$/;"	m	class:ObjectPrototype
description	src/include/RoomPrototype.hh	/^	String 		description;$/;"	m	class:RoomPrototype
description	src/include/tables.hh	/^    String description;$/;"	m	struct:raffects
descriptor	src/include/Descriptor.hh	/^    int              descriptor = 0;$/;"	m	class:Descriptor
descriptor_list	src/comm.cc	/^Descriptor    *descriptor_list;    \/* All open descriptors         *\/$/;"	v
desert	src/include/Sector.hh	/^	desert = 10,$/;"	m	class:Sector
destroy	src/include/Pooled.hh	/^	static void destroy() {$/;"	f	class:Pooled
destroy_obj	src/handler.cc	/^void destroy_obj(Object *obj) {$/;"	f
detect_evil	src/include/affect/Type.hh	/^    detect_evil,$/;"	m	class:affect::type
detect_evil	src/include/skill/Type.hh	/^    detect_evil,$/;"	m	class:skill::type
detect_good	src/include/affect/Type.hh	/^    detect_good,$/;"	m	class:affect::type
detect_good	src/include/skill/Type.hh	/^    detect_good,$/;"	m	class:skill::type
detect_hidden	src/include/affect/Type.hh	/^    detect_hidden,$/;"	m	class:affect::type
detect_hidden	src/include/skill/Type.hh	/^    detect_hidden,$/;"	m	class:skill::type
detect_invis	src/include/affect/Type.hh	/^    detect_invis,$/;"	m	class:affect::type
detect_invis	src/include/skill/Type.hh	/^    detect_invis,$/;"	m	class:skill::type
detect_magic	src/include/affect/Type.hh	/^    detect_magic,$/;"	m	class:affect::type
detect_magic	src/include/skill/Type.hh	/^    detect_magic,$/;"	m	class:skill::type
detect_poison	src/include/skill/Type.hh	/^    detect_poison,$/;"	m	class:skill::type
dex_app	src/const.cc	/^const struct dex_app_type dex_app[26] = {$/;"	v	typeref:struct:dex_app_type
dex_app_type	src/include/merc.hh	/^struct  dex_app_type$/;"	s
dice	src/random.cc	/^int dice(int number, int size)$/;"	f
die_follower	src/act_comm.cc	/^void die_follower(Character *ch)$/;"	f
die_hard	src/include/skill/Type.hh	/^    die_hard,$/;"	m	class:skill::type
dir_name	src/include/Exit.hh	/^dir_name(unsigned int dir, bool reverse) {$/;"	f	class:Exit
dirt_kicking	src/include/affect/Type.hh	/^    dirt_kicking,$/;"	m	class:affect::type
dirt_kicking	src/include/skill/Type.hh	/^    dirt_kicking,$/;"	m	class:skill::type
disabled_by	src/include/Disabled.hh	/^    String disabled_by;               \/* name of disabler *\/$/;"	m	class:Disabled
disabled_first	src/Disabled.cc	/^Disabled *disabled_first;$/;"	v
disarm	src/include/skill/Type.hh	/^    disarm,$/;"	m	class:skill::type
dispel_char	src/dispel.cc	/^bool dispel_char(Character *victim, int level, bool cancellation)$/;"	f
dispel_evil	src/include/skill/Type.hh	/^    dispel_evil,$/;"	m	class:skill::type
dispel_good	src/include/skill/Type.hh	/^    dispel_good,$/;"	m	class:skill::type
dispel_magic	src/include/skill/Type.hh	/^    dispel_magic,$/;"	m	class:skill::type
dispel_params	src/dispel.cc	/^struct dispel_params {$/;"	s	file:
dispel_table	src/dispel.cc	/^static const std::map<affect::type, const dispel_type> dispel_table = {$/;"	v	file:
dispel_type	src/dispel.cc	/^struct dispel_type {$/;"	s	file:
display	src/include/lootv2.hh	/^	String display;			\/\/what is displayed to player$/;"	m	struct:set_gear
distance	src/scan.cc	/^char *const distance[4] = {$/;"	v
divine_healing	src/include/skill/Type.hh	/^    divine_healing,$/;"	m	class:skill::type
divine_regeneration	src/include/affect/Type.hh	/^    divine_regeneration,$/;"	m	class:affect::type
divine_regeneration	src/include/skill/Type.hh	/^    divine_regeneration,$/;"	m	class:skill::type
dizzy_ctime	src/file.cc	/^const char *dizzy_ctime(time_t *timep)$/;"	f
dizzy_scantime	src/file.cc	/^time_t dizzy_scantime(const String& ctime)$/;"	f
do_accept	src/include/interp.hh	/^DECLARE_DO_FUN( do_accept	);$/;"	v
do_accept	src/marry.cc	/^void do_accept(Character *ch, String argument)$/;"	f
do_addapply	src/include/interp.hh	/^DECLARE_DO_FUN( do_addapply	);$/;"	v
do_addapply	src/wiz_quest.cc	/^void do_addapply(Character *ch, String argument)$/;"	f
do_addexit	src/include/interp.hh	/^DECLARE_DO_FUN( do_addexit	);$/;"	v
do_addexit	src/wiz_coder.cc	/^void do_addexit(Character *ch, String argument)$/;"	f
do_adjust	src/include/interp.hh	/^DECLARE_DO_FUN( do_adjust       );$/;"	v
do_adjust	src/wiz_gen.cc	/^void do_adjust(Character *ch, String argument)$/;"	f
do_advance	src/include/interp.hh	/^DECLARE_DO_FUN( do_advance      );$/;"	v
do_advance	src/wiz_coder.cc	/^void do_advance(Character *ch, String argument)$/;"	f
do_affects	src/act_info.cc	/^void do_affects(Character *ch, String argument)$/;"	f
do_affects	src/include/interp.hh	/^DECLARE_DO_FUN( do_affects      );$/;"	v
do_afk	src/act_comm.cc	/^void do_afk(Character *ch, String argument)$/;"	f
do_afk	src/include/interp.hh	/^DECLARE_DO_FUN( do_afk          );$/;"	v
do_alia	src/alias.cc	/^void do_alia(Character *ch, String argument)$/;"	f
do_alia	src/include/interp.hh	/^DECLARE_DO_FUN( do_alia         );$/;"	v
do_alias	src/alias.cc	/^void do_alias(Character *ch, String argument)$/;"	f
do_alias	src/include/interp.hh	/^DECLARE_DO_FUN( do_alias        );$/;"	v
do_align	src/act_comm.cc	/^void do_align(Character *ch, String argument)$/;"	f
do_align	src/include/interp.hh	/^DECLARE_DO_FUN( do_align        );$/;"	v
do_allow	src/include/interp.hh	/^DECLARE_DO_FUN( do_allow        );$/;"	v
do_allow	src/wiz_secure.cc	/^void do_allow(Character *ch, String argument)$/;"	f
do_allsave	src/include/interp.hh	/^DECLARE_DO_FUN( do_allsave      );$/;"	v
do_allsave	src/wiz_gen.cc	/^void do_allsave(Character *ch, String argument)$/;"	f
do_alternate	src/include/interp.hh	/^DECLARE_DO_FUN( do_alternate    );$/;"	v
do_alternate	src/wiz_gen.cc	/^void do_alternate(Character *ch, String argument)$/;"	f
do_announce	src/channels.cc	/^void do_announce(Character *ch, String argument)$/;"	f
do_announce	src/include/interp.hh	/^DECLARE_DO_FUN( do_announce     );$/;"	v
do_answer	src/include/interp.hh	/^DECLARE_DO_FUN( do_answer       );$/;"	v
do_areas	src/area_handler.cc	/^void do_areas(Character *ch, String argument)$/;"	f
do_areas	src/include/interp.hh	/^DECLARE_DO_FUN( do_areas        );$/;"	v
do_at	src/include/interp.hh	/^DECLARE_DO_FUN( do_at           );$/;"	v
do_at	src/wiz_gen.cc	/^void do_at(Character *ch, String argument)$/;"	f
do_auction	src/Auction.cc	/^void do_auction(Character *ch, String argument)$/;"	f
do_auction	src/include/interp.hh	/^DECLARE_DO_FUN( do_auction      );$/;"	v
do_aura	src/include/interp.hh	/^DECLARE_DO_FUN( do_aura         );$/;"	v
do_aura	src/wiz_gen.cc	/^void do_aura(Character *ch, String argument)$/;"	f
do_autoassist	src/act_info.cc	/^void do_autoassist(Character *ch, String argument)$/;"	f
do_autoassist	src/include/interp.hh	/^DECLARE_DO_FUN( do_autoassist   );$/;"	v
do_autoboot	src/include/interp.hh	/^DECLARE_DO_FUN( do_autoboot     );$/;"	v
do_autoboot	src/wiz_coder.cc	/^void do_autoboot(Character *ch, String argument)$/;"	f
do_autoexit	src/act_info.cc	/^void do_autoexit(Character *ch, String argument)$/;"	f
do_autoexit	src/include/interp.hh	/^DECLARE_DO_FUN( do_autoexit     );$/;"	v
do_autogold	src/act_info.cc	/^void do_autogold(Character *ch, String argument)$/;"	f
do_autogold	src/include/interp.hh	/^DECLARE_DO_FUN( do_autogold     );$/;"	v
do_autograph	src/act_obj.cc	/^void do_autograph(Character *ch, String argument)$/;"	f
do_autograph	src/include/interp.hh	/^DECLARE_DO_FUN( do_autograph	);$/;"	v
do_autolist	src/act_info.cc	/^void do_autolist(Character *ch, String argument)$/;"	f
do_autolist	src/include/interp.hh	/^DECLARE_DO_FUN( do_autolist     );$/;"	v
do_autoloot	src/act_info.cc	/^void do_autoloot(Character *ch, String argument)$/;"	f
do_autoloot	src/include/interp.hh	/^DECLARE_DO_FUN( do_autoloot     );$/;"	v
do_autopeek	src/act_comm.cc	/^void do_autopeek(Character *ch, String argument)$/;"	f
do_autopeek	src/include/interp.hh	/^DECLARE_DO_FUN( do_autopeek     );$/;"	v
do_autorecall	src/act_comm.cc	/^void do_autorecall(Character *ch, String argument)$/;"	f
do_autorecall	src/include/interp.hh	/^DECLARE_DO_FUN( do_autorecall   );$/;"	v
do_autosac	src/act_info.cc	/^void do_autosac(Character *ch, String argument)$/;"	f
do_autosac	src/include/interp.hh	/^DECLARE_DO_FUN( do_autosac      );$/;"	v
do_autosplit	src/act_info.cc	/^void do_autosplit(Character *ch, String argument)$/;"	f
do_autosplit	src/include/interp.hh	/^DECLARE_DO_FUN( do_autosplit    );$/;"	v
do_autotick	src/act_comm.cc	/^void do_autotick(Character *ch, String argument)$/;"	f
do_autotick	src/include/interp.hh	/^DECLARE_DO_FUN( do_autotick     );$/;"	v
do_backstab	src/fight.cc	/^void do_backstab(Character *ch, String argument)$/;"	f
do_backstab	src/include/interp.hh	/^DECLARE_DO_FUN( do_backstab     );$/;"	v
do_backup	src/act_comm.cc	/^void do_backup(Character *ch, String argument)$/;"	f
do_backup	src/include/interp.hh	/^DECLARE_DO_FUN( do_backup       );$/;"	v
do_balance	src/bank.cc	/^void do_balance(Character *ch, String argument)$/;"	f
do_balance	src/include/interp.hh	/^DECLARE_DO_FUN( do_balance      );$/;"	v
do_bamfin	src/include/interp.hh	/^DECLARE_DO_FUN( do_bamfin       );$/;"	v
do_bamfin	src/wiz_gen.cc	/^void do_bamfin(Character *ch, String argument)$/;"	f
do_bamfout	src/include/interp.hh	/^DECLARE_DO_FUN( do_bamfout      );$/;"	v
do_bamfout	src/wiz_gen.cc	/^void do_bamfout(Character *ch, String argument)$/;"	f
do_ban	src/include/interp.hh	/^DECLARE_DO_FUN( do_ban          );$/;"	v
do_ban	src/wiz_secure.cc	/^void do_ban(Character *ch, String argument)$/;"	f
do_bash	src/fight.cc	/^void do_bash(Character *ch, String argument)$/;"	f
do_bash	src/include/interp.hh	/^DECLARE_DO_FUN( do_bash         );$/;"	v
do_battle	src/fight.cc	/^void do_battle(Character *ch, String argument)$/;"	f
do_battle	src/include/interp.hh	/^DECLARE_DO_FUN( do_battle       );$/;"	v
do_berserk	src/fight.cc	/^void do_berserk(Character *ch, String argument)$/;"	f
do_berserk	src/include/interp.hh	/^DECLARE_DO_FUN( do_berserk      );$/;"	v
do_bonus	src/act_info.cc	/^void do_bonus(Character *ch, String argument) {$/;"	f
do_bonus	src/include/interp.hh	/^DECLARE_DO_FUN( do_bonus        );$/;"	v
do_brandish	src/act_obj.cc	/^void do_brandish(Character *ch, String argument)$/;"	f
do_brandish	src/include/interp.hh	/^DECLARE_DO_FUN( do_brandish     );$/;"	v
do_breakup	src/include/interp.hh	/^DECLARE_DO_FUN( do_breakup	);$/;"	v
do_breakup	src/marry.cc	/^void do_breakup(Character *ch, String argument)$/;"	f
do_brew	src/act_obj.cc	/^void do_brew(Character *ch, String argument)$/;"	f
do_brew	src/include/interp.hh	/^DECLARE_DO_FUN( do_brew         );$/;"	v
do_brief	src/act_info.cc	/^void do_brief(Character *ch, String argument)$/;"	f
do_brief	src/include/interp.hh	/^DECLARE_DO_FUN( do_brief        );$/;"	v
do_bug	src/act_comm.cc	/^void do_bug(Character *ch, String argument)$/;"	f
do_bug	src/include/interp.hh	/^DECLARE_DO_FUN( do_bug          );$/;"	v
do_buy	src/act_obj.cc	/^void do_buy(Character *ch, String argument)$/;"	f
do_buy	src/include/interp.hh	/^DECLARE_DO_FUN( do_buy          );$/;"	v
do_canmakebag	src/include/interp.hh	/^DECLARE_DO_FUN( do_canmakebag   );$/;"	v
do_canmakebag	src/wiz_gen.cc	/^void do_canmakebag(Character *ch, String argument)$/;"	f
do_cast	src/include/interp.hh	/^DECLARE_DO_FUN( do_cast         );$/;"	v
do_cast	src/magic.cc	/^void do_cast(Character *ch, String argument)$/;"	f
do_cedit	src/clan-edit.cc	/^void do_cedit(Character *ch, String argument)$/;"	f
do_cedit	src/include/interp.hh	/^DECLARE_DO_FUN( do_cedit        );$/;"	v
do_censor	src/config.cc	/^void do_censor(Character *ch, String argument)$/;"	f
do_censor	src/include/interp.hh	/^DECLARE_DO_FUN( do_censor	);$/;"	v
do_changes	src/Note.cc	/^void do_changes(Character *ch, String argument)$/;"	f
do_changes	src/include/interp.hh	/^DECLARE_DO_FUN( do_changes      );$/;"	v
do_channels	src/channels.cc	/^void do_channels(Character *ch, String argument)$/;"	f
do_channels	src/include/interp.hh	/^DECLARE_DO_FUN( do_channels     );$/;"	v
do_chatmode	src/act_comm.cc	/^void do_chatmode(Character *ch, String argument)$/;"	f
do_chatmode	src/include/interp.hh	/^DECLARE_DO_FUN( do_chatmode     );$/;"	v
do_check	src/include/interp.hh	/^DECLARE_DO_FUN( do_check        );$/;"	v
do_check	src/wiz_gen.cc	/^void do_check(Character *ch, String argument)$/;"	f
do_chown	src/include/interp.hh	/^DECLARE_DO_FUN( do_chown        );$/;"	v
do_chown	src/wiz_gen.cc	/^void do_chown(Character *ch, String argument)$/;"	f
do_circle	src/fight.cc	/^void do_circle(Character *ch, String argument)$/;"	f
do_circle	src/include/interp.hh	/^DECLARE_DO_FUN( do_circle       );$/;"	v
do_clan_recall	src/act_move.cc	/^void do_clan_recall(Character *ch, String argument)$/;"	f
do_clan_recall	src/include/interp.hh	/^DECLARE_DO_FUN( do_clan_recall  );$/;"	v
do_clandeposit	src/bank.cc	/^void do_clandeposit(Character *ch, String argument)$/;"	f
do_clandeposit	src/include/interp.hh	/^DECLARE_DO_FUN( do_clandeposit  );$/;"	v
do_claninfo	src/act_info.cc	/^void do_claninfo(Character *ch, String argument)$/;"	f
do_claninfo	src/include/interp.hh	/^DECLARE_DO_FUN( do_claninfo  	);$/;"	v
do_clanlist	src/act_info.cc	/^void do_clanlist(Character *ch, String argument)$/;"	f
do_clanlist	src/include/interp.hh	/^DECLARE_DO_FUN( do_clanlist     );$/;"	v
do_clanpower	src/act_info.cc	/^void do_clanpower(Character *ch, String argument)$/;"	f
do_clanpower	src/include/interp.hh	/^DECLARE_DO_FUN( do_clanpower	);$/;"	v
do_clanqp	src/include/interp.hh	/^DECLARE_DO_FUN( do_clanqp	);$/;"	v
do_clanqp	src/wiz_gen.cc	/^void do_clanqp(Character *ch, String argument)$/;"	f
do_clantalk	src/channels.cc	/^void do_clantalk(Character *ch, String argument)$/;"	f
do_clantalk	src/include/interp.hh	/^DECLARE_DO_FUN( do_clantalk     );$/;"	v
do_clanwithdraw	src/bank.cc	/^void do_clanwithdraw(Character *ch, String argument)$/;"	f
do_clanwithdraw	src/include/interp.hh	/^DECLARE_DO_FUN( do_clanwithdraw );$/;"	v
do_clear	src/act_comm.cc	/^void do_clear(Character *ch, String argument)$/;"	f
do_clear	src/include/interp.hh	/^DECLARE_DO_FUN( do_clear        );$/;"	v
do_clone	src/include/interp.hh	/^DECLARE_DO_FUN( do_clone        );$/;"	v
do_clone	src/wiz_gen.cc	/^void do_clone(Character *ch, String argument)$/;"	f
do_close	src/act_move.cc	/^void do_close(Character *ch, String argument)$/;"	f
do_close	src/include/interp.hh	/^DECLARE_DO_FUN( do_close        );$/;"	v
do_color	src/config.cc	/^void do_color(Character *ch, String argument)$/;"	f
do_color	src/include/interp.hh	/^DECLARE_DO_FUN( do_color        );$/;"	v
do_combine	src/act_info.cc	/^void do_combine(Character *ch, String argument)$/;"	f
do_combine	src/include/interp.hh	/^DECLARE_DO_FUN( do_combine      );$/;"	v
do_commands	src/include/interp.hh	/^DECLARE_DO_FUN( do_commands     );$/;"	v
do_commands	src/interp.cc	/^void do_commands(Character *ch, String argument)$/;"	f
do_compact	src/act_info.cc	/^void do_compact(Character *ch, String argument)$/;"	f
do_compact	src/include/interp.hh	/^DECLARE_DO_FUN( do_compact      );$/;"	v
do_compare	src/act_info.cc	/^void do_compare(Character *ch, String argument)$/;"	f
do_compare	src/include/interp.hh	/^DECLARE_DO_FUN( do_compare      );$/;"	v
do_config	src/config.cc	/^void do_config(Character *ch, String argument)$/;"	f
do_config	src/include/interp.hh	/^DECLARE_DO_FUN( do_config	);$/;"	v
do_consider	src/act_info.cc	/^void do_consider(Character *ch, String argument)$/;"	f
do_consider	src/include/interp.hh	/^DECLARE_DO_FUN( do_consider     );$/;"	v
do_convert	src/include/interp.hh	/^DECLARE_DO_FUN( do_convert      );$/;"	v
do_convert	src/skills.cc	/^void do_convert(Character *ch, String argument)$/;"	f
do_copyove	src/comm.cc	/^void do_copyove(Character *ch)$/;"	f
do_copyove	src/include/interp.hh	/^DECLARE_DO_FUN( do_copyove	);$/;"	v
do_copyover	src/comm.cc	/^void do_copyover(Character *ch, String argument)$/;"	f
do_copyover	src/include/interp.hh	/^DECLARE_DO_FUN( do_copyover	);$/;"	v
do_count	src/act_info.cc	/^void do_count(Character *ch, String argument)$/;"	f
do_count	src/include/interp.hh	/^DECLARE_DO_FUN( do_count        );$/;"	v
do_create	src/include/interp.hh	/^DECLARE_DO_FUN( do_create       );$/;"	v
do_create	src/wiz_quest.cc	/^void do_create(Character *ch, String argument)$/;"	f
do_credits	src/act_info.cc	/^void do_credits(Character *ch, String argument)$/;"	f
do_credits	src/include/interp.hh	/^DECLARE_DO_FUN( do_credits      );$/;"	v
do_critical_blow	src/fight.cc	/^void do_critical_blow(Character *ch, String argument)$/;"	f
do_critical_blow	src/include/interp.hh	/^DECLARE_DO_FUN( do_critical_blow);$/;"	v
do_crush	src/fight.cc	/^void do_crush(Character *ch, String argument)$/;"	f
do_crush	src/include/interp.hh	/^DECLARE_DO_FUN( do_crush        );$/;"	v
do_ctest	src/act_info.cc	/^void do_ctest(Character *ch, String argument)$/;"	f
do_ctest	src/include/interp.hh	/^DECLARE_DO_FUN( do_ctest        );$/;"	v
do_deaf	src/act_comm.cc	/^void do_deaf(Character *ch, String argument)$/;"	f
do_deaf	src/include/interp.hh	/^DECLARE_DO_FUN( do_deaf         );$/;"	v
do_debug	src/debug.cc	/^void do_debug(Character *ch, String argument)$/;"	f
do_debug	src/include/interp.hh	/^DECLARE_DO_FUN( do_debug        );$/;"	v
do_defensive	src/act_info.cc	/^void do_defensive(Character *ch, String argument)$/;"	f
do_defensive	src/include/interp.hh	/^DECLARE_DO_FUN( do_defensive    );$/;"	v
do_delet	src/act_comm.cc	/^void do_delet(Character *ch, String argument)$/;"	f
do_delet	src/include/interp.hh	/^DECLARE_DO_FUN( do_delet        );$/;"	v
do_delete	src/act_comm.cc	/^void do_delete(Character *ch, String argument)$/;"	f
do_delete	src/include/interp.hh	/^DECLARE_DO_FUN( do_delete       );$/;"	v
do_deny	src/include/interp.hh	/^DECLARE_DO_FUN( do_deny         );$/;"	v
do_deny	src/wiz_secure.cc	/^void do_deny(Character *ch, String argument)$/;"	f
do_departed	src/act_info.cc	/^void do_departed(Character *ch, String argument)$/;"	f
do_departed	src/include/interp.hh	/^DECLARE_DO_FUN( do_departed     );$/;"	v
do_departedlist	src/include/interp.hh	/^DECLARE_DO_FUN( do_departedlist );$/;"	v
do_departedlist	src/wiz_gen.cc	/^void do_departedlist(Character *ch, String argument)$/;"	f
do_deposit	src/bank.cc	/^void do_deposit(Character *ch, String argument)$/;"	f
do_deposit	src/include/interp.hh	/^DECLARE_DO_FUN( do_deposit      );$/;"	v
do_deputize	src/include/interp.hh	/^DECLARE_DO_FUN( do_deputize	);$/;"	v
do_deputize	src/wiz_gen.cc	/^void do_deputize(Character *ch, String argument)$/;"	f
do_description	src/act_info.cc	/^void do_description(Character *ch, String argument)$/;"	f
do_description	src/include/interp.hh	/^DECLARE_DO_FUN( do_description  );$/;"	v
do_despell	src/include/interp.hh	/^DECLARE_DO_FUN( do_despell      );$/;"	v
do_despell	src/wiz_gen.cc	/^void do_despell(Character *ch, String argument)$/;"	f
do_dirt	src/fight.cc	/^void do_dirt(Character *ch, String argument)$/;"	f
do_dirt	src/include/interp.hh	/^DECLARE_DO_FUN( do_dirt         );$/;"	v
do_disable	src/Disabled.cc	/^void do_disable(Character *ch, String argument)$/;"	f
do_disable	src/include/interp.hh	/^DECLARE_DO_FUN( do_disable      );$/;"	v
do_disarm	src/fight.cc	/^void do_disarm(Character *ch, String argument)$/;"	f
do_disarm	src/include/interp.hh	/^DECLARE_DO_FUN( do_disarm       );$/;"	v
do_disconnect	src/include/interp.hh	/^DECLARE_DO_FUN( do_disconnect   );$/;"	v
do_disconnect	src/wiz_gen.cc	/^void do_disconnect(Character *ch, String argument)$/;"	f
do_divorce	src/include/interp.hh	/^DECLARE_DO_FUN( do_divorce      );$/;"	v
do_divorce	src/marry.cc	/^void do_divorce(Character *ch, String argument)$/;"	f
do_doas	src/include/interp.hh	/^DECLARE_DO_FUN( do_doas		);$/;"	v
do_doas	src/wiz_gen.cc	/^void do_doas(Character *ch, String argument)$/;"	f
do_donate	src/act_obj.cc	/^void do_donate(Character *ch, String argument)$/;"	f
do_donate	src/include/interp.hh	/^DECLARE_DO_FUN( do_donate       );$/;"	v
do_down	src/act_move.cc	/^void do_down(Character *ch, String argument)$/;"	f
do_down	src/include/interp.hh	/^DECLARE_DO_FUN( do_down         );$/;"	v
do_drag	src/act_move.cc	/^void do_drag(Character *ch, String argument)$/;"	f
do_drag	src/include/interp.hh	/^DECLARE_DO_FUN( do_drag         );$/;"	v
do_drink	src/act_obj.cc	/^void do_drink(Character *ch, String argument)$/;"	f
do_drink	src/include/interp.hh	/^DECLARE_DO_FUN( do_drink        );$/;"	v
do_drop	src/act_obj.cc	/^void do_drop(Character *ch, String argument)$/;"	f
do_drop	src/include/interp.hh	/^DECLARE_DO_FUN( do_drop         );$/;"	v
do_duel	src/duel.cc	/^void do_duel(Character *ch, String argument)$/;"	f
do_duel	src/include/interp.hh	/^DECLARE_DO_FUN( do_duel		);$/;"	v
do_dump	src/include/interp.hh	/^DECLARE_DO_FUN( do_dump         );$/;"	v
do_dump	src/wiz_coder.cc	/^void do_dump(Character *ch, String argument)$/;"	f
do_east	src/act_move.cc	/^void do_east(Character *ch, String argument)$/;"	f
do_east	src/include/interp.hh	/^DECLARE_DO_FUN( do_east         );$/;"	v
do_eat	src/act_obj.cc	/^void do_eat(Character *ch, String argument)$/;"	f
do_eat	src/include/interp.hh	/^DECLARE_DO_FUN( do_eat          );$/;"	v
do_echo	src/include/interp.hh	/^DECLARE_DO_FUN( do_echo         );$/;"	v
do_echo	src/wiz_gen.cc	/^void do_echo(Character *ch, String argument)$/;"	f
do_edit	src/edit.cc	/^void do_edit(Character *ch, String argument)$/;"	f
do_edit	src/include/interp.hh	/^DECLARE_DO_FUN( do_edit         );$/;"	v
do_email	src/act_info.cc	/^void do_email(Character *ch, String argument)$/;"	f
do_email	src/include/interp.hh	/^DECLARE_DO_FUN( do_email        );$/;"	v
do_emote	src/channels.cc	/^void do_emote(Character *ch, String argument)$/;"	f
do_emote	src/include/interp.hh	/^DECLARE_DO_FUN( do_emote        );$/;"	v
do_engrave	src/act_obj.cc	/^void do_engrave(Character *ch, String argument)$/;"	f
do_engrave	src/include/interp.hh	/^DECLARE_DO_FUN( do_engrave      );$/;"	v
do_enter	src/act_move.cc	/^void do_enter(Character *ch, String argument)$/;"	f
do_enter	src/include/interp.hh	/^DECLARE_DO_FUN( do_enter        );$/;"	v
do_envenom	src/act_obj.cc	/^void do_envenom(Character *ch, String argument)$/;"	f
do_envenom	src/include/interp.hh	/^DECLARE_DO_FUN( do_envenom      );$/;"	v
do_equipment	src/act_info.cc	/^void do_equipment(Character *ch, String argument)$/;"	f
do_equipment	src/include/interp.hh	/^DECLARE_DO_FUN( do_equipment    );$/;"	v
do_eremort	src/include/interp.hh	/^DECLARE_DO_FUN( do_eremort	);$/;"	v
do_eremort	src/remort.cc	/^void do_eremort(Character *ch, String argument)$/;"	f
do_evolve	src/include/interp.hh	/^DECLARE_DO_FUN( do_evolve	    );$/;"	v
do_evolve	src/skills.cc	/^void do_evolve(Character *ch, String argument)$/;"	f
do_evoset	src/include/interp.hh	/^DECLARE_DO_FUN( do_evoset       );$/;"	v
do_evoset	src/set-stat.cc	/^DECLARE_DO_FUN( do_evoset );$/;"	v
do_evoset	src/set-stat.cc	/^void do_evoset(Character *ch, String argument)$/;"	f
do_examine	src/act_info.cc	/^void do_examine(Character *ch, String argument)$/;"	f
do_examine	src/include/interp.hh	/^DECLARE_DO_FUN( do_examine      );$/;"	v
do_exits	src/act_info.cc	/^void do_exits(Character *ch, String argument)$/;"	f
do_exits	src/include/interp.hh	/^DECLARE_DO_FUN( do_exits        );$/;"	v
do_exlist	src/include/interp.hh	/^DECLARE_DO_FUN( do_exlist       );$/;"	v
do_exlist	src/wiz_build.cc	/^void do_exlist(Character *ch, String argument)$/;"	f
do_extraset	src/include/interp.hh	/^DECLARE_DO_FUN( do_extraset     );$/;"	v
do_extraset	src/set-stat.cc	/^DECLARE_DO_FUN( do_extraset );$/;"	v
do_extraset	src/set-stat.cc	/^void do_extraset(Character *ch, String argument)$/;"	f
do_familiar	src/include/interp.hh	/^DECLARE_DO_FUN( do_familiar     );$/;"	v
do_familiar	src/special.cc	/^void do_familiar(Character *ch, String argument)$/;"	f
do_file	src/include/interp.hh	/^DECLARE_DO_FUN( do_file         );$/;"	v
do_file	src/wiz_gen.cc	/^void do_file(Character *ch, String argument)$/;"	f
do_fill	src/act_obj.cc	/^void do_fill(Character *ch, String argument)$/;"	f
do_fill	src/include/interp.hh	/^DECLARE_DO_FUN( do_fill         );$/;"	v
do_finger	src/include/interp.hh	/^DECLARE_DO_FUN( do_finger	);$/;"	v
do_finger	src/save.cc	/^void do_finger(Character *ch, String argument)$/;"	f
do_fingerinfo	src/act_info.cc	/^void do_fingerinfo(Character *ch, String argument)$/;"	f
do_fingerinfo	src/include/interp.hh	/^DECLARE_DO_FUN( do_fingerinfo   );$/;"	v
do_firebuilding	src/act_obj.cc	/^void do_firebuilding(Character *ch, String argument)$/;"	f
do_firebuilding	src/include/interp.hh	/^DECLARE_DO_FUN( do_firebuilding );$/;"	v
do_flag	src/flag.cc	/^void do_flag(Character *ch, String argument)$/;"	f
do_flag	src/include/interp.hh	/^DECLARE_DO_FUN( do_flag         );$/;"	v
do_flaglist	src/flag.cc	/^void do_flaglist(Character *ch, String argument)$/;"	f
do_flaglist	src/include/interp.hh	/^DECLARE_DO_FUN( do_flaglist     );$/;"	v
do_flagsearch	src/flag.cc	/^void do_flagsearch(Character *ch, String argument)$/;"	f
do_flagsearch	src/include/interp.hh	/^DECLARE_DO_FUN( do_flagsearch	);$/;"	v
do_flame	src/channels.cc	/^void do_flame(Character *ch, String argument)$/;"	f
do_flame	src/include/interp.hh	/^DECLARE_DO_FUN( do_flame        );$/;"	v
do_flee	src/fight.cc	/^void do_flee(Character *ch, String argument)$/;"	f
do_flee	src/include/interp.hh	/^DECLARE_DO_FUN( do_flee         );$/;"	v
do_fly	src/act_move.cc	/^void do_fly(Character *ch, String argument)$/;"	f
do_fly	src/include/interp.hh	/^DECLARE_DO_FUN( do_fly          );$/;"	v
do_fod	src/include/interp.hh	/^DECLARE_DO_FUN( do_fod          );$/;"	v
do_fod	src/wiz_secure.cc	/^void do_fod(Character *ch, String argument)$/;"	f
do_follow	src/act_comm.cc	/^void do_follow(Character *ch, String argument)$/;"	f
do_follow	src/include/interp.hh	/^DECLARE_DO_FUN( do_follow       );$/;"	v
do_followerlist	src/include/interp.hh	/^DECLARE_DO_FUN( do_followerlist );$/;"	v
do_followerlist	src/wiz_gen.cc	/^void do_followerlist(Character *ch, String argument)$/;"	f
do_for	src/include/interp.hh	/^DECLARE_DO_FUN( do_for          );$/;"	v
do_for	src/wiz_gen.cc	/^void do_for(Character *ch, String argument)$/;"	f
do_force	src/include/interp.hh	/^DECLARE_DO_FUN( do_force        );$/;"	v
do_force	src/wiz_secure.cc	/^void do_force(Character *ch, String argument)$/;"	f
do_forge	src/act_obj.cc	/^void do_forge(Character *ch, String argument)$/;"	f
do_forge	src/include/interp.hh	/^DECLARE_DO_FUN( do_forge        );$/;"	v
do_freeze	src/include/interp.hh	/^DECLARE_DO_FUN( do_freeze       );$/;"	v
do_freeze	src/wiz_secure.cc	/^void do_freeze(Character *ch, String argument)$/;"	f
do_fry	src/include/interp.hh	/^DECLARE_DO_FUN( do_fry          );$/;"	v
do_fry	src/wiz_secure.cc	/^void do_fry(Character *ch, String argument)$/;"	f
do_fuckoff	src/act_comm.cc	/^void do_fuckoff(Character *ch, String argument)$/;"	f
do_fuckoff	src/include/interp.hh	/^DECLARE_DO_FUN( do_fuckoff      );$/;"	v
do_fun	src/include/interp.hh	/^    DO_FUN *            do_fun;$/;"	m	struct:cmd_type
do_fyi	src/channels.cc	/^void do_fyi(Character *ch, String argument)$/;"	f
do_fyi	src/include/interp.hh	/^DECLARE_DO_FUN( do_fyi          );$/;"	v
do_gain	src/include/interp.hh	/^DECLARE_DO_FUN( do_gain         );$/;"	v
do_gain	src/skills.cc	/^void do_gain(Character *ch, String argument)$/;"	f
do_gamein	src/act_info.cc	/^void do_gamein(Character *ch, String argument)$/;"	f
do_gamein	src/include/interp.hh	/^DECLARE_DO_FUN( do_gamein       );$/;"	v
do_gameout	src/act_info.cc	/^void do_gameout(Character *ch, String argument)$/;"	f
do_gameout	src/include/interp.hh	/^DECLARE_DO_FUN( do_gameout      );$/;"	v
do_get	src/act_obj.cc	/^void do_get(Character *ch, String argument)$/;"	f
do_get	src/include/interp.hh	/^DECLARE_DO_FUN( do_get          );$/;"	v
do_give	src/act_obj.cc	/^void do_give(Character *ch, String argument)$/;"	f
do_give	src/include/interp.hh	/^DECLARE_DO_FUN( do_give         );$/;"	v
do_globalsocial	src/channels.cc	/^void do_globalsocial(Character *ch, String argument)$/;"	f
do_globalsocial	src/include/interp.hh	/^DECLARE_DO_FUN( do_globalsocial );$/;"	v
do_gossip	src/channels.cc	/^void do_gossip(Character *ch, String argument)$/;"	f
do_gossip	src/include/interp.hh	/^DECLARE_DO_FUN( do_gossip       );$/;"	v
do_goto	src/include/interp.hh	/^DECLARE_DO_FUN( do_goto         );$/;"	v
do_goto	src/wiz_gen.cc	/^void do_goto(Character *ch, String argument)$/;"	f
do_grats	src/channels.cc	/^void do_grats(Character *ch, String argument)$/;"	f
do_grats	src/include/interp.hh	/^DECLARE_DO_FUN( do_grats        );$/;"	v
do_group	src/act_comm.cc	/^void do_group(Character *ch, String argument)$/;"	f
do_group	src/include/interp.hh	/^DECLARE_DO_FUN( do_group        );$/;"	v
do_grouplist	src/include/interp.hh	/^DECLARE_DO_FUN( do_grouplist    );$/;"	v
do_grouplist	src/wiz_gen.cc	/^void do_grouplist(Character *ch, String argument)$/;"	f
do_groups	src/include/interp.hh	/^DECLARE_DO_FUN( do_groups       );$/;"	v
do_groups	src/skills.cc	/^void do_groups(Character *ch, String argument)$/;"	f
do_gtell	src/channels.cc	/^void do_gtell(Character *ch, String argument)$/;"	f
do_gtell	src/include/interp.hh	/^DECLARE_DO_FUN( do_gtell        );$/;"	v
do_guild	src/include/interp.hh	/^DECLARE_DO_FUN( do_guild        );$/;"	v
do_guild	src/wiz_gen.cc	/^void do_guild(Character *ch, String argument)$/;"	f
do_hammerstrike	src/fight.cc	/^void do_hammerstrike(Character *ch, String argument)$/;"	f
do_hammerstrike	src/include/interp.hh	/^DECLARE_DO_FUN( do_hammerstrike );$/;"	v
do_hbb	src/act_comm.cc	/^void do_hbb(Character *ch, String argument)$/;"	f
do_hbb	src/include/interp.hh	/^DECLARE_DO_FUN( do_hbb          );$/;"	v
do_hbi	src/act_comm.cc	/^void do_hbi(Character *ch, String argument)$/;"	f
do_hbi	src/include/interp.hh	/^DECLARE_DO_FUN( do_hbi          );$/;"	v
do_heal	src/include/interp.hh	/^DECLARE_DO_FUN( do_heal         );$/;"	v
do_heal	src/mobiles.cc	/^void do_heal(Character *ch, String argument)$/;"	f
do_hedit	src/help.cc	/^void do_hedit(Character *ch, String argument)$/;"	f
do_hedit	src/include/interp.hh	/^DECLARE_DO_FUN( do_hedit        );$/;"	v
do_heed	src/include/interp.hh	/^DECLARE_DO_FUN( do_heed         );$/;"	v
do_heed	src/wiz_gen.cc	/^void do_heed(Character *ch, String argument)$/;"	f
do_help	src/help.cc	/^void do_help(Character *ch, String argument)$/;"	f
do_help	src/include/interp.hh	/^DECLARE_DO_FUN( do_help         );$/;"	v
do_hide	src/act_move.cc	/^void do_hide(Character *ch, String argument)$/;"	f
do_hide	src/include/interp.hh	/^DECLARE_DO_FUN( do_hide         );$/;"	v
do_hone	src/act_obj.cc	/^void do_hone(Character *ch, String argument)$/;"	f
do_hone	src/include/interp.hh	/^DECLARE_DO_FUN( do_hone         );$/;"	v
do_huh	src/interp.cc	/^void do_huh(Character *ch)$/;"	f
do_hunt	src/hunt.cc	/^void do_hunt(Character *ch, String argument)$/;"	f
do_hunt	src/include/interp.hh	/^DECLARE_DO_FUN( do_hunt         );$/;"	v
do_ic	src/channels.cc	/^void do_ic(Character *ch, String argument)$/;"	f
do_ic	src/include/interp.hh	/^DECLARE_DO_FUN( do_ic		);$/;"	v
do_iclantalk	src/channels.cc	/^void do_iclantalk(Character *ch, String argument)$/;"	f
do_iclantalk	src/include/interp.hh	/^DECLARE_DO_FUN( do_iclantalk    );$/;"	v
do_idea	src/Note.cc	/^void do_idea(Character *ch, String argument)$/;"	f
do_idea	src/include/interp.hh	/^DECLARE_DO_FUN( do_idea         );$/;"	v
do_identify	src/include/interp.hh	/^DECLARE_DO_FUN( do_identify     );$/;"	v
do_identify	src/special.cc	/^void do_identify(Character *ch, String argument)$/;"	f
do_ignore	src/ignore.cc	/^void do_ignore(Character *ch, String argument)$/;"	f
do_ignore	src/include/interp.hh	/^DECLARE_DO_FUN( do_ignore	);$/;"	v
do_immapp	src/act_comm.cc	/^void do_immapp(Character *ch, String argument)$/;"	f
do_immapp	src/include/interp.hh	/^DECLARE_DO_FUN( do_immapp	);$/;"	v
do_immname	src/act_info.cc	/^void do_immname(Character *ch, String argument)$/;"	f
do_immname	src/include/interp.hh	/^DECLARE_DO_FUN( do_immname      );$/;"	v
do_immquest	src/Note.cc	/^void do_immquest(Character *ch, String argument)$/;"	f
do_immquest	src/include/interp.hh	/^DECLARE_DO_FUN( do_immquest     );$/;"	v
do_immtalk	src/channels.cc	/^void do_immtalk(Character *ch, String argument)$/;"	f
do_immtalk	src/include/interp.hh	/^DECLARE_DO_FUN( do_immtalk      );$/;"	v
do_imotd	src/act_info.cc	/^void do_imotd(Character *ch, String argument)$/;"	f
do_imotd	src/include/interp.hh	/^DECLARE_DO_FUN( do_imotd        );$/;"	v
do_inset	src/gem/gem.cc	/^void do_inset(Character *ch, String argument)$/;"	f
do_inset	src/include/interp.hh	/^DECLARE_DO_FUN( do_inset	);$/;"	v
do_inventory	src/act_info.cc	/^void do_inventory(Character *ch, String argument)$/;"	f
do_inventory	src/include/interp.hh	/^DECLARE_DO_FUN( do_inventory    );$/;"	v
do_invis	src/include/interp.hh	/^DECLARE_DO_FUN( do_invis        );$/;"	v
do_invis	src/wiz_gen.cc	/^void do_invis(Character *ch, String argument)$/;"	f
do_invite	src/act_info.cc	/^void do_invite(Character *ch, String argument)$/;"	f
do_invite	src/include/interp.hh	/^DECLARE_DO_FUN( do_invite       );$/;"	v
do_join	src/act_info.cc	/^void do_join(Character *ch, String argument)$/;"	f
do_join	src/include/interp.hh	/^DECLARE_DO_FUN( do_join         );$/;"	v
do_junk	src/act_obj.cc	/^void do_junk(Character *ch, String argument)$/;"	f
do_junk	src/include/interp.hh	/^DECLARE_DO_FUN( do_junk         );$/;"	v
do_kewlscore	src/include/interp.hh	/^DECLARE_DO_FUN( do_kewlscore    );$/;"	v
do_kick	src/fight.cc	/^void do_kick(Character *ch, String argument)$/;"	f
do_kick	src/include/interp.hh	/^DECLARE_DO_FUN( do_kick         );$/;"	v
do_kill	src/fight.cc	/^void do_kill(Character *ch, String argument)$/;"	f
do_kill	src/include/interp.hh	/^DECLARE_DO_FUN( do_kill         );$/;"	v
do_lag	src/include/interp.hh	/^DECLARE_DO_FUN( do_lag          );$/;"	v
do_land	src/act_move.cc	/^void do_land(Character *ch, String argument)$/;"	f
do_land	src/include/interp.hh	/^DECLARE_DO_FUN( do_land         );$/;"	v
do_lay_on_hands	src/fight.cc	/^void do_lay_on_hands(Character *ch, String argument)$/;"	f
do_lay_on_hands	src/include/interp.hh	/^DECLARE_DO_FUN( do_lay_on_hands );$/;"	v
do_leader	src/include/interp.hh	/^DECLARE_DO_FUN( do_leader       );$/;"	v
do_leader	src/wiz_gen.cc	/^void do_leader(Character *ch, String argument)$/;"	f
do_levels	src/include/interp.hh	/^DECLARE_DO_FUN( do_levels       );$/;"	v
do_levels	src/skills.cc	/^void do_levels(Character *ch, String argument)$/;"	f
do_linkload	src/include/interp.hh	/^DECLARE_DO_FUN( do_linkload     );$/;"	v
do_linkload	src/wiz_gen.cc	/^void do_linkload(Character *ch, String argument)$/;"	f
do_list	src/act_obj.cc	/^void do_list(Character *ch, String argument)$/;"	f
do_list	src/include/interp.hh	/^DECLARE_DO_FUN( do_list         );$/;"	v
do_load	src/include/interp.hh	/^DECLARE_DO_FUN( do_load         );$/;"	v
do_load	src/wiz_gen.cc	/^void do_load(Character *ch, String argument)$/;"	f
do_loadhelps	src/help.cc	/^void do_loadhelps(Character *ch, String argument)$/;"	f
do_loadhelps	src/include/interp.hh	/^DECLARE_DO_FUN( do_loadhelps	);$/;"	v
do_lock	src/act_move.cc	/^void do_lock(Character *ch, String argument)$/;"	f
do_lock	src/include/interp.hh	/^DECLARE_DO_FUN( do_lock         );$/;"	v
do_locker	src/include/interp.hh	/^DECLARE_DO_FUN( do_locker       );$/;"	v
do_locker	src/wiz_secure.cc	/^void do_locker(Character *ch, String argument)$/;"	f
do_log	src/include/interp.hh	/^DECLARE_DO_FUN( do_log          );$/;"	v
do_log	src/wiz_secure.cc	/^void do_log(Character *ch, String argument)$/;"	f
do_look	src/act_info.cc	/^void do_look(Character *ch, String argument)$/;"	f
do_look	src/include/interp.hh	/^DECLARE_DO_FUN( do_look         );$/;"	v
do_lore	src/act_obj.cc	/^void do_lore(Character *ch, String argument)$/;"	f
do_lore	src/include/interp.hh	/^DECLARE_DO_FUN( do_lore         );$/;"	v
do_lower	src/include/interp.hh	/^DECLARE_DO_FUN( do_lower        );$/;"	v
do_lower	src/wiz_gen.cc	/^void do_lower(Character *ch, String argument)$/;"	f
do_lurk	src/include/interp.hh	/^DECLARE_DO_FUN( do_lurk		    );$/;"	v
do_lurk	src/wiz_gen.cc	/^void do_lurk(Character *ch, String argument)$/;"	f
do_mark	src/act_move.cc	/^void do_mark(Character *ch, String argument)$/;"	f
do_mark	src/include/interp.hh	/^DECLARE_DO_FUN( do_mark         );$/;"	v
do_marry	src/include/interp.hh	/^DECLARE_DO_FUN( do_marry        );$/;"	v
do_marry	src/marry.cc	/^void do_marry(Character *ch, String argument)$/;"	f
do_master	src/include/interp.hh	/^DECLARE_DO_FUN( do_master       );$/;"	v
do_master	src/wiz_gen.cc	/^void do_master(Character *ch, String argument)$/;"	f
do_memory	src/include/interp.hh	/^DECLARE_DO_FUN( do_memory       );$/;"	v
do_memory	src/wiz_coder.cc	/^void do_memory(Character *ch, String argument)$/;"	f
do_mfind	src/include/interp.hh	/^DECLARE_DO_FUN( do_mfind        );$/;"	v
do_mfind	src/wiz_gen.cc	/^void do_mfind(Character *ch, String argument)$/;"	f
do_mlevel	src/include/interp.hh	/^DECLARE_DO_FUN( do_mlevel       );$/;"	v
do_mlevel	src/wiz_gen.cc	/^void do_mlevel(Character *ch, String argument)$/;"	f
do_mload	src/include/interp.hh	/^DECLARE_DO_FUN( do_mload        );$/;"	v
do_mload	src/wiz_gen.cc	/^void do_mload(Character *ch, String argument)$/;"	f
do_morph	src/include/interp.hh	/^DECLARE_DO_FUN( do_morph        );$/;"	v
do_morph	src/wiz_quest.cc	/^void do_morph(Character *ch, String argument)$/;"	f
do_motd	src/include/interp.hh	/^DECLARE_DO_FUN( do_motd         );$/;"	v
do_motd	src/wiz_gen.cc	/^void do_motd(Character *ch, String argument)$/;"	f
do_mpasound	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpasound     );$/;"	v
do_mpasound	src/mob_commands.cc	/^void do_mpasound(Character *ch, String argument)$/;"	f
do_mpat	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpat         );$/;"	v
do_mpat	src/mob_commands.cc	/^void do_mpat(Character *ch, String argument)$/;"	f
do_mpcast	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpcast       );$/;"	v
do_mpcast	src/magic.cc	/^void do_mpcast(Character *ch, String argument)$/;"	f
do_mpclearmoney	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpclearmoney );$/;"	v
do_mpclearmoney	src/mob_commands.cc	/^void do_mpclearmoney(Character *ch, String argument)$/;"	f
do_mpecho	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpecho       );$/;"	v
do_mpecho	src/mob_commands.cc	/^void do_mpecho(Character *ch, String argument)$/;"	f
do_mpechoaround	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpechoaround );$/;"	v
do_mpechoaround	src/mob_commands.cc	/^void do_mpechoaround(Character *ch, String argument)$/;"	f
do_mpechoat	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpechoat     );$/;"	v
do_mpechoat	src/mob_commands.cc	/^void do_mpechoat(Character *ch, String argument)$/;"	f
do_mpforce	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpforce      );$/;"	v
do_mpforce	src/mob_commands.cc	/^void do_mpforce(Character *ch, String argument)$/;"	f
do_mpgoto	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpgoto       );$/;"	v
do_mpgoto	src/mob_commands.cc	/^void do_mpgoto(Character *ch, String argument)$/;"	f
do_mpjunk	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpjunk       );$/;"	v
do_mpjunk	src/mob_commands.cc	/^void do_mpjunk(Character *ch, String argument)$/;"	f
do_mpkill	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpkill       );$/;"	v
do_mpkill	src/mob_commands.cc	/^void do_mpkill(Character *ch, String argument)$/;"	f
do_mpmload	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpmload      );$/;"	v
do_mpmload	src/mob_commands.cc	/^void do_mpmload(Character *ch, String argument)$/;"	f
do_mpoload	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpoload      );$/;"	v
do_mpoload	src/mob_commands.cc	/^void do_mpoload(Character *ch, String argument)$/;"	f
do_mppurge	src/include/interp.hh	/^DECLARE_DO_FUN( do_mppurge      );$/;"	v
do_mppurge	src/mob_commands.cc	/^void do_mppurge(Character *ch, String argument)$/;"	f
do_mpstat	src/include/interp.hh	/^DECLARE_DO_FUN( do_mpstat       );$/;"	v
do_mpstat	src/mob_commands.cc	/^void do_mpstat(Character *ch, String argument)$/;"	f
do_mptransfer	src/include/interp.hh	/^DECLARE_DO_FUN( do_mptransfer   );$/;"	v
do_mptransfer	src/mob_commands.cc	/^void do_mptransfer(Character *ch, String argument)$/;"	f
do_mset	src/include/interp.hh	/^DECLARE_DO_FUN( do_mset         );$/;"	v
do_mset	src/set-stat.cc	/^DECLARE_DO_FUN( do_mset );$/;"	v
do_mset	src/set-stat.cc	/^void do_mset(Character *ch, String argument)$/;"	f
do_mstat	src/include/interp.hh	/^DECLARE_DO_FUN( do_mstat        );$/;"	v
do_music	src/channels.cc	/^void do_music(Character *ch, String argument)$/;"	f
do_music	src/include/interp.hh	/^DECLARE_DO_FUN( do_music        );$/;"	v
do_mwhere	src/include/interp.hh	/^DECLARE_DO_FUN( do_mwhere       );$/;"	v
do_mwhere	src/wiz_gen.cc	/^void do_mwhere(Character *ch, String argument)$/;"	f
do_newbiekit	src/act_comm.cc	/^void do_newbiekit(Character *ch, String argument)$/;"	f
do_newbiekit	src/include/interp.hh	/^DECLARE_DO_FUN( do_newbiekit    );$/;"	v
do_newlock	src/include/interp.hh	/^DECLARE_DO_FUN( do_newlock      );$/;"	v
do_newlock	src/wiz_secure.cc	/^void do_newlock(Character *ch, String argument)$/;"	f
do_newpasswd	src/include/interp.hh	/^DECLARE_DO_FUN( do_newpasswd    );$/;"	v
do_newpasswd	src/wiz_secure.cc	/^void do_newpasswd(Character *ch, String argument)$/;"	f
do_next	src/Note.cc	/^void do_next(Character *ch, String argument)$/;"	f
do_next	src/include/interp.hh	/^DECLARE_DO_FUN( do_next         );$/;"	v
do_nofollow	src/act_info.cc	/^void do_nofollow(Character *ch, String argument)$/;"	f
do_nofollow	src/include/interp.hh	/^DECLARE_DO_FUN( do_nofollow     );$/;"	v
do_noloot	src/act_info.cc	/^void do_noloot(Character *ch, String argument)$/;"	f
do_noloot	src/include/interp.hh	/^DECLARE_DO_FUN( do_noloot       );$/;"	v
do_noreply	src/include/interp.hh	/^DECLARE_DO_FUN( do_noreply      );$/;"	v
do_noreply	src/wiz_gen.cc	/^void do_noreply(Character *ch, String argument)$/;"	f
do_north	src/act_move.cc	/^void do_north(Character *ch, String argument)$/;"	f
do_north	src/include/interp.hh	/^DECLARE_DO_FUN( do_north        );$/;"	v
do_nosummon	src/act_info.cc	/^void do_nosummon(Character *ch, String argument)$/;"	f
do_nosummon	src/include/interp.hh	/^DECLARE_DO_FUN( do_nosummon     );$/;"	v
do_note	src/Note.cc	/^void do_note(Character *ch, String argument)$/;"	f
do_note	src/include/interp.hh	/^DECLARE_DO_FUN( do_note         );$/;"	v
do_notify	src/act_comm.cc	/^void do_notify(Character *ch, String argument)$/;"	f
do_notify	src/include/interp.hh	/^DECLARE_DO_FUN( do_notify       );$/;"	v
do_oclone	src/include/interp.hh	/^DECLARE_DO_FUN( do_oclone       );$/;"	v
do_oclone	src/wiz_gen.cc	/^void do_oclone(Character *ch, String argument)$/;"	f
do_ofind	src/include/interp.hh	/^DECLARE_DO_FUN( do_ofind        );$/;"	v
do_ofind	src/wiz_gen.cc	/^void do_ofind(Character *ch, String argument)$/;"	f
do_old_next	src/Note.cc	/^void do_old_next(Character *ch)$/;"	f
do_oldscan	src/include/interp.hh	/^DECLARE_DO_FUN( do_oldscan      );$/;"	v
do_oldscan	src/scan.cc	/^void do_oldscan(Character *ch, String argument)$/;"	f
do_olevel	src/include/interp.hh	/^DECLARE_DO_FUN( do_olevel       );$/;"	v
do_olevel	src/wiz_gen.cc	/^void do_olevel(Character *ch, String argument)$/;"	f
do_oload	src/include/interp.hh	/^DECLARE_DO_FUN( do_oload        );$/;"	v
do_oload	src/wiz_gen.cc	/^void do_oload(Character *ch, String argument)$/;"	f
do_ooc	src/act_comm.cc	/^void do_ooc(Character *ch, String argument)$/;"	f
do_ooc	src/include/interp.hh	/^DECLARE_DO_FUN( do_ooc          );$/;"	v
do_open	src/act_move.cc	/^void do_open(Character *ch, String argument)$/;"	f
do_open	src/include/interp.hh	/^DECLARE_DO_FUN( do_open         );$/;"	v
do_order	src/act_comm.cc	/^void do_order(Character *ch, String argument)$/;"	f
do_order	src/include/interp.hh	/^DECLARE_DO_FUN( do_order        );$/;"	v
do_oset	src/include/interp.hh	/^DECLARE_DO_FUN( do_oset         );$/;"	v
do_oset	src/set-stat.cc	/^DECLARE_DO_FUN( do_oset );$/;"	v
do_oset	src/set-stat.cc	/^void do_oset(Character *ch, String argument)$/;"	f
do_ostat	src/include/interp.hh	/^DECLARE_DO_FUN( do_ostat        );$/;"	v
do_outfit	src/act_comm.cc	/^void do_outfit(Character *ch, String argument)$/;"	f
do_outfit	src/include/interp.hh	/^DECLARE_DO_FUN( do_outfit       );$/;"	v
do_owhere	src/include/interp.hh	/^DECLARE_DO_FUN( do_owhere       );$/;"	v
do_owhere	src/wiz_gen.cc	/^void do_owhere(Character *ch, String argument)$/;"	f
do_owner	src/include/interp.hh	/^DECLARE_DO_FUN( do_owner        );$/;"	v
do_owner	src/wiz_gen.cc	/^void do_owner(Character *ch, String argument)$/;"	f
do_page	src/channels.cc	/^void do_page(Character *ch, String argument)$/;"	f
do_page	src/include/interp.hh	/^DECLARE_DO_FUN( do_page         );$/;"	v
do_paintbow	src/include/interp.hh	/^DECLARE_DO_FUN( do_paintbow     );$/;"	v
do_paintbow	src/paint.cc	/^void do_paintbow(Character *ch, String argument)$/;"	f
do_pardon	src/include/interp.hh	/^DECLARE_DO_FUN( do_pardon       );$/;"	v
do_pardon	src/wiz_secure.cc	/^void do_pardon(Character *ch, String argument)$/;"	f
do_password	src/act_info.cc	/^void do_password(Character *ch, String argument)$/;"	f
do_password	src/include/interp.hh	/^DECLARE_DO_FUN( do_password     );$/;"	v
do_peace	src/include/interp.hh	/^DECLARE_DO_FUN( do_peace        );$/;"	v
do_peace	src/wiz_gen.cc	/^void do_peace(Character *ch, String argument)$/;"	f
do_pecho	src/include/interp.hh	/^DECLARE_DO_FUN( do_pecho        );$/;"	v
do_pecho	src/wiz_gen.cc	/^void do_pecho(Character *ch, String argument)$/;"	f
do_peek	src/act_info.cc	/^void do_peek(Character *ch, String argument)$/;"	f
do_peek	src/include/interp.hh	/^DECLARE_DO_FUN( do_peek         );$/;"	v
do_permit	src/include/interp.hh	/^DECLARE_DO_FUN( do_permit	);$/;"	v
do_permit	src/wiz_secure.cc	/^void do_permit(Character *ch, String argument)$/;"	f
do_personal	src/Note.cc	/^void do_personal(Character *ch, String argument)$/;"	f
do_personal	src/include/interp.hh	/^DECLARE_DO_FUN( do_personal     );$/;"	v
do_pet	src/act_comm.cc	/^void do_pet(Character *ch, String argument)$/;"	f
do_pet	src/include/interp.hh	/^DECLARE_DO_FUN( do_pet          );$/;"	v
do_pick	src/act_move.cc	/^void do_pick(Character *ch, String argument)$/;"	f
do_pick	src/include/interp.hh	/^DECLARE_DO_FUN( do_pick         );$/;"	v
do_ping	src/include/interp.hh	/^DECLARE_DO_FUN( do_ping         );$/;"	v
do_pipe	src/include/interp.hh	/^DECLARE_DO_FUN( do_pipe		);$/;"	v
do_pipe	src/wiz_coder.cc	/^void do_pipe(Character *ch, String argument)$/;"	f
do_pit	src/act_info.cc	/^void do_pit(Character *ch, String argument)$/;"	f
do_pit	src/include/interp.hh	/^DECLARE_DO_FUN( do_pit          );$/;"	v
do_pk	src/act_comm.cc	/^void do_pk(Character *ch, String argument)$/;"	f
do_pk	src/include/interp.hh	/^DECLARE_DO_FUN( do_pk           );$/;"	v
do_play	src/include/interp.hh	/^DECLARE_DO_FUN( do_play         );$/;"	v
do_play	src/music.cc	/^void do_play(Character *ch, String argument)$/;"	f
do_pmote	src/channels.cc	/^void do_pmote(Character *ch, String argument)$/;"	f
do_pmote	src/include/interp.hh	/^DECLARE_DO_FUN( do_pmote        );$/;"	v
do_pocket	src/include/interp.hh	/^DECLARE_DO_FUN( do_pocket	);$/;"	v
do_pocket	src/wiz_build.cc	/^void do_pocket(Character *ch, String argument)$/;"	f
do_pose	src/act_comm.cc	/^void do_pose(Character *ch, String argument)$/;"	f
do_pose	src/include/interp.hh	/^DECLARE_DO_FUN( do_pose         );$/;"	v
do_pour	src/act_obj.cc	/^void do_pour(Character *ch, String argument)$/;"	f
do_pour	src/include/interp.hh	/^DECLARE_DO_FUN( do_pour         );$/;"	v
do_practice	src/act_info.cc	/^void do_practice(Character *ch, String argument)$/;"	f
do_practice	src/include/interp.hh	/^DECLARE_DO_FUN( do_practice     );$/;"	v
do_pray	src/channels.cc	/^void do_pray(Character *ch, String argument)$/;"	f
do_pray	src/include/interp.hh	/^DECLARE_DO_FUN( do_pray         );$/;"	v
do_prefi	src/act_info.cc	/^void do_prefi(Character *ch, String argument)$/;"	f
do_prefi	src/include/interp.hh	/^DECLARE_DO_FUN( do_prefi        );$/;"	v
do_prefix	src/act_info.cc	/^void do_prefix(Character *ch, String argument)$/;"	f
do_prefix	src/include/interp.hh	/^DECLARE_DO_FUN( do_prefix       );$/;"	v
do_printhelps	src/help.cc	/^void do_printhelps(Character *ch, String argument)$/;"	f
do_printhelps	src/include/interp.hh	/^DECLARE_DO_FUN( do_printhelps	);$/;"	v
do_private	src/act_comm.cc	/^void do_private(Character *ch, String argument)$/;"	f
do_private	src/include/interp.hh	/^DECLARE_DO_FUN( do_private      );$/;"	v
do_prompt	src/act_info.cc	/^void do_prompt(Character *ch, String argument)$/;"	f
do_prompt	src/include/interp.hh	/^DECLARE_DO_FUN( do_prompt       );$/;"	v
do_propose	src/include/interp.hh	/^DECLARE_DO_FUN( do_propose	);$/;"	v
do_propose	src/marry.cc	/^void do_propose(Character *ch, String argument)$/;"	f
do_protect	src/include/interp.hh	/^DECLARE_DO_FUN( do_protect      );$/;"	v
do_protect	src/wiz_secure.cc	/^void do_protect(Character *ch, String argument)$/;"	f
do_pstat	src/include/interp.hh	/^DECLARE_DO_FUN( do_pstat        );$/;"	v
do_pstat	src/set-stat.cc	/^void do_pstat(Character *ch, String argument)$/;"	f
do_punish	src/act_comm.cc	/^void do_punish(Character *ch, String argument)$/;"	f
do_punish	src/include/interp.hh	/^DECLARE_DO_FUN( do_punish	);$/;"	v
do_purge	src/include/interp.hh	/^DECLARE_DO_FUN( do_purge        );$/;"	v
do_purge	src/wiz_gen.cc	/^void do_purge(Character *ch, String argument)$/;"	f
do_push	src/act_move.cc	/^void do_push(Character *ch, String argument)$/;"	f
do_push	src/include/interp.hh	/^DECLARE_DO_FUN( do_push         );$/;"	v
do_put	src/act_obj.cc	/^void do_put(Character *ch, String argument)$/;"	f
do_put	src/include/interp.hh	/^DECLARE_DO_FUN( do_put          );$/;"	v
do_qpconv	src/include/interp.hh	/^DECLARE_DO_FUN( do_qpconv	);$/;"	v
do_qpconv	src/wiz_gen.cc	/^void do_qpconv(Character *ch, String argument)$/;"	f
do_qtell	src/channels.cc	/^void do_qtell(Character *ch, String argument)$/;"	f
do_qtell	src/include/interp.hh	/^DECLARE_DO_FUN( do_qtell        );$/;"	v
do_quaff	src/act_obj.cc	/^void do_quaff(Character *ch, String argument)$/;"	f
do_quaff	src/include/interp.hh	/^DECLARE_DO_FUN( do_quaff        );$/;"	v
do_query	src/channels.cc	/^void do_query(Character *ch, String argument)$/;"	f
do_query	src/include/interp.hh	/^DECLARE_DO_FUN( do_query        );$/;"	v
do_quest	src/include/interp.hh	/^DECLARE_DO_FUN( do_quest        );$/;"	v
do_quest	src/quest.cc	/^void do_quest(Character *ch, String argument)$/;"	f
do_question	src/channels.cc	/^void do_question(Character *ch, String argument)$/;"	f
do_question	src/include/interp.hh	/^DECLARE_DO_FUN( do_question     );$/;"	v
do_qui	src/act_comm.cc	/^void do_qui(Character *ch, String argument)$/;"	f
do_qui	src/include/interp.hh	/^DECLARE_DO_FUN( do_qui          );$/;"	v
do_quiet	src/act_comm.cc	/^void do_quiet(Character *ch, String argument)$/;"	f
do_quiet	src/include/interp.hh	/^DECLARE_DO_FUN( do_quiet        );$/;"	v
do_quit	src/act_comm.cc	/^void do_quit(Character *ch, String argument)$/;"	f
do_quit	src/include/interp.hh	/^DECLARE_DO_FUN( do_quit         );$/;"	v
do_qwest	src/channels.cc	/^void do_qwest(Character *ch, String argument)$/;"	f
do_qwest	src/include/interp.hh	/^DECLARE_DO_FUN( do_qwest        );$/;"	v
do_raffset	src/include/interp.hh	/^DECLARE_DO_FUN( do_raffset      );$/;"	v
do_raffset	src/set-stat.cc	/^DECLARE_DO_FUN( do_raffset );$/;"	v
do_raffset	src/set-stat.cc	/^void do_raffset(Character *ch, String argument)$/;"	f
do_rage	src/fight.cc	/^void do_rage(Character *ch, String argument)$/;"	f
do_rage	src/include/interp.hh	/^DECLARE_DO_FUN( do_rage         );$/;"	v
do_rank	src/act_info.cc	/^void do_rank(Character *ch, String argument)$/;"	f
do_rank	src/include/interp.hh	/^DECLARE_DO_FUN( do_rank         );$/;"	v
do_rchat	src/include/interp.hh	/^DECLARE_DO_FUN( do_rchat        );$/;"	v
do_rconnect	src/include/interp.hh	/^DECLARE_DO_FUN( do_rconnect     );$/;"	v
do_rdebug	src/include/interp.hh	/^DECLARE_DO_FUN( do_rdebug       );$/;"	v
do_rdisconnect	src/include/interp.hh	/^DECLARE_DO_FUN( do_rdisconnect  );$/;"	v
do_read	src/include/interp.hh	/^DECLARE_DO_FUN( do_read         );$/;"	v
do_read_finger	src/include/interp.hh	/^DECLARE_DO_FUN( do_read_finger  );$/;"	v
do_reboo	src/include/interp.hh	/^DECLARE_DO_FUN( do_reboo        );$/;"	v
do_reboo	src/wiz_coder.cc	/^void do_reboo(Character *ch, String argument)$/;"	f
do_reboot	src/include/interp.hh	/^DECLARE_DO_FUN( do_reboot       );$/;"	v
do_reboot	src/wiz_coder.cc	/^void do_reboot(Character *ch, String argument)$/;"	f
do_recall	src/act_move.cc	/^void do_recall(Character *ch, String argument)$/;"	f
do_recall	src/include/interp.hh	/^DECLARE_DO_FUN( do_recall       );$/;"	v
do_recho	src/include/interp.hh	/^DECLARE_DO_FUN( do_recho        );$/;"	v
do_recho	src/wiz_gen.cc	/^void do_recho(Character *ch, String argument)$/;"	f
do_recite	src/act_obj.cc	/^void do_recite(Character *ch, String argument)$/;"	f
do_recite	src/include/interp.hh	/^DECLARE_DO_FUN( do_recite       );$/;"	v
do_reject	src/include/interp.hh	/^DECLARE_DO_FUN( do_reject	);$/;"	v
do_reject	src/marry.cc	/^void do_reject(Character *ch, String argument)$/;"	f
do_relevel	src/include/interp.hh	/^DECLARE_DO_FUN( do_relevel      );$/;"	v
do_relevel	src/wiz_coder.cc	/^void do_relevel(Character *ch, String argument)$/;"	f
do_reload	src/paint.cc	/^void do_reload(Character *ch)$/;"	f
do_relocate	src/act_move.cc	/^void do_relocate(Character *ch, String argument)$/;"	f
do_relocate	src/include/interp.hh	/^DECLARE_DO_FUN( do_relocate     );$/;"	v
do_remexit	src/include/interp.hh	/^DECLARE_DO_FUN( do_remexit	);$/;"	v
do_remexit	src/wiz_coder.cc	/^void do_remexit(Character *ch, String argument)$/;"	f
do_remort	src/include/interp.hh	/^DECLARE_DO_FUN( do_remort       );$/;"	v
do_remort	src/remort.cc	/^void do_remort(Character *ch, String argument)$/;"	f
do_remove	src/act_obj.cc	/^void do_remove(Character *ch, String argument)$/;"	f
do_remove	src/include/interp.hh	/^DECLARE_DO_FUN( do_remove       );$/;"	v
do_rename	src/act_obj.cc	/^void do_rename(Character *ch, String argument)$/;"	f
do_rename	src/include/interp.hh	/^DECLARE_DO_FUN( do_rename       );$/;"	v
do_repair	src/include/interp.hh	/^DECLARE_DO_FUN( do_repair       );$/;"	v
do_repair	src/special.cc	/^void do_repair(Character *ch, String argument)$/;"	f
do_replay	src/channels.cc	/^void do_replay(Character *ch, String argument)$/;"	f
do_replay	src/include/interp.hh	/^DECLARE_DO_FUN( do_replay       );$/;"	v
do_reply	src/channels.cc	/^void do_reply(Character *ch, String argument)$/;"	f
do_reply	src/include/interp.hh	/^DECLARE_DO_FUN( do_reply        );$/;"	v
do_report	src/act_info.cc	/^void do_report(Character *ch, String argument)$/;"	f
do_report	src/include/interp.hh	/^DECLARE_DO_FUN( do_report       );$/;"	v
do_rescue	src/fight.cc	/^void do_rescue(Character *ch, String argument)$/;"	f
do_rescue	src/include/interp.hh	/^DECLARE_DO_FUN( do_rescue       );$/;"	v
do_rest	src/act_move.cc	/^void do_rest(Character *ch, String argument)$/;"	f
do_rest	src/include/interp.hh	/^DECLARE_DO_FUN( do_rest         );$/;"	v
do_restore	src/include/interp.hh	/^DECLARE_DO_FUN( do_restore      );$/;"	v
do_restore	src/wiz_gen.cc	/^void do_restore(Character *ch, String argument)$/;"	f
do_return	src/include/interp.hh	/^DECLARE_DO_FUN( do_return       );$/;"	v
do_return	src/wiz_quest.cc	/^void do_return(Character *ch, String argument)$/;"	f
do_revoke	src/include/interp.hh	/^DECLARE_DO_FUN( do_revoke	);$/;"	v
do_revoke	src/wiz_secure.cc	/^void do_revoke(Character *ch, String argument)$/;"	f
do_ridea	src/act_comm.cc	/^void do_ridea(Character *ch, String argument)$/;"	f
do_ridea	src/include/interp.hh	/^DECLARE_DO_FUN( do_ridea	);$/;"	v
do_rignore	src/include/interp.hh	/^DECLARE_DO_FUN( do_rignore      );$/;"	v
do_riposte	src/fight.cc	/^void do_riposte(Character *victim, Character *ch)$/;"	f
do_rlist	src/include/interp.hh	/^DECLARE_DO_FUN( do_rlist        );$/;"	v
do_roleplay	src/Note.cc	/^void do_roleplay(Character *ch, String argument)$/;"	f
do_roleplay	src/include/interp.hh	/^DECLARE_DO_FUN( do_roleplay     );$/;"	v
do_roomexits	src/include/interp.hh	/^DECLARE_DO_FUN( do_roomexits    );$/;"	v
do_roomexits	src/wiz_build.cc	/^void do_roomexits(Character *ch, String argument)$/;"	f
do_roomlist	src/include/interp.hh	/^DECLARE_DO_FUN( do_roomlist     );$/;"	v
do_roomlist	src/wiz_build.cc	/^void do_roomlist(Character *ch, String argument)$/;"	f
do_rotate	src/fight.cc	/^void do_rotate(Character *ch, String argument)$/;"	f
do_rotate	src/include/interp.hh	/^DECLARE_DO_FUN( do_rotate       );$/;"	v
do_rppaward	src/include/interp.hh	/^DECLARE_DO_FUN( do_rppaward     );$/;"	v
do_rppaward	src/wiz_quest.cc	/^void do_rppaward(Character *ch, String argument)$/;"	f
do_rreply	src/include/interp.hh	/^DECLARE_DO_FUN( do_rreply       );$/;"	v
do_rset	src/include/interp.hh	/^DECLARE_DO_FUN( do_rset         );$/;"	v
do_rset	src/set-stat.cc	/^DECLARE_DO_FUN( do_rset );$/;"	v
do_rset	src/set-stat.cc	/^void do_rset(Character *ch, String argument)$/;"	f
do_rsockets	src/include/interp.hh	/^DECLARE_DO_FUN( do_rsockets     );$/;"	v
do_rstat	src/include/interp.hh	/^DECLARE_DO_FUN( do_rstat        );$/;"	v
do_rtell	src/include/interp.hh	/^DECLARE_DO_FUN( do_rtell        );$/;"	v
do_rules	src/act_info.cc	/^void do_rules(Character *ch, String argument)$/;"	f
do_rules	src/include/interp.hh	/^DECLARE_DO_FUN( do_rules        );$/;"	v
do_rwhere	src/include/interp.hh	/^DECLARE_DO_FUN( do_rwhere       );$/;"	v
do_rwhere	src/wiz_gen.cc	/^void do_rwhere(Character *ch, String argument)$/;"	f
do_rwho	src/include/interp.hh	/^DECLARE_DO_FUN( do_rwho         );$/;"	v
do_sacrifice	src/act_obj.cc	/^void do_sacrifice(Character *ch, String argument)$/;"	f
do_sacrifice	src/include/interp.hh	/^DECLARE_DO_FUN( do_sacrifice    );$/;"	v
do_save	src/act_comm.cc	/^void do_save(Character *ch, String argument)$/;"	f
do_save	src/include/interp.hh	/^DECLARE_DO_FUN( do_save         );$/;"	v
do_say	src/channels.cc	/^void do_say(Character *ch, String argument)$/;"	f
do_say	src/include/interp.hh	/^DECLARE_DO_FUN( do_say          );$/;"	v
do_scan	src/include/interp.hh	/^DECLARE_DO_FUN( do_scan         );$/;"	v
do_scan	src/scan.cc	/^void do_scan(Character *ch, String argument)$/;"	f
do_scatter	src/include/interp.hh	/^DECLARE_DO_FUN( do_scatter	);$/;"	v
do_scatter	src/wiz_quest.cc	/^void do_scatter(Character *ch, String argument)$/;"	f
do_scon	src/act_info.cc	/^void do_scon(Character *ch, String argument)$/;"	f
do_scon	src/include/interp.hh	/^DECLARE_DO_FUN( do_scon         );$/;"	v
do_score	src/act_info.cc	/^void do_score(Character *ch, String argument)$/;"	f
do_score	src/include/interp.hh	/^DECLARE_DO_FUN( do_score        );$/;"	v
do_scribe	src/act_obj.cc	/^void do_scribe(Character *ch, String argument)$/;"	f
do_scribe	src/include/interp.hh	/^DECLARE_DO_FUN( do_scribe       );$/;"	v
do_scroll	src/act_info.cc	/^void do_scroll(Character *ch, String argument)$/;"	f
do_scroll	src/include/interp.hh	/^DECLARE_DO_FUN( do_scroll       );$/;"	v
do_second	src/act_obj.cc	/^void do_second(Character *ch, String argument)$/;"	f
do_second	src/include/interp.hh	/^DECLARE_DO_FUN( do_second       );$/;"	v
do_secure	src/include/interp.hh	/^DECLARE_DO_FUN( do_secure       );$/;"	v
do_secure	src/wiz_gen.cc	/^void do_secure(Character *ch, String argument)$/;"	f
do_sedit	src/include/interp.hh	/^DECLARE_DO_FUN( do_sedit        );$/;"	v
do_sedit	src/social.cc	/^void do_sedit(Character *ch, String argument)$/;"	f
do_sell	src/act_obj.cc	/^void do_sell(Character *ch, String argument)$/;"	f
do_sell	src/include/interp.hh	/^DECLARE_DO_FUN( do_sell         );$/;"	v
do_send_announce	src/channels.cc	/^void do_send_announce(Character *ch, String argument)$/;"	f
do_send_announce	src/include/interp.hh	/^DECLARE_DO_FUN( do_send_announce);$/;"	v
do_set	src/include/interp.hh	/^DECLARE_DO_FUN( do_set          );$/;"	v
do_set	src/set-stat.cc	/^void do_set(Character *ch, String argument)$/;"	f
do_setgamein	src/include/interp.hh	/^DECLARE_DO_FUN( do_setgamein    );$/;"	v
do_setgamein	src/wiz_gen.cc	/^void do_setgamein(Character *ch, String argument)$/;"	f
do_setgameout	src/include/interp.hh	/^DECLARE_DO_FUN( do_setgameout   );$/;"	v
do_setgameout	src/wiz_gen.cc	/^void do_setgameout(Character *ch, String argument)$/;"	f
do_shadow	src/fight.cc	/^void do_shadow(Character *ch, String argument)$/;"	f
do_shadow	src/include/interp.hh	/^DECLARE_DO_FUN( do_shadow       );$/;"	v
do_shoot	src/fight.cc	/^void do_shoot(Character *ch, String argument)$/;"	f
do_shoot	src/include/interp.hh	/^DECLARE_DO_FUN( do_shoot          );$/;"	v
do_show	src/act_info.cc	/^void do_show(Character *ch, String argument)$/;"	f
do_show	src/include/interp.hh	/^DECLARE_DO_FUN( do_show         );$/;"	v
do_showflags	src/act_info.cc	/^void do_showflags(Character *ch, String argument)$/;"	f
do_showflags	src/include/interp.hh	/^DECLARE_DO_FUN( do_showflags    );$/;"	v
do_showlast	src/act_comm.cc	/^void do_showlast(Character *ch, String argument)$/;"	f
do_showlast	src/include/interp.hh	/^DECLARE_DO_FUN( do_showlast     );$/;"	v
do_showlost	src/act_info.cc	/^void do_showlost(Character *ch, String argument)$/;"	f
do_showlost	src/include/interp.hh	/^DECLARE_DO_FUN( do_showlost     );$/;"	v
do_showraff	src/act_comm.cc	/^void do_showraff(Character *ch, String argument)$/;"	f
do_showraff	src/include/interp.hh	/^DECLARE_DO_FUN( do_showraff     );$/;"	v
do_shutdow	src/include/interp.hh	/^DECLARE_DO_FUN( do_shutdow      );$/;"	v
do_shutdow	src/wiz_coder.cc	/^void do_shutdow(Character *ch, String argument)$/;"	f
do_shutdown	src/include/interp.hh	/^DECLARE_DO_FUN( do_shutdown     );$/;"	v
do_shutdown	src/wiz_coder.cc	/^void do_shutdown(Character *ch, String argument)$/;"	f
do_sing	src/fight.cc	/^void do_sing(Character *ch, String argument)$/;"	f
do_sing	src/include/interp.hh	/^DECLARE_DO_FUN( do_sing         );$/;"	v
do_sit	src/act_move.cc	/^void do_sit(Character *ch, String argument)$/;"	f
do_sit	src/include/interp.hh	/^DECLARE_DO_FUN( do_sit          );$/;"	v
do_skillpoint	src/include/interp.hh	/^DECLARE_DO_FUN( do_skillpoint   );$/;"	v
do_skillpoint	src/wiz_quest.cc	/^void do_skillpoint(Character *ch, String argument)$/;"	f
do_skills	src/include/interp.hh	/^DECLARE_DO_FUN( do_skills       );$/;"	v
do_skills	src/skills.cc	/^void do_skills(Character *ch, String argument)$/;"	f
do_sla	src/fight.cc	/^void do_sla(Character *ch, String argument)$/;"	f
do_sla	src/include/interp.hh	/^DECLARE_DO_FUN( do_sla          );$/;"	v
do_slay	src/fight.cc	/^void do_slay(Character *ch, String argument)$/;"	f
do_slay	src/include/interp.hh	/^DECLARE_DO_FUN( do_slay         );$/;"	v
do_sleep	src/act_move.cc	/^void do_sleep(Character *ch, String argument)$/;"	f
do_sleep	src/include/interp.hh	/^DECLARE_DO_FUN( do_sleep        );$/;"	v
do_slookup	src/include/interp.hh	/^DECLARE_DO_FUN( do_slookup      );$/;"	v
do_slookup	src/wiz_coder.cc	/^void do_slookup(Character *ch, String argument)$/;"	f
do_smite	src/include/interp.hh	/^DECLARE_DO_FUN( do_smite        );$/;"	v
do_smite	src/wiz_gen.cc	/^do_smite(Character *ch, String argument)$/;"	f
do_smote	src/channels.cc	/^void do_smote(Character *ch, String argument)$/;"	f
do_smote	src/include/interp.hh	/^DECLARE_DO_FUN( do_smote        );$/;"	v
do_sneak	src/act_move.cc	/^void do_sneak(Character *ch, String argument)$/;"	f
do_sneak	src/include/interp.hh	/^DECLARE_DO_FUN( do_sneak        );$/;"	v
do_snoop	src/include/interp.hh	/^DECLARE_DO_FUN( do_snoop        );$/;"	v
do_snoop	src/wiz_secure.cc	/^void do_snoop(Character *ch, String argument)$/;"	f
do_socials	src/act_info.cc	/^void do_socials(Character *ch, String argument)$/;"	f
do_socials	src/include/interp.hh	/^DECLARE_DO_FUN( do_socials      );$/;"	v
do_sockets	src/include/interp.hh	/^DECLARE_DO_FUN( do_sockets      );$/;"	v
do_sockets	src/wiz_gen.cc	/^void do_sockets(Character *ch, String argument)$/;"	f
do_south	src/act_move.cc	/^void do_south(Character *ch, String argument)$/;"	f
do_south	src/include/interp.hh	/^DECLARE_DO_FUN( do_south        );$/;"	v
do_spells	src/include/interp.hh	/^DECLARE_DO_FUN( do_spells       );$/;"	v
do_spells	src/skills.cc	/^void do_spells(Character *ch, String argument)$/;"	f
do_splat	src/paint.cc	/^void do_splat(Character *ch, String argument)$/;"	f
do_split	src/act_comm.cc	/^void do_split(Character *ch, String argument)$/;"	f
do_split	src/include/interp.hh	/^DECLARE_DO_FUN( do_split        );$/;"	v
do_spousegate	src/act_move.cc	/^void do_spousegate(Character *ch, String argument)$/;"	f
do_spousegate	src/include/interp.hh	/^DECLARE_DO_FUN( do_spousegate   );$/;"	v
do_spousetalk	src/include/interp.hh	/^DECLARE_DO_FUN( do_spousetalk   );$/;"	v
do_spousetalk	src/marry.cc	/^void do_spousetalk(Character *ch, String argument)$/;"	f
do_sset	src/include/interp.hh	/^DECLARE_DO_FUN( do_sset         );$/;"	v
do_sset	src/set-stat.cc	/^DECLARE_DO_FUN( do_sset );$/;"	v
do_sset	src/set-stat.cc	/^void do_sset(Character *ch, String argument)$/;"	f
do_stand	src/act_move.cc	/^void do_stand(Character *ch, String argument)$/;"	f
do_stand	src/include/interp.hh	/^DECLARE_DO_FUN( do_stand        );$/;"	v
do_stat	src/include/interp.hh	/^DECLARE_DO_FUN( do_stat         );$/;"	v
do_stat	src/set-stat.cc	/^void do_stat(Character *ch, String argument)$/;"	f
do_steal	src/act_obj.cc	/^void do_steal(Character *ch, String argument)$/;"	f
do_steal	src/include/interp.hh	/^DECLARE_DO_FUN( do_steal        );$/;"	v
do_storage	src/include/interp.hh	/^DECLARE_DO_FUN( do_storage	);$/;"	v
do_storage	src/wiz_gen.cc	/^void do_storage(Character *ch, String argument)$/;"	f
do_story	src/act_info.cc	/^void do_story(Character *ch, String argument)$/;"	f
do_story	src/include/interp.hh	/^DECLARE_DO_FUN( do_story        );$/;"	v
do_string	src/include/interp.hh	/^DECLARE_DO_FUN( do_string       );$/;"	v
do_string	src/wiz_quest.cc	/^void do_string(Character *ch, String argument)$/;"	f
do_strongbox	src/include/interp.hh	/^DECLARE_DO_FUN( do_strongbox    );$/;"	v
do_strongbox	src/wiz_secure.cc	/^void do_strongbox(Character *ch, String argument)$/;"	f
do_superwiz	src/include/interp.hh	/^DECLARE_DO_FUN( do_superwiz     );$/;"	v
do_superwiz	src/wiz_gen.cc	/^void do_superwiz(Character *ch, String argument)$/;"	f
do_swho	src/act_info.cc	/^void do_swho(Character *ch, String argument)$/;"	f
do_swho	src/include/interp.hh	/^DECLARE_DO_FUN( do_swho         );$/;"	v
do_switch	src/include/interp.hh	/^DECLARE_DO_FUN( do_switch       );$/;"	v
do_switch	src/wiz_quest.cc	/^void do_switch(Character *ch, String argument)$/;"	f
do_tail	src/include/interp.hh	/^DECLARE_DO_FUN( do_tail         );$/;"	v
do_tail	src/wiz_secure.cc	/^void do_tail(Character *ch, String argument)$/;"	f
do_tell	src/channels.cc	/^void do_tell(Character *ch, String argument)$/;"	f
do_tell	src/include/interp.hh	/^DECLARE_DO_FUN( do_tell         );$/;"	v
do_testpose	src/act_comm.cc	/^void do_testpose(Character *ch, String argument)$/;"	f
do_testpose	src/include/interp.hh	/^DECLARE_DO_FUN( do_testpose     );$/;"	v
do_time	src/act_info.cc	/^void do_time(Character *ch, String argument)$/;"	f
do_time	src/include/interp.hh	/^DECLARE_DO_FUN( do_time         );$/;"	v
do_title	src/act_info.cc	/^void do_title(Character *ch, String argument)$/;"	f
do_title	src/include/interp.hh	/^DECLARE_DO_FUN( do_title        );$/;"	v
do_touch	src/act_obj.cc	/^void do_touch(Character *ch, String argument) {$/;"	f
do_touch	src/include/interp.hh	/^DECLARE_DO_FUN( do_touch        );$/;"	v
do_trade	src/Note.cc	/^void do_trade(Character *ch, String argument)$/;"	f
do_trade	src/include/interp.hh	/^DECLARE_DO_FUN( do_trade	);$/;"	v
do_train	src/act_move.cc	/^void do_train(Character *ch, String argument)$/;"	f
do_train	src/include/interp.hh	/^DECLARE_DO_FUN( do_train        );$/;"	v
do_transfer	src/include/interp.hh	/^DECLARE_DO_FUN( do_transfer     );$/;"	v
do_transfer	src/wiz_gen.cc	/^void do_transfer(Character *ch, String argument)$/;"	f
do_trip	src/fight.cc	/^void do_trip(Character *ch, String argument)$/;"	f
do_trip	src/include/interp.hh	/^DECLARE_DO_FUN( do_trip         );$/;"	v
do_typelist	src/flag.cc	/^void do_typelist(Character *ch, String argument)$/;"	f
do_typelist	src/include/interp.hh	/^DECLARE_DO_FUN( do_typelist     );$/;"	v
do_typo	src/act_comm.cc	/^void do_typo(Character *ch, String argument)$/;"	f
do_typo	src/include/interp.hh	/^DECLARE_DO_FUN( do_typo         );$/;"	v
do_unalias	src/alias.cc	/^void do_unalias(Character *ch, String argument)$/;"	f
do_unalias	src/include/interp.hh	/^DECLARE_DO_FUN( do_unalias      );$/;"	v
do_undeny	src/include/interp.hh	/^DECLARE_DO_FUN( do_undeny	);$/;"	v
do_undeny	src/wiz_secure.cc	/^void do_undeny(Character *ch, String argument)$/;"	f
do_unjoin	src/act_info.cc	/^void do_unjoin(Character *ch, String argument)$/;"	f
do_unjoin	src/include/interp.hh	/^DECLARE_DO_FUN( do_unjoin       );$/;"	v
do_unlock	src/act_move.cc	/^void do_unlock(Character *ch, String argument)$/;"	f
do_unlock	src/include/interp.hh	/^DECLARE_DO_FUN( do_unlock       );$/;"	v
do_unread	src/Note.cc	/^void do_unread(Character *ch, String argument)$/;"	f
do_unread	src/include/interp.hh	/^DECLARE_DO_FUN( do_unread       );$/;"	v
do_up	src/act_move.cc	/^void do_up(Character *ch, String argument)$/;"	f
do_up	src/include/interp.hh	/^DECLARE_DO_FUN( do_up           );$/;"	v
do_update	src/include/interp.hh	/^DECLARE_DO_FUN( do_update	);$/;"	v
do_value	src/act_obj.cc	/^void do_value(Character *ch, String argument)$/;"	f
do_value	src/include/interp.hh	/^DECLARE_DO_FUN( do_value        );$/;"	v
do_video	src/config.cc	/^void do_video(Character *ch, String argument)$/;"	f
do_video	src/include/interp.hh	/^DECLARE_DO_FUN( do_video        );$/;"	v
do_violate	src/include/interp.hh	/^DECLARE_DO_FUN( do_violate      );$/;"	v
do_violate	src/wiz_gen.cc	/^void do_violate(Character *ch, String argument)$/;"	f
do_visible	src/act_move.cc	/^void do_visible(Character *ch, String argument)$/;"	f
do_visible	src/include/interp.hh	/^DECLARE_DO_FUN( do_visible      );$/;"	v
do_vlist	src/include/interp.hh	/^DECLARE_DO_FUN( do_vlist        );$/;"	v
do_vlist	src/wiz_build.cc	/^void do_vlist(Character *ch, String argument)$/;"	f
do_vnum	src/include/interp.hh	/^DECLARE_DO_FUN( do_vnum         );$/;"	v
do_vnum	src/wiz_gen.cc	/^void do_vnum(Character *ch, String argument)$/;"	f
do_vt100	src/include/interp.hh	/^DECLARE_DO_FUN( do_vt100        );$/;"	v
do_wake	src/act_move.cc	/^void do_wake(Character *ch, String argument)$/;"	f
do_wake	src/include/interp.hh	/^DECLARE_DO_FUN( do_wake         );$/;"	v
do_war	src/War.cc	/^void do_war(Character *ch, String argument)$/;"	f
do_war	src/include/interp.hh	/^DECLARE_DO_FUN( do_war		);$/;"	v
do_warp	src/act_move.cc	/^void do_warp(Character *ch, String argument)$/;"	f
do_warp	src/include/interp.hh	/^DECLARE_DO_FUN( do_warp         );$/;"	v
do_wbb	src/act_comm.cc	/^void do_wbb(Character *ch, String argument)$/;"	f
do_wbb	src/include/interp.hh	/^DECLARE_DO_FUN( do_wbb		);$/;"	v
do_wbi	src/act_comm.cc	/^void do_wbi(Character *ch, String argument)$/;"	f
do_wbi	src/include/interp.hh	/^DECLARE_DO_FUN( do_wbi		);$/;"	v
do_wear	src/act_obj.cc	/^void do_wear(Character *ch, String argument)$/;"	f
do_wear	src/include/interp.hh	/^DECLARE_DO_FUN( do_wear         );$/;"	v
do_weather	src/act_info.cc	/^void do_weather(Character *ch, String argument)$/;"	f
do_weather	src/include/interp.hh	/^DECLARE_DO_FUN( do_weather      );$/;"	v
do_weddingring	src/act_obj.cc	/^void do_weddingring(Character *ch, String argument)$/;"	f
do_weddingring	src/include/interp.hh	/^DECLARE_DO_FUN( do_weddingring  );$/;"	v
do_west	src/act_move.cc	/^void do_west(Character *ch, String argument)$/;"	f
do_west	src/include/interp.hh	/^DECLARE_DO_FUN( do_west         );$/;"	v
do_where	src/act_info.cc	/^void do_where(Character *ch, String argument)$/;"	f
do_where	src/include/interp.hh	/^DECLARE_DO_FUN( do_where        );$/;"	v
do_whisper	src/channels.cc	/^void do_whisper(Character *ch, String argument)$/;"	f
do_whisper	src/include/interp.hh	/^DECLARE_DO_FUN( do_whisper      );$/;"	v
do_who	src/act_info.cc	/^void do_who(Character *ch, String argument)$/;"	f
do_who	src/include/interp.hh	/^DECLARE_DO_FUN( do_who          );$/;"	v
do_whois	src/act_info.cc	/^void do_whois(Character *ch, String argument)$/;"	f
do_whois	src/include/interp.hh	/^DECLARE_DO_FUN( do_whois        );$/;"	v
do_wimpy	src/act_info.cc	/^void do_wimpy(Character *ch, String argument)$/;"	f
do_wimpy	src/include/interp.hh	/^DECLARE_DO_FUN( do_wimpy        );$/;"	v
do_withdraw	src/bank.cc	/^void do_withdraw(Character *ch, String argument)$/;"	f
do_withdraw	src/include/interp.hh	/^DECLARE_DO_FUN( do_withdraw     );$/;"	v
do_wizgroup	src/include/interp.hh	/^DECLARE_DO_FUN( do_wizgroup     );$/;"	v
do_wizgroup	src/wiz_gen.cc	/^void do_wizgroup(Character *ch, String argument)$/;"	f
do_wizhelp	src/include/interp.hh	/^DECLARE_DO_FUN( do_wizhelp      );$/;"	v
do_wizhelp	src/interp.cc	/^void do_wizhelp(Character *ch, String argument)$/;"	f
do_wizify	src/include/interp.hh	/^DECLARE_DO_FUN( do_wizify       );$/;"	v
do_wizify	src/wiz_gen.cc	/^void do_wizify(Character *ch, String argument)$/;"	f
do_wizlist	src/act_info.cc	/^void do_wizlist(Character *ch, String argument)$/;"	f
do_wizlist	src/include/interp.hh	/^DECLARE_DO_FUN( do_wizlist      );$/;"	v
do_wizlock	src/include/interp.hh	/^DECLARE_DO_FUN( do_wizlock      );$/;"	v
do_wizlock	src/wiz_coder.cc	/^void do_wizlock(Character *ch, String argument)$/;"	f
do_wiznet	src/config.cc	/^void do_wiznet(Character *ch, String argument)$/;"	f
do_wiznet	src/include/interp.hh	/^DECLARE_DO_FUN( do_wiznet       );$/;"	v
do_work	src/act_comm.cc	/^void do_work(Character *ch, String argument)$/;"	f
do_work	src/include/interp.hh	/^DECLARE_DO_FUN( do_work		);$/;"	v
do_worth	src/act_info.cc	/^void do_worth(Character *ch, String argument)$/;"	f
do_worth	src/include/interp.hh	/^DECLARE_DO_FUN( do_worth        );$/;"	v
do_yell	src/channels.cc	/^void do_yell(Character *ch, String argument)$/;"	f
do_yell	src/include/interp.hh	/^DECLARE_DO_FUN( do_yell         );$/;"	v
do_zap	src/act_obj.cc	/^void do_zap(Character *ch, String argument)$/;"	f
do_zap	src/include/interp.hh	/^DECLARE_DO_FUN( do_zap          );$/;"	v
do_zecho	src/include/interp.hh	/^DECLARE_DO_FUN( do_zecho        );$/;"	v
do_zecho	src/wiz_gen.cc	/^void do_zecho(Character *ch, String argument)$/;"	f
dodge	src/include/skill/Type.hh	/^    dodge,$/;"	m	class:skill::type
donated	src/include/Object.hh	/^    long            donated = 0; \/\/ timestamp when an obj was donated, for pit cleanup$/;"	m	class:Object
donation_pit	src/include/World.hh	/^	Object *donation_pit = nullptr;;$/;"	m	class:World
dragon	src/special.cc	/^bool dragon(Character *ch, skill::type sn)$/;"	f
dual_second	src/include/skill/Type.hh	/^    dual_second,$/;"	m	class:skill::type
dual_wield	src/include/skill/Type.hh	/^    dual_wield,$/;"	m	class:skill::type
duel	src/include/Player.hh	/^    Duel *	        duel = nullptr;$/;"	m	class:Player
duel_announce	src/duel.cc	/^void duel_announce(char *buf, Duel *duel)$/;"	f
duel_kill	src/duel.cc	/^void duel_kill(Character *victim)$/;"	f
duel_table_head	src/duel.cc	/^Duel *duel_table_head;$/;"	v
duel_table_tail	src/duel.cc	/^Duel *duel_table_tail;$/;"	v
duel_update	src/duel.cc	/^void duel_update()$/;"	f
duration	src/include/affect/Affect.hh	/^    int              duration = 0;$/;"	m	class:affect::Affect
e	src/scripts/fix_pcindex.py	/^  e = mudstr.parse_flags('e')$/;"	v
earthquake	src/include/skill/Type.hh	/^    earthquake,$/;"	m	class:skill::type
echo_off	src/comm.cc	/^void echo_off(Descriptor *d) {$/;"	f
echo_off_str	src/comm.cc	/^const unsigned char echo_off_str [] = { IAC, WILL, TELOPT_ECHO, '\\0' };$/;"	v
echo_on	src/comm.cc	/^void echo_on(Descriptor *d) {$/;"	f
echo_on_str	src/comm.cc	/^const unsigned char echo_on_str  [] = { IAC, WONT, TELOPT_ECHO, '\\0' };$/;"	v
ed	src/edit.cc	/^static Edit *ed;$/;"	v	file:
edit	src/include/Character.hh	/^    Edit *              edit = nullptr;         \/* -- Elrac *\/$/;"	m	class:Character
edit_backup	src/include/Edit.hh	/^    char edit_backup[MAX_STRING_LENGTH] = {0};$/;"	m	class:Edit
edit_cancel	src/edit.cc	/^static void edit_cancel(Character *ch, const String& argument)$/;"	f	file:
edit_change	src/edit.cc	/^static void edit_change(Character *ch, String argument)$/;"	f	file:
edit_delete	src/edit.cc	/^static void edit_delete(Character *ch, const String& argument)$/;"	f	file:
edit_desc	src/edit.cc	/^static void edit_desc(Character *ch, const String& argument)$/;"	f	file:
edit_done	src/edit.cc	/^static void edit_done(Character *ch, const String& argument)$/;"	f	file:
edit_goto	src/edit.cc	/^static void edit_goto(Character *ch, const String& argument)$/;"	f	file:
edit_goto1	src/edit.cc	/^static void edit_goto1(Character *ch, int lineno)$/;"	f	file:
edit_help	src/edit.cc	/^static void edit_help(Character *ch, const String& argument)$/;"	f	file:
edit_id	src/include/Edit.hh	/^    int edit_id = 0;$/;"	m	class:Edit
edit_insert	src/edit.cc	/^static void edit_insert(Character *ch, const String& argument)$/;"	f	file:
edit_line	src/include/Edit.hh	/^    int edit_line = 0;$/;"	m	class:Edit
edit_list	src/edit.cc	/^static void edit_list(Character *ch, const String& argument)$/;"	f	file:
edit_list1	src/edit.cc	/^static void edit_list1(Character *ch, int fromline, int toline)$/;"	f	file:
edit_nlines	src/include/Edit.hh	/^    int edit_nlines = 0;$/;"	m	class:Edit
edit_note	src/edit.cc	/^static void edit_note(Character *ch, const String& argument)$/;"	f	file:
edit_split	src/edit.cc	/^static void edit_split(Character *ch, String argument)$/;"	f	file:
edit_status	src/edit.cc	/^static void edit_status(Character *ch, const String& argument)$/;"	f	file:
edit_string	src/include/Edit.hh	/^    char edit_string[MAX_STRING_LENGTH] = {0};$/;"	m	class:Edit
edit_type	src/include/Edit.hh	/^    int edit_type = 0;$/;"	m	class:Edit
edit_undo	src/edit.cc	/^static void edit_undo(Character *ch, const String& junk)$/;"	f	file:
edit_undo_ok	src/include/Edit.hh	/^    bool edit_undo_ok = false;$/;"	m	class:Edit
edit_wrap	src/edit.cc	/^static void edit_wrap(Character *ch, const String& argument)$/;"	f	file:
eligible_aggressor	src/update.cc	/^bool eligible_aggressor(Character *ch)$/;"	f
eligible_victim	src/update.cc	/^bool eligible_victim(Character *ch)$/;"	f
email	src/include/Player.hh	/^    String              email;$/;"	m	class:Player
empty	src/include/Flags.hh	/^	bool empty() const { return bits.none(); }$/;"	f	class:Flags
encampment	src/include/skill/Type.hh	/^    encampment,$/;"	m	class:skill::type
enchant_armor	src/include/affect/Type.hh	/^    enchant_armor,$/;"	m	class:affect::type
enchant_armor	src/include/skill/Type.hh	/^    enchant_armor,$/;"	m	class:skill::type
enchant_weapon	src/include/affect/Type.hh	/^    enchant_weapon,$/;"	m	class:affect::type
enchant_weapon	src/include/skill/Type.hh	/^    enchant_weapon,$/;"	m	class:skill::type
enchanted_obj	src/affect/affect_obj.cc	/^bool enchanted_obj(Object *obj) {$/;"	f	namespace:affect
end	src/include/GarbageCollectingList.hh	/^    iterator end() { return iterator(container.end(), *this); }$/;"	f	class:GarbageCollectingList
energy_drain	src/include/skill/Type.hh	/^    energy_drain,$/;"	m	class:skill::type
enhance_blade	src/magic.cc	/^bool enhance_blade(Character *ch, Object *obj, affect::type type, int level, int evolution)$/;"	f
enhanced_damage	src/include/skill/Type.hh	/^    enhanced_damage,$/;"	m	class:skill::type
ensure	src/deps/cJSON/cJSON.c	/^static char* ensure(printbuffer *p,int needed)$/;"	f	file:
entity_argument	src/argument.cc	/^Flags::Bit entity_argument(const String& argument, String& arg) {$/;"	f
entity_argument	src/argument.cc	/^Flags::Bit entity_argument(const char *argument, char *arg)$/;"	f
envenom	src/include/skill/Type.hh	/^    envenom,$/;"	m	class:skill::type
eq_meta_t	src/lootv2.cc	/^struct eq_meta_t {$/;"	s	file:
eq_quality_t	src/lootv2.cc	/^struct eq_quality_t {$/;"	s	file:
eq_roll_t	src/lootv2.cc	/^struct eq_roll_t {$/;"	s	file:
eq_rolls	src/lootv2.cc	/^	const std::vector<eq_roll_t>& eq_rolls;$/;"	m	struct:eq_meta_t	file:
equip_char	src/handler.cc	/^void equip_char(Character *ch, Object *obj, int iWear)$/;"	f
erase	src/String.cc	/^erase(size_t pos, size_t len) {$/;"	f	class:String
event	src/event/Dispatcher.cc	/^namespace event {$/;"	n	file:
event	src/include/event/Dispatcher.hh	/^namespace event {$/;"	n
event	src/include/event/Handler.hh	/^namespace event {$/;"	n
event	src/include/event/event.hh	/^namespace event {$/;"	n
events	src/include/War.hh	/^    War::Event *    events = nullptr;$/;"	m	class:War
evocost_pri	src/include/skill/skill.hh	/^	int		evocost_pri[Guild::size];	\/* Guild cost to evolve to 3    *\/$/;"	m	struct:skill::skill_table_t
evocost_sec	src/include/skill/skill.hh	/^	int		evocost_sec[Guild::size];	\/* Guild cost to evolve to 2    *\/$/;"	m	struct:skill::skill_table_t
evolution	src/include/Player.hh	/^	std::vector<int> evolution;$/;"	m	class:Player
evolution	src/include/affect/Affect.hh	/^    int              evolution = 0;$/;"	m	class:affect::Affect
evolve_info	src/skills.cc	/^void evolve_info(Character *ch)$/;"	f
evolve_list	src/skills.cc	/^void evolve_list(Character *ch)$/;"	f
exe_file	src/comm.cc	/^String exe_file; \/\/ the executable this process booted from$/;"	v
exists_on_char	src/affect/affect_char.cc	/^bool exists_on_char(const Character *ch, ::affect::type type) {$/;"	f	namespace:affect
exists_on_obj	src/affect/affect_obj.cc	/^bool exists_on_obj(Object *obj, ::affect::type type) {$/;"	f	namespace:affect
exists_on_room	src/affect/affect_room.cc	/^bool exists_on_room(Room *room, ::affect::type type) {$/;"	f	namespace:affect
exit	src/include/Room.hh	/^	Exit *		exit    [6] = {nullptr};$/;"	m	class:Room
exit	src/include/RoomPrototype.hh	/^	ExitPrototype *		exit    [6] = {nullptr}; \/\/ prototypes for building rooms$/;"	m	class:RoomPrototype
exit_both	src/wiz_build.cc	/^typedef enum {exit_from, exit_to, exit_both} exit_status;$/;"	e	enum:__anon1	file:
exit_flags	src/include/Exit.hh	/^    Flags exit_flags; \/\/ current state, this resets to the prototype's values on area resets$/;"	m	class:Exit
exit_flags	src/include/ExitPrototype.hh	/^    Flags               exit_flags; \/\/ default values the exit will reset to$/;"	m	class:ExitPrototype
exit_from	src/wiz_build.cc	/^typedef enum {exit_from, exit_to, exit_both} exit_status;$/;"	e	enum:__anon1	file:
exit_num	src/hunt.cc	/^static const int exit_num = 6;$/;"	v	file:
exit_reason	src/comm.cc	/^void exit_reason(const char *module, int line, const char *reason)$/;"	f
exit_status	src/wiz_build.cc	/^typedef enum {exit_from, exit_to, exit_both} exit_status;$/;"	t	typeref:enum:__anon1	file:
exit_to	src/wiz_build.cc	/^typedef enum {exit_from, exit_to, exit_both} exit_status;$/;"	e	enum:__anon1	file:
exits_in	src/act_info.cc	/^void exits_in(Character *ch)$/;"	f
exp	src/include/Character.hh	/^    int                 exp = 0;$/;"	m	class:Character
exp_per_level	src/skills.cc	/^int exp_per_level(Character *ch, int points)$/;"	f
expand_color_codes	src/comm.cc	/^String expand_color_codes(Character *ch, const String& str) {$/;"	f
extra_bit_name	src/typename.cc	/^const String extra_bit_name(const Flags& flags) {$/;"	f
extra_descr	src/Room.cc	/^const ExtraDescr *Room::extra_descr() const { return prototype.extra_descr; }$/;"	f	class:Room
extra_descr	src/include/Object.hh	/^	ExtraDescr *	extra_descr = nullptr;$/;"	m	class:Object
extra_descr	src/include/ObjectPrototype.hh	/^    ExtraDescr *        extra_descr = nullptr;$/;"	m	class:ObjectPrototype
extra_descr	src/include/RoomPrototype.hh	/^	ExtraDescr *	extra_descr = nullptr;$/;"	m	class:RoomPrototype
extra_flags	src/include/Object.hh	/^	Flags           extra_flags;$/;"	m	class:Object
extra_flags	src/include/ObjectPrototype.hh	/^    Flags               extra_flags; \/* Formerly INT *\/$/;"	m	class:ObjectPrototype
extra_flags	src/tables.cc	/^const std::vector<flag_type> extra_flags = {$/;"	v
extraclass	src/include/Player.hh	/^    skill::type	        extraclass     [MAX_EXTRACLASS_SLOTS] = {skill::type::unknown};$/;"	m	class:Player
extract_char	src/handler.cc	/^void extract_char(Character *ch, bool fPull)$/;"	f
extract_obj	src/handler.cc	/^void extract_obj(Object *obj)$/;"	f
f	src/scripts/fix_pcindex.py	/^f = open('pcindex\/act')$/;"	v
f	src/scripts/fix_pcindex.py	/^f = open('pcindex\/cgroup')$/;"	v
faerie_fire	src/include/affect/Type.hh	/^    faerie_fire,$/;"	m	class:affect::type
faerie_fire	src/include/skill/Type.hh	/^    faerie_fire,$/;"	m	class:skill::type
faerie_fog	src/include/skill/Type.hh	/^    faerie_fog,$/;"	m	class:skill::type
familiar	src/include/Player.hh	/^    bool                familiar = false;$/;"	m	class:Player
familiar	src/include/skill/Type.hh	/^    familiar,$/;"	m	class:skill::type
fappend	src/file.cc	/^void fappend(const String& file, const String& str)$/;"	f
farsight	src/include/skill/Type.hh	/^    farsight,$/;"	m	class:skill::type
fast_healing	src/include/skill/Type.hh	/^    fast_healing,$/;"	m	class:skill::type
fcommand	src/include/Descriptor.hh	/^    bool                fcommand = false;$/;"	m	class:Descriptor
fear	src/include/affect/Type.hh	/^    fear,$/;"	m	class:affect::type
fear	src/include/skill/Type.hh	/^    fear,$/;"	m	class:skill::type
fee	src/include/Battle.hh	/^    int         fee = 0;$/;"	m	class:Battle
female	src/include/tables.hh	/^	String female;$/;"	m	struct:CleT_type
female	src/include/tables.hh	/^	String female;$/;"	m	struct:MagT_type
female	src/include/tables.hh	/^	String female;$/;"	m	struct:ThiT_type
female	src/include/tables.hh	/^	String female;$/;"	m	struct:WarT_type
fgetf	src/wiz_coder.cc	/^char *fgetf(char *s, int n, register FILE *iop)$/;"	f
field	src/include/Sector.hh	/^	field = 2,$/;"	m	class:Sector
field_cand	src/tables.cc	/^const String field_cand[] = {$/;"	v
field_type	src/include/tables.hh	/^struct field_type$/;"	s
fighting	src/include/Character.hh	/^    Character *         fighting = nullptr;$/;"	m	class:Character
fightpulse	src/include/Character.hh	/^    int              fightpulse = 0;$/;"	m	class:Character
file_bug	src/Logging.cc	/^file_bug(FILE *fp, const String& str, const Vnum& vnum) {$/;"	f	class:Logging
file_bug	src/Logging.cc	/^file_bug(FILE *fp, const String& str, int param)$/;"	f	class:Logging
file_name	src/include/Area.hh	/^    String              file_name;$/;"	m	class:Area
final_score	src/include/War.hh	/^        int      final_score = 0;$/;"	m	class:War::Opponent
find	src/String.cc	/^find(const String& str, std::size_t start_pos) const {$/;"	f	class:String
find_door	src/act_move.cc	/^int find_door(Character *ch, const String& arg)$/;"	f
find_exit	src/act_move.cc	/^int find_exit(Character *ch, const String& arg)$/;"	f
find_in_list	src/affect/affect_list.cc	/^const Affect *find_in_list(Affect **list_head, ::affect::type type) {$/;"	f	namespace:affect
find_keeper	src/act_obj.cc	/^Character *find_keeper(Character *ch)$/;"	f
find_line	src/edit.cc	/^static char *find_line(int lineno)$/;"	f	file:
find_location	src/wiz_gen.cc	/^Room *find_location(Character *ch, const String& arg)$/;"	f
find_money	src/bank.cc	/^void find_money(Character *ch)$/;"	f
find_nth	src/String.cc	/^find_nth(std::size_t nth, const String& str, std::size_t start_pos) const {$/;"	f	class:String
find_on_char	src/affect/affect_char.cc	/^const Affect *find_on_char(Character *ch, ::affect::type type) {$/;"	f	namespace:affect
find_on_obj	src/affect/affect_obj.cc	/^const Affect *find_on_obj(Object *obj, ::affect::type type) {$/;"	f	namespace:affect
find_on_room	src/affect/affect_room.cc	/^const Affect *find_on_room(Room *room, ::affect::type type) {$/;"	f	namespace:affect
find_path	src/hunt.cc	/^static int find_path(HUNT_CONDITIONS *cond)$/;"	f	file:
find_questmaster	src/quest.cc	/^Character *find_questmaster(Character *ch)$/;"	f
find_spell	src/magic.cc	/^skill::type find_spell(Character *ch, const String& name)$/;"	f
find_squestmaster	src/quest.cc	/^Character *find_squestmaster(Character *ch)$/;"	f
fingerinfo	src/include/Player.hh	/^    String              fingerinfo;$/;"	m	class:Player
fire	src/event/Dispatcher.cc	/^fire(Type type, Args args) {$/;"	f	class:event::Dispatcher
fire_breath	src/include/affect/Type.hh	/^    fire_breath,$/;"	m	class:affect::type
fire_breath	src/include/skill/Type.hh	/^    fire_breath,$/;"	m	class:skill::type
fire_effect	src/effects.cc	/^void fire_effect(void *vo, int level, int dam, int target, int evolution)$/;"	f
fireball	src/include/skill/Type.hh	/^    fireball,$/;"	m	class:skill::type
fireball_bash	src/magic.cc	/^void fireball_bash(Character *ch, Character *victim, int level, int evolution, bool spread)$/;"	f
firebuilding	src/include/skill/Type.hh	/^    firebuilding,$/;"	m	class:skill::type
fireproof	src/include/affect/Type.hh	/^    fireproof,$/;"	m	class:affect::type
fireproof	src/include/skill/Type.hh	/^    fireproof,$/;"	m	class:skill::type
firestorm	src/include/skill/Type.hh	/^    firestorm,$/;"	m	class:skill::type
first	src/include/Guild.hh	/^	first = 0$/;"	e	enum:Guild
first	src/include/affect/Type.hh	/^    first = 0 \/\/ don't touch$/;"	m	class:affect::type
first	src/include/skill/Type.hh	/^    first = 0 \/\/ don't touch$/;"	m	class:skill::type
firstByteMark	src/deps/cJSON/cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
fix_blank_raff	src/remort.cc	/^void fix_blank_raff(Character *ch, int start)$/;"	f
fix_war	src/War.cc	/^void fix_war(War *war)$/;"	f
flag	src/include/merc.hh	/^	Flags::Bit  flag;$/;"	m	struct:wiznet_type
flag_fields	src/tables.cc	/^const std::vector<field_type> flag_fields = {$/;"	v
flag_index_lookup	src/tables.cc	/^int flag_index_lookup(const String& name, const std::vector<flag_type>& flag_table)$/;"	f
flag_killer	src/include/Player.hh	/^    int			    flag_killer = 0;$/;"	m	class:Player
flag_table	src/include/tables.hh	/^	const std::vector<flag_type> &flag_table;$/;"	m	struct:field_type
flag_thief	src/include/Player.hh	/^    int			    flag_thief = 0;$/;"	m	class:Player
flag_type	src/include/tables.hh	/^struct flag_type$/;"	s
flags	src/ObjectValue.cc	/^flags() const {$/;"	f	class:ObjectValue
flags	src/Room.cc	/^const Flags Room::flags() const { return cached_room_flags + room_flags; }$/;"	f	class:Room
flags	src/include/Tail.hh	/^    Flags       flags;$/;"	m	class:Tail
flail	src/include/skill/Type.hh	/^    flail,$/;"	m	class:skill::type
flame_blade	src/include/skill/Type.hh	/^    flame_blade,$/;"	m	class:skill::type
flameshield	src/include/affect/Type.hh	/^    flameshield,$/;"	m	class:affect::type
flameshield	src/include/skill/Type.hh	/^    flameshield,$/;"	m	class:skill::type
flamestrike	src/include/skill/Type.hh	/^    flamestrike,$/;"	m	class:skill::type
floating_disc	src/include/skill/Type.hh	/^    floating_disc,$/;"	m	class:skill::type
fly	src/include/affect/Type.hh	/^    fly,$/;"	m	class:affect::type
fly	src/include/skill/Type.hh	/^    fly,$/;"	m	class:skill::type
fn_data_container_type	src/include/affect/Affect.hh	/^struct fn_data_container_type {$/;"	s	namespace:affect
fn_debug	src/affect/affect.cc	/^int fn_debug(Affect *node, void *data) {$/;"	f	namespace:affect
fn_fade_spell	src/affect/affect.cc	/^int fn_fade_spell(Affect *node, void *data) {$/;"	f	namespace:affect
fn_params	src/include/affect/Affect.hh	/^typedef struct fn_params {$/;"	s	namespace:affect
fn_set_level	src/affect/affect.cc	/^int fn_set_level(Affect *node, void *data) {$/;"	f	namespace:affect
focus	src/fight.cc	/^bool focus = true;$/;"	v
focus	src/include/affect/Type.hh	/^    focus,$/;"	m	class:affect::type
focus	src/include/skill/Type.hh	/^    focus,$/;"	m	class:skill::type
footsweep	src/include/skill/Type.hh	/^    footsweep,$/;"	m	class:skill::type
force_shield	src/include/affect/Type.hh	/^    force_shield,$/;"	m	class:affect::type
force_shield	src/include/skill/Type.hh	/^    force_shield,$/;"	m	class:skill::type
forest_dense	src/include/Sector.hh	/^	forest_dense = 12,$/;"	m	class:Sector
forest_medium	src/include/Sector.hh	/^	forest_medium = 11,$/;"	m	class:Sector
forest_sparse	src/include/Sector.hh	/^	forest_sparse = 3,$/;"	m	class:Sector
forge	src/include/skill/Type.hh	/^    forge,$/;"	m	class:skill::type
forge_flag	src/act_obj.cc	/^void forge_flag(Character *ch, const String& argument, Object *anvil)$/;"	f
form	src/include/merc.hh	/^	Flags       form;                   \/* default form flag for the race *\/$/;"	m	struct:race_type
form_bit_name	src/typename.cc	/^const String form_bit_name(const Flags& flags) {$/;"	f
form_flags	src/include/Character.hh	/^    Flags               form_flags;$/;"	m	class:Character
form_flags	src/include/MobilePrototype.hh	/^    Flags               form_flags;$/;"	m	class:MobilePrototype
form_flags	src/tables.cc	/^const std::vector<flag_type> form_flags = {$/;"	v
format	src/include/Format.hh	/^String format(const String& fmt, Params&&... params) {$/;"	f	namespace:Format
format_mstat	src/set-stat.cc	/^void format_mstat(Character *ch, Character *victim)$/;"	f
format_obj_to_char	src/act_info.cc	/^String format_obj_to_char(Object *obj, Character *ch, bool fShort)$/;"	f
format_ostat	src/set-stat.cc	/^void format_ostat(Character *ch, Object *obj)$/;"	f
format_page	src/Note.cc	/^const String format_page(const String& orig_page, int wrap_len) {$/;"	f
format_paragraph	src/Note.cc	/^const String format_paragraph(const String& orig_paragraph) {$/;"	f
format_rstat	src/set-stat.cc	/^void format_rstat(Character *ch, Room *location)$/;"	f
format_string	src/Note.cc	/^String format_string(const String& s) {$/;"	f
format_string_old	src/Note.cc	/^String format_string_old(const String& oldstring)$/;"	f
format_war_events	src/War.cc	/^void format_war_events(Character *ch, War *war)$/;"	f
format_war_list	src/War.cc	/^void format_war_list(Character *ch, War *war, bool current)$/;"	f
forward	src/include/Format.hh	/^inline auto to_c(TMP&& param) -> decltype(std::forward<TMP>(param)) {$/;"	f	namespace:Format
fourth_attack	src/include/skill/Type.hh	/^    fourth_attack,$/;"	m	class:skill::type
fpArea	src/include/Area.hh	/^    FILE *fpArea; \/\/ for loading split between constructor and load function$/;"	m	class:Area
fprintf	src/include/Format.hh	/^int fprintf(FILE *fp, const String& fmt, Params&&... params) {$/;"	f	namespace:Format
fread_char	src/save.cc	/^void fread_char(Character *ch, cJSON *json, int version)$/;"	f
fread_flag	src/file.cc	/^const Flags fread_flag(FILE *fp)$/;"	f
fread_letter	src/file.cc	/^char fread_letter(FILE *fp)$/;"	f
fread_number	src/file.cc	/^int fread_number(FILE *fp)$/;"	f
fread_obj	src/save.cc	/^Object * fread_obj(cJSON *json, int version) {$/;"	f
fread_objects	src/save.cc	/^void fread_objects(Character *ch, cJSON *contains, void (*obj_to)(Object *, Character *), int version) {$/;"	f
fread_pet	src/save.cc	/^void fread_pet(Character *ch, cJSON *json, int version)$/;"	f
fread_player	src/save.cc	/^void fread_player(Character *ch, cJSON *json, int version) {$/;"	f
fread_string	src/file.cc	/^String fread_string(FILE *fp, char to_char)$/;"	f
fread_string_eol	src/file.cc	/^String fread_string_eol(FILE *fp)$/;"	f
fread_to_eol	src/file.cc	/^void fread_to_eol(FILE *fp)$/;"	f
fread_word	src/file.cc	/^String fread_word(FILE *fp)$/;"	f
free_cache	src/affect/affect_cache_array.cc	/^void free_cache(Character *ch) {$/;"	f	namespace:affect
free_fn	src/deps/cJSON/cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
free_list	src/include/Pooled.hh	/^	static std::vector<T* >& free_list() {$/;"	f	class:Pooled
frenzy	src/include/affect/Type.hh	/^    frenzy,$/;"	m	class:affect::type
frenzy	src/include/skill/Type.hh	/^    frenzy,$/;"	m	class:skill::type
from_box_ok	src/act_obj.cc	/^bool from_box_ok(Character *ch, Object *obj, char *box_type)$/;"	f
from_int	src/skill/skill_table.cc	/^skill::type from_int(int sn) {$/;"	f	namespace:skill
from_room	src/hunt.cc	/^	Room *from_room;$/;"	m	struct:hunt_conditions	file:
frost_blade	src/include/skill/Type.hh	/^    frost_blade,$/;"	m	class:skill::type
frost_breath	src/include/skill/Type.hh	/^    frost_breath,$/;"	m	class:skill::type
fsearch_char	src/flag.cc	/^void fsearch_char(Character *ch, int fieldptr, const Flags& marked, bool mobile, bool player)$/;"	f
fsearch_mobile	src/flag.cc	/^int fsearch_mobile(Character *ch, int fieldptr, const Flags& marked)$/;"	f
fsearch_obj	src/flag.cc	/^void fsearch_obj(Character *ch, int fieldptr, const Flags& marked)$/;"	f
fsearch_player	src/flag.cc	/^int fsearch_player(Character *ch, int fieldptr, const Flags& marked)$/;"	f
fsearch_room	src/flag.cc	/^void fsearch_room(Character *ch, int fieldptr, const Flags& marked)$/;"	f
full_heal	src/include/skill/Type.hh	/^    full_heal,$/;"	m	class:skill::type
function	src/include/merc.hh	/^	SPEC_FUN *  function;               \/* the function *\/$/;"	m	struct:spec_type
fwrite_char	src/save.cc	/^cJSON *fwrite_char(Character *ch)$/;"	f
fwrite_obj	src/save.cc	/^cJSON *fwrite_obj(Object *obj)$/;"	f
fwrite_objects	src/save.cc	/^cJSON *fwrite_objects(Object *head) {$/;"	f
fwrite_pet	src/save.cc	/^cJSON *fwrite_pet(Character *pet)$/;"	f
fwrite_player	src/save.cc	/^cJSON *fwrite_player(Character *ch)$/;"	f
gain_condition	src/update.cc	/^void gain_condition(Character *ch, int iCond, int value)$/;"	f
gain_exp	src/update.cc	/^void gain_exp(Character *ch, int gain)$/;"	f
game_loop_unix	src/comm.cc	/^void game_loop_unix(int control)$/;"	f
gamein	src/include/Player.hh	/^	String              gamein;$/;"	m	class:Player
gameinout	src/act_info.cc	/^void gameinout(Character *ch, const String& mortal, const String& entryexit, char inout)$/;"	f
gameout	src/include/Player.hh	/^	String              gameout;$/;"	m	class:Player
gargoyle	src/include/Player.hh	/^	Character *         gargoyle = nullptr;$/;"	m	class:Player
gas_breath	src/include/skill/Type.hh	/^    gas_breath,$/;"	m	class:skill::type
gate	src/include/skill/Type.hh	/^    gate,$/;"	m	class:skill::type
gem	src/gem/gem.cc	/^namespace gem {$/;"	n	file:
gem	src/include/gem/gem.hh	/^namespace gem {$/;"	n
gem_affected	src/include/Object.hh	/^    affect::Affect *   gem_affected = nullptr;$/;"	m	class:Object
gems	src/include/Object.hh	/^    Object *      gems = nullptr; \/\/ gems in settings$/;"	m	class:Object
general_purpose	src/include/skill/Type.hh	/^    general_purpose,$/;"	m	class:skill::type
generate_eq	src/lootv2.cc	/^Object *generate_eq(int objlevel){$/;"	f
generate_quest	src/quest.cc	/^void generate_quest(Character *ch, Character *questman)$/;"	f
generate_skillquest	src/quest.cc	/^void generate_skillquest(Character *ch, Character *questman)$/;"	f
generate_skillquest_mob	src/quest.cc	/^void generate_skillquest_mob(Character *ch, Character *questman, int level, int type)$/;"	f
generate_skillquest_obj	src/quest.cc	/^Object *generate_skillquest_obj(Character *ch, int level)$/;"	f
generate_skillquest_room	src/quest.cc	/^Room *generate_skillquest_room(Character *ch, int level)$/;"	f
get	src/include/worldmap/Quadtree.hh	/^	T *get(const Coordinate& coord) const {$/;"	f	class:worldmap::Quadtree
getAlignment	src/conn/State.cc	/^GetAlignmentState State::getAlignment;$/;"	m	class:conn::State	file:
getAlignment	src/include/conn/State.hh	/^	static GetAlignmentState getAlignment;$/;"	m	struct:conn::State
getDeity	src/conn/State.cc	/^GetDeityState State::getDeity;$/;"	m	class:conn::State	file:
getDeity	src/include/conn/State.hh	/^	static GetDeityState getDeity;$/;"	m	struct:conn::State
getGuild	src/conn/State.cc	/^GetGuildState State::getGuild;$/;"	m	class:conn::State	file:
getGuild	src/include/conn/State.hh	/^	static GetGuildState getGuild;$/;"	m	struct:conn::State
getMudExp	src/conn/State.cc	/^GetMudExpState State::getMudExp;$/;"	m	class:conn::State	file:
getMudExp	src/include/conn/State.hh	/^	static GetMudExpState getMudExp;$/;"	m	struct:conn::State
getName	src/conn/State.cc	/^GetNameState State::getName;$/;"	m	class:conn::State	file:
getName	src/include/conn/State.hh	/^	static GetNameState getName;$/;"	m	struct:conn::State
getNewPass	src/conn/State.cc	/^GetNewPassState State::getNewPass;$/;"	m	class:conn::State	file:
getNewPass	src/include/conn/State.hh	/^	static GetNewPassState getNewPass;$/;"	m	struct:conn::State
getOldPass	src/conn/State.cc	/^GetOldPassState State::getOldPass;$/;"	m	class:conn::State	file:
getOldPass	src/include/conn/State.hh	/^	static GetOldPassState getOldPass;$/;"	m	struct:conn::State
getRace	src/conn/State.cc	/^GetRaceState State::getRace;$/;"	m	class:conn::State	file:
getRace	src/include/conn/State.hh	/^	static GetRaceState getRace;$/;"	m	struct:conn::State
getSex	src/conn/State.cc	/^GetSexState State::getSex;$/;"	m	class:conn::State	file:
getSex	src/include/conn/State.hh	/^	static GetSexState getSex;$/;"	m	struct:conn::State
getWeapon	src/conn/State.cc	/^GetWeaponState State::getWeapon;$/;"	m	class:conn::State	file:
getWeapon	src/include/conn/State.hh	/^	static GetWeaponState getWeapon;$/;"	m	struct:conn::State
get_affect_evolution	src/handler.cc	/^int get_affect_evolution(Character *ch, affect::type type)$/;"	f
get_age	src/attribute.cc	/^int get_age(Character *ch)$/;"	f
get_area	src/World.cc	/^get_area(const Vnum& vnum) const {$/;"	f	class:World
get_base_name	src/lootv2.cc	/^const String get_base_name(int eq_type, int ilevel) {$/;"	f
get_boolean	src/include/JSON/cJSON.hh	/^inline void get_boolean(cJSON *obj, bool *target, const String& key) {$/;"	f	namespace:JSON
get_cache	src/affect/affect_cache_array.cc	/^#define get_cache(/;"	d	file:
get_carry_number	src/handler.cc	/^int get_carry_number(Character *ch)$/;"	f
get_carry_weight	src/handler.cc	/^int get_carry_weight(Character *ch)$/;"	f
get_char_area	src/find.cc	/^Character *get_char_area(Character *ch, const String& argument, int vis)$/;"	f
get_char_here	src/find.cc	/^Character *get_char_here(Character *ch, const String& argument, int vis)$/;"	f
get_char_room	src/find.cc	/^Character *get_char_room(Character *ch, Room *room, const String& argument, int vis)$/;"	f
get_char_world	src/find.cc	/^Character *get_char_world(Character *ch, const String& argument, int vis)$/;"	f
get_child_index	src/include/worldmap/Quadtree.hh	/^	unsigned int get_child_index(const Coordinate& coord) const {$/;"	f	class:worldmap::Quadtree
get_color	src/worldmap/Region.cc	/^const MapColor Region::get_color(unsigned int x, unsigned int y) const {$/;"	f	class:worldmap::Region
get_color_code	src/typename.cc	/^String get_color_code(int color, int bold)$/;"	f
get_color_name	src/typename.cc	/^String get_color_name(int color, int bold)$/;"	f
get_cost	src/act_obj.cc	/^int get_cost(Character *keeper, Object *obj, bool fBuy)$/;"	f
get_custom_color_code	src/typename.cc	/^String get_custom_color_code(Character *ch, int slot)$/;"	f
get_custom_color_name	src/typename.cc	/^String get_custom_color_name(Character *ch, int slot)$/;"	f
get_duel	src/duel.cc	/^Duel *get_duel(Character *ch)$/;"	f
get_eq_char	src/handler.cc	/^Object *get_eq_char(Character *ch, int iWear)$/;"	f
get_evolution	src/skills.cc	/^int get_evolution(const Character *ch, skill::type type)$/;"	f
get_extra_descr	src/handler.cc	/^const ExtraDescr *get_extra_descr(const String& name, const ExtraDescr *ed)$/;"	f
get_flags	src/include/JSON/cJSON.hh	/^inline void get_flags(cJSON *obj, Flags *target, const String& key) {$/;"	f	namespace:JSON
get_holdable_level	src/handler.cc	/^int get_holdable_level(Character *ch)$/;"	f
get_int	src/include/JSON/cJSON.hh	/^inline void get_int(cJSON *obj, int *target, const String& key) {$/;"	f	namespace:JSON
get_learned	src/skills.cc	/^int get_learned(const Character *ch, skill::type sn) {$/;"	f
get_legendary_name	src/lootv2.cc	/^const String get_legendary_name(int eq_type) {$/;"	f
get_locker_number	src/handler.cc	/^int get_locker_number(Character *ch)$/;"	f
get_locker_weight	src/handler.cc	/^int get_locker_weight(Character *ch)$/;"	f
get_long	src/include/JSON/cJSON.hh	/^inline void get_long(cJSON *obj, long *target, const String& key) {$/;"	f	namespace:JSON
get_max_stat	src/attribute.cc	/^int get_max_stat(const Character *ch, int stat)$/;"	f
get_max_train	src/handler.cc	/^int get_max_train(Character *ch, int stat)$/;"	f
get_minimap	src/World.cc	/^get_minimap(Character *ch, std::vector<String>& vec) const {$/;"	f	class:World
get_mob_area	src/find.cc	/^Character *get_mob_area(Character *ch, const String& argument, int vis)$/;"	f
get_mob_here	src/find.cc	/^Character *get_mob_here(Character *ch, const String& argument, int vis)$/;"	f
get_mob_prototype	src/Area.cc	/^get_mob_prototype(const Vnum& vnum) {$/;"	f	class:Area
get_mob_prototype	src/World.cc	/^get_mob_prototype(const Vnum& vnum)$/;"	f	class:World
get_mob_world	src/find.cc	/^Character *get_mob_world(Character *ch, const String& argument, int vis)$/;"	f
get_multi_command	src/comm.cc	/^char *get_multi_command(Descriptor *d, const String& argument)$/;"	f
get_number	src/RoomID.cc	/^get_number() const {$/;"	f	class:RoomID
get_obj	src/act_obj.cc	/^void get_obj(Character *ch, Object *obj, Object *container)$/;"	f
get_obj_carrier	src/handler.cc	/^Character *get_obj_carrier(Object *obj)$/;"	f
get_obj_carry	src/find.cc	/^Object *get_obj_carry(Character *ch, const String& argument)$/;"	f
get_obj_here	src/find.cc	/^Object *get_obj_here(Character *ch, const String& argument)$/;"	f
get_obj_keeper	src/act_obj.cc	/^Object *get_obj_keeper(Character *ch, Character *keeper, const String& argument)$/;"	f
get_obj_list	src/find.cc	/^Object *get_obj_list(Character *ch, const String& argument, Object *list)$/;"	f
get_obj_number	src/handler.cc	/^int get_obj_number(Object *obj)$/;"	f
get_obj_prototype	src/Area.cc	/^get_obj_prototype(const Vnum& vnum) {$/;"	f	class:Area
get_obj_prototype	src/World.cc	/^get_obj_prototype(const Vnum& vnum)$/;"	f	class:World
get_obj_type	src/handler.cc	/^Object *get_obj_type(ObjectPrototype *pObjIndex)$/;"	f
get_obj_wear	src/find.cc	/^Object *get_obj_wear(Character *ch, const String& argument)$/;"	f
get_obj_weight	src/handler.cc	/^int get_obj_weight(Object *obj)$/;"	f
get_obj_world	src/find.cc	/^Object *get_obj_world(Character *ch, const String& argument)$/;"	f
get_owner	src/handler.cc	/^String get_owner(Character *ch, Object *obj)$/;"	f
get_play_hours	src/handler.cc	/^int get_play_hours(Character *ch)$/;"	f
get_play_seconds	src/handler.cc	/^int get_play_seconds(Character *ch)$/;"	f
get_player_area	src/find.cc	/^Character *get_player_area(Character *ch, const String& argument, int vis)$/;"	f
get_player_here	src/find.cc	/^Character *get_player_here(Character *ch, const String& argument, int vis)$/;"	f
get_player_world	src/find.cc	/^Character *get_player_world(Character *ch, const String& argument, int vis)$/;"	f
get_position	src/handler.cc	/^int get_position(Character *ch)$/;"	f
get_random_arena	src/duel.cc	/^Duel::Arena *get_random_arena()$/;"	f
get_random_arena_room	src/duel.cc	/^Room *get_random_arena_room(Duel::Arena *arena, const Location& notloc)$/;"	f
get_random_reset_room	src/Area.cc	/^get_random_reset_room(const MobilePrototype *mob)$/;"	f	class:Area
get_random_room	src/act_move.cc	/^Room *get_random_room(Character *ch)$/;"	f
get_random_skill	src/quest.cc	/^skill::type get_random_skill(Character *ch)$/;"	f
get_room	src/World.cc	/^get_room(const Location& location)$/;"	f	class:World
get_room	src/include/Area.hh	/^    Room *get_room(const RoomID& id) {$/;"	f	class:Area
get_room_prototype	src/Area.cc	/^get_room_prototype(const Vnum& vnum) {$/;"	f	class:Area
get_room_prototype	src/World.cc	/^get_room_prototype(const Vnum& vnum) {$/;"	f	class:World
get_same_war	src/War.cc	/^War *get_same_war(Clan *clanA, Clan *clanB)$/;"	f
get_scatter_room	src/wiz_quest.cc	/^Room *get_scatter_room(Character *ch)$/;"	f
get_sector	src/worldmap/Worldmap.cc	/^get_sector(const Coordinate& coord) const {$/;"	f	class:worldmap::Worldmap
get_short	src/include/JSON/cJSON.hh	/^inline void get_short(cJSON *obj, void *target, const String& key) {$/;"	f	namespace:JSON
get_short_string	src/gem/gem.cc	/^const String get_short_string(Object *eq) {$/;"	f	namespace:gem
get_skill_cost	src/skills.cc	/^int get_skill_cost(Character *ch, skill::type type)$/;"	f
get_skill_level	src/skills.cc	/^int get_skill_level(const Character *ch, skill::type sn)$/;"	f
get_string	src/include/JSON/cJSON.hh	/^inline void get_string(cJSON *obj, String *target, const String& key) {$/;"	f	namespace:JSON
get_strongbox_number	src/handler.cc	/^int get_strongbox_number(Character *ch)$/;"	f
get_true_weight	src/handler.cc	/^int get_true_weight(Object *obj)$/;"	f
get_unspelled_ac	src/attribute.cc	/^int get_unspelled_ac(Character *ch, int type)$/;"	f
get_unspelled_damroll	src/attribute.cc	/^int get_unspelled_damroll(Character *ch)$/;"	f
get_unspelled_hitroll	src/attribute.cc	/^int get_unspelled_hitroll(Character *ch)$/;"	f
get_usable_level	src/handler.cc	/^int get_usable_level(Character *ch)$/;"	f
get_usable_level	src/skills.cc	/^int get_usable_level(skill::type sn, Guild guild) {$/;"	f
get_vnum	src/RoomID.cc	/^get_vnum() const {$/;"	f	class:RoomID
get_vnum	src/worldmap/Region.cc	/^const Vnum Region::get_vnum(unsigned int x, unsigned int y) const {$/;"	f	class:worldmap::Region
get_war	src/War.cc	/^War *get_war(Clan *clan)$/;"	f
get_war_index	src/War.cc	/^int get_war_index(War *war)$/;"	f
get_warp_crystal	src/act_move.cc	/^const Object *get_warp_crystal(const String& str) {$/;"	f
get_warp_loc_string	src/act_move.cc	/^const String get_warp_loc_string(const Object *obj) {$/;"	f
get_weapon_learned	src/handler.cc	/^int get_weapon_learned(Character *ch, skill::type sn)$/;"	f
get_weapon_skill	src/handler.cc	/^skill::type get_weapon_skill(Character *ch, bool secondary)$/;"	f
get_weapon_type	src/lookup.cc	/^int get_weapon_type(const String& name)$/;"	f
giant_strength	src/include/affect/Type.hh	/^    giant_strength,$/;"	m	class:affect::type
giant_strength	src/include/skill/Type.hh	/^    giant_strength,$/;"	m	class:skill::type
global_act	src/channels.cc	/^void global_act(Character *ch, const String& message,$/;"	f
global_ep	src/deps/cJSON/cJSON.c	/^static const char *global_ep;$/;"	v	file:
global_quick	src/fight.cc	/^bool global_quick = false;$/;"	v
gn_add	src/skills.cc	/^void gn_add(Character *ch, int gn)$/;"	f
gn_remove	src/skills.cc	/^void gn_remove(Character *ch, int gn)$/;"	f
god	src/comm.cc	/^bool                god;                \/* All new chars are gods!      *\/$/;"	v
going	src/include/Auction.hh	/^    int      going = 0;  \/* 1,2, sold *\/$/;"	m	class:Auction
gold	src/include/Character.hh	/^    int                gold = 0;$/;"	m	class:Character
gold_balance	src/include/Clan.hh	/^    long        gold_balance = 0;$/;"	m	class:Clan
gold_donated	src/include/Player.hh	/^    long		        gold_donated = 0; \/* Montrey *\/$/;"	m	class:Player
gold_in_bank	src/include/Character.hh	/^    int                gold_in_bank = 0;$/;"	m	class:Character
gold_weight	src/include/Character.hh	/^#define gold_weight(/;"	d
gold_weight	src/include/macros.hh	/^#define gold_weight(/;"	d
goto_line	src/comm.cc	/^void goto_line(Character *ch, int row, int column)$/;"	f
green	src/include/util/Image.hh	/^	enum Channel { red = 0, green, blue, alpha };$/;"	e	enum:util::Image::Channel
green	src/include/worldmap/MapColor.hh	/^	unsigned int red, green, blue;$/;"	m	class:worldmap::MapColor
group	src/help.cc	/^	int	group;$/;"	m	struct:helpfile_table_type	file:
group	src/include/interp.hh	/^    Flags group;$/;"	m	struct:cmd_type
group	src/include/lootv2.hh	/^	int group;$/;"	m	struct:mod_t
group	src/include/music.hh	/^    String group;$/;"	m	struct:song_data
group	src/include/tables.hh	/^    int group;$/;"	m	struct:raffects
group_add	src/skills.cc	/^void group_add(Character *ch, const String& name, bool deduct)$/;"	f
group_flags	src/include/Character.hh	/^    Flags               group_flags; \/\/ mobs can be members of a group for spec_fun, like ogres\/trolls$/;"	m	class:Character
group_flags	src/include/MobilePrototype.hh	/^    Flags               group_flags;$/;"	m	class:MobilePrototype
group_flags	src/tables.cc	/^const std::vector<flag_type> group_flags = {$/;"	v
group_gain	src/fight.cc	/^int group_gain(Character *ch, Character *victim)$/;"	f
group_known	src/include/Player.hh	/^	std::vector<bool>   group_known;$/;"	m	class:Player
group_lookup	src/skills.cc	/^int group_lookup(const String& name)$/;"	f
group_remove	src/skills.cc	/^void group_remove(Character *ch, const String& name)$/;"	f
group_table	src/const.cc	/^const std::vector<group_type> group_table = {$/;"	v
group_type	src/include/merc.hh	/^struct  group_type$/;"	s
guild	src/Room.cc	/^int Room::guild() const { return prototype.guild; }$/;"	f	class:Room
guild	src/include/Character.hh	/^    Guild              guild = Guild::none; \/\/ was 'class'$/;"	m	class:Character
guild	src/include/ObjectPrototype.hh	/^	Guild			guild = Guild::none;$/;"	m	class:ObjectPrototype
guild	src/include/RoomPrototype.hh	/^	Guild			guild = Guild::none;		\/* guild-only room -- Montrey *\/$/;"	m	class:RoomPrototype
guild_lookup	src/lookup.cc	/^Guild guild_lookup(const String& name)$/;"	f
guild_mult	src/include/merc.hh	/^	int      guild_mult[Guild::size];  \/* exp multiplier for class, * 100 *\/$/;"	m	struct:pc_race_type
guild_table	src/const.cc	/^const std::vector<guild_type> guild_table = {$/;"	v
guild_type	src/include/merc.hh	/^struct  guild_type$/;"	s
gxp	src/fight.cc	/^int gxp;$/;"	v
haggle	src/include/skill/Type.hh	/^    haggle,$/;"	m	class:skill::type
hammerstrike	src/include/affect/Type.hh	/^    hammerstrike,$/;"	m	class:affect::type
hammerstrike	src/include/skill/Type.hh	/^    hammerstrike,$/;"	m	class:skill::type
hand_to_hand	src/include/skill/Type.hh	/^    hand_to_hand,$/;"	m	class:skill::type
handleInput	src/conn/BreakConnectState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::BreakConnectState
handleInput	src/conn/ClosedState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::ClosedState
handleInput	src/conn/ConfirmNewNameState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::ConfirmNewNameState
handleInput	src/conn/ConfirmNewPassState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::ConfirmNewPassState
handleInput	src/conn/CopyoverRecoverState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::CopyoverRecoverState
handleInput	src/conn/GetAlignmentState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::GetAlignmentState
handleInput	src/conn/GetDeityState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::GetDeityState
handleInput	src/conn/GetGuildState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::GetGuildState
handleInput	src/conn/GetMudExpState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::GetMudExpState
handleInput	src/conn/GetNameState.cc	/^handleInput(Descriptor *d, const String& args) {$/;"	f	class:conn::GetNameState
handleInput	src/conn/GetNewPassState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::GetNewPassState
handleInput	src/conn/GetOldPassState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::GetOldPassState
handleInput	src/conn/GetRaceState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::GetRaceState
handleInput	src/conn/GetSexState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::GetSexState
handleInput	src/conn/GetWeaponState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::GetWeaponState
handleInput	src/conn/PlayingState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::PlayingState
handleInput	src/conn/ReadIMOTDState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::ReadIMOTDState
handleInput	src/conn/ReadMOTDState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::ReadMOTDState
handleInput	src/conn/ReadNewMOTDState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::ReadNewMOTDState
handleInput	src/conn/RollStatsState.cc	/^handleInput(Descriptor *d, const String& argument) {$/;"	f	class:conn::RollStatsState
harm	src/include/skill/Type.hh	/^    harm,$/;"	m	class:skill::type
has	src/include/Flags.hh	/^	bool has(const Flags::Bit& b) const { return has_all_of(b); }$/;"	f	class:Flags
has_all_of	src/include/Flags.hh	/^	bool has_all_of (const Flags& f) const { return (bits & f.bits) == f.bits; }$/;"	f	class:Flags
has_any_of	src/include/Flags.hh	/^	bool has_any_of (const Flags& f) const { return (bits & f.bits) != 0; }$/;"	f	class:Flags
has_cgroup	src/Character.cc	/^has_cgroup(const Flags& cg) const {$/;"	f	class:Character
has_departed	src/departed.cc	/^bool has_departed(const String& name)$/;"	f
has_enough_qps	src/wiz_gen.cc	/^int has_enough_qps(Character *ch, int number_of)$/;"	f
has_exact_words	src/String.cc	/^has_exact_words(const String& wordlist) const {$/;"	f	class:String
has_infix	src/String.cc	/^has_infix(const String& str, std::size_t min_chars) const {$/;"	f	class:String
has_key	src/act_move.cc	/^bool has_key(Character *ch, int key)$/;"	f
has_modified_contents	src/objstate.cc	/^bool has_modified_contents(Object *obj)$/;"	f
has_none_of	src/include/Flags.hh	/^	bool has_none_of(const Flags& f) const { return (bits & f.bits) == 0; }$/;"	f	class:Flags
has_prefix	src/String.cc	/^has_prefix(const String& str, std::size_t min_chars) const {$/;"	f	class:String
has_suffix	src/String.cc	/^has_suffix(const String& str, std::size_t min_chars) const {$/;"	f	class:String
has_words	src/String.cc	/^has_words(const String& wordlist, bool exact) const {$/;"	f	class:String
haste	src/include/affect/Type.hh	/^    haste,$/;"	m	class:affect::type
haste	src/include/skill/Type.hh	/^    haste,$/;"	m	class:skill::type
heal	src/include/skill/Type.hh	/^    heal,$/;"	m	class:skill::type
heal_rate	src/Room.cc	/^int Room::heal_rate() const { return prototype.heal_rate; }$/;"	f	class:Room
heal_rate	src/include/RoomPrototype.hh	/^	int			heal_rate = 100;$/;"	m	class:RoomPrototype
heat_metal	src/include/skill/Type.hh	/^    heat_metal,$/;"	m	class:skill::type
height	src/include/util/Image.hh	/^	unsigned int height() const { return _height; }$/;"	f	class:util::Image
height	src/include/util/Image.hh	/^	void height(unsigned int v) { _height = v; }$/;"	f	class:util::Image
height	src/include/worldmap/Worldmap.hh	/^	unsigned int height() const { return _height; }$/;"	f	class:worldmap::Worldmap
help	src/help.cc	/^void help(Character *ch, const String& argument)$/;"	f
help_char_search	src/help.cc	/^void help_char_search(Character *ch, const String& arg)$/;"	f
help_greeting	src/Game.cc	/^String Game::help_greeting;$/;"	m	class:Game	file:
help_greeting	src/include/Game.hh	/^	static String help_greeting;$/;"	m	class:Game
help_mob	src/magic.cc	/^bool help_mob(Character *ch, Character *victim)$/;"	f
helpfile_table	src/help.cc	/^const std::vector<helpfile_table_type> helpfile_table = {$/;"	v
helpfile_table_type	src/help.cc	/^struct helpfile_table_type$/;"	s	file:
hex	src/include/affect/Type.hh	/^    hex,$/;"	m	class:affect::type
hex	src/include/skill/Type.hh	/^    hex,$/;"	m	class:skill::type
hide	src/include/affect/Type.hh	/^    hide,$/;"	m	class:affect::type
hide	src/include/skill/Type.hh	/^    hide,$/;"	m	class:skill::type
hide_note	src/Note.cc	/^bool hide_note(Character *ch, Note *pnote)$/;"	f
high	src/include/Battle.hh	/^    int         high = 0;$/;"	m	class:Battle
high_explosive	src/include/skill/Type.hh	/^    high_explosive,$/;"	m	class:skill::type
high_range	src/include/Area.hh	/^    int              high_range = 0;$/;"	m	class:Area
hills	src/include/Sector.hh	/^	hills = 4,$/;"	m	class:Sector
hit	src/include/Character.hh	/^    int              hit = 0;$/;"	m	class:Character
hit	src/include/MobilePrototype.hh	/^    int              hit[3] = {0};$/;"	m	class:MobilePrototype
hit_gain	src/update.cc	/^int hit_gain(Character *ch)$/;"	f
hitp	src/include/merc.hh	/^	int      hitp;$/;"	m	struct:con_app_type
hitroll	src/include/MobilePrototype.hh	/^    int              hitroll = 0;$/;"	m	class:MobilePrototype
holy_sword	src/include/skill/Type.hh	/^    holy_sword,$/;"	m	class:skill::type
holy_word	src/include/skill/Type.hh	/^    holy_word,$/;"	m	class:skill::type
hone	src/include/skill/Type.hh	/^    hone,$/;"	m	class:skill::type
host	src/include/Descriptor.hh	/^    String              host;           \/* text addr *\/$/;"	m	class:Descriptor
hostaddr	src/include/Descriptor.hh	/^    long                hostaddr = 0;       \/* numeric IP addr -- Elrac *\/$/;"	m	class:Descriptor
hour	src/include/GameTime.hh	/^    int         hour = 0;$/;"	m	class:GameTime
hp_max	src/include/merc.hh	/^	int      hp_max;                 \/* Max hp gained on leveling    *\/$/;"	m	struct:guild_type
hp_min	src/include/merc.hh	/^	int      hp_min;                 \/* Min hp gained on leveling    *\/$/;"	m	struct:guild_type
hunt	src/include/skill/Type.hh	/^    hunt,$/;"	m	class:skill::type
hunt_back	src/include/Room.hh	/^	Room *	hunt_back = nullptr;  \/* pointer back toward origin *\/$/;"	m	class:Room
hunt_conditions	src/hunt.cc	/^struct hunt_conditions {$/;"	s	file:
hunt_id	src/include/Room.hh	/^	int			hunt_id = 0;  \/* Unique ID for current hunt *\/$/;"	m	class:Room
hunt_next	src/include/Room.hh	/^	Room *	hunt_next = nullptr;  \/* next room in search circle *\/$/;"	m	class:Room
hunt_victim	src/hunt.cc	/^void hunt_victim(Character *ch)$/;"	f
hunter	src/hunt.cc	/^	Character *hunter;$/;"	m	struct:hunt_conditions	file:
hunting	src/include/Character.hh	/^    Character *         hunting = nullptr;$/;"	m	class:Character
id	src/include/Player.hh	/^	long				id = 0;$/;"	m	class:Player
id	src/include/tables.hh	/^    int id;$/;"	m	struct:raffects
idea_list	src/Note.cc	/^Note *idea_list;$/;"	v
identifier	src/include/Character.hh	/^    virtual const std::string identifier() const { return this->name; }$/;"	f	class:Character
identifier	src/include/Object.hh	/^    virtual const std::string identifier() const { return this->name; }$/;"	f	class:Object
identifier	src/include/String.hh	/^	virtual const std::string identifier() const { return *this; }$/;"	f	class:String
identify	src/include/skill/Type.hh	/^    identify,$/;"	m	class:skill::type
ignore	src/include/Player.hh	/^	std::vector<String> ignore;$/;"	m	class:Player
ignore_offline	src/ignore.cc	/^void ignore_offline(Character *ch, const String& arg)$/;"	f
image	src/include/worldmap/Region.hh	/^	util::Image image;$/;"	m	class:worldmap::Region
imm	src/include/merc.hh	/^	Flags       imm;                    \/* imm bits for the race *\/$/;"	m	struct:race_type
imm_flags	src/include/MobilePrototype.hh	/^    Flags               imm_flags;$/;"	m	class:MobilePrototype
immname	src/include/Player.hh	/^	String              immname;   \/* Immortal Name *\/$/;"	m	class:Player
immprefix	src/include/Player.hh	/^    String              immprefix; \/\/ immtalk prefix$/;"	m	class:Player
immquest_list	src/Note.cc	/^Note *immquest_list;$/;"	v
in_cache	src/affect/affect_cache_array.cc	/^bool in_cache(const Character *ch, ::affect::type type) {$/;"	f	namespace:affect
in_locker	src/include/Object.hh	/^	Character *		in_locker = nullptr;$/;"	m	class:Object
in_obj	src/include/Object.hh	/^	Object *            in_obj = nullptr;$/;"	m	class:Object
in_room	src/include/Character.hh	/^    Room *   in_room = nullptr;$/;"	m	class:Character
in_room	src/include/Object.hh	/^	Room *	in_room = nullptr;$/;"	m	class:Object
in_strongbox	src/include/Object.hh	/^	Character *		in_strongbox = nullptr;$/;"	m	class:Object
inbuf	src/include/Descriptor.hh	/^    char                inbuf           [4 * MAX_INPUT_LENGTH] = {0};$/;"	m	class:Descriptor
incomm	src/include/Descriptor.hh	/^    char                incomm          [MAX_INPUT_LENGTH] = {0};$/;"	m	class:Descriptor
independent	src/include/Clan.hh	/^    bool        independent = false; \/* true for loners and imm clans *\/$/;"	m	class:Clan
init	src/Auction.cc	/^init() {$/;"	f	class:Auction
init	src/QuestArea.cc	/^init() {$/;"	f	class:QuestArea
init_descriptor	src/comm.cc	/^void init_descriptor(int control)$/;"	f
init_mm	src/random.cc	/^void init_mm()$/;"	f
init_socket	src/comm.cc	/^int init_socket(int port)$/;"	f
inlast	src/include/Descriptor.hh	/^    char                inlast          [MAX_INPUT_LENGTH] = {0};$/;"	m	class:Descriptor
insert	src/String.cc	/^insert(const String& what, std::size_t pos) const {$/;"	f	class:String
insert_departed	src/departed.cc	/^void insert_departed(const String& name)$/;"	f
insert_in_list	src/affect/affect_list.cc	/^void insert_in_list(Affect **list_head, Affect *paf) {$/;"	f	namespace:affect
insert_social	src/social.cc	/^void insert_social(Social *s)$/;"	f
insert_storagedata	src/storage.cc	/^void insert_storagedata(StoredPlayer *newdata)$/;"	f
inset	src/gem/gem.cc	/^void inset(Object *gem, Object *obj) {$/;"	f	namespace:gem
inside	src/include/Sector.hh	/^	inside = 0,$/;"	m	class:Sector
int_app	src/const.cc	/^const struct int_app_type int_app[26] = {$/;"	v	typeref:struct:int_app_type
int_app_type	src/include/merc.hh	/^struct  int_app_type$/;"	s
interpolate	src/handler.cc	/^int interpolate(int level, int value_00, int value_32)$/;"	f
interpret	src/interp.cc	/^void interpret(Character *ch, String argument)$/;"	f
interpret_color_code	src/comm.cc	/^String interpret_color_code(Character *ch, char a)$/;"	f
invis	src/include/affect/Type.hh	/^    invis,$/;"	m	class:affect::type
invis	src/include/skill/Type.hh	/^    invis,$/;"	m	class:skill::type
invis_level	src/include/Character.hh	/^    int              invis_level = 0;$/;"	m	class:Character
invitation_accepted	src/include/Character.hh	/^    bool		        invitation_accepted = false;$/;"	m	class:Character
inviters	src/include/Character.hh	/^    Clan *         inviters = nullptr;$/;"	m	class:Character
inwar	src/include/War.hh	/^        bool        inwar = false;$/;"	m	class:War::Opponent
ip	src/include/Descriptor.hh	/^    int                 ip = 0;$/;"	m	class:Descriptor
ironskin	src/include/affect/Type.hh	/^    ironskin,$/;"	m	class:affect::type
is_anvil_owner	src/act_obj.cc	/^int is_anvil_owner(Character *ch, Object *anvil)$/;"	f
is_blank_line	src/edit.cc	/^static bool is_blank_line(char *line)$/;"	f	file:
is_blinded	src/handler.cc	/^bool is_blinded(const Character *ch) {$/;"	f
is_clan	src/handler.cc	/^bool is_clan(Character *ch)$/;"	f
is_dark	src/Room.cc	/^is_dark() const {$/;"	f	class:Room
is_friend	src/handler.cc	/^bool is_friend(Character *ch, Character *victim)$/;"	f
is_garbage	src/include/Garbage.hh	/^	bool is_garbage() const { return _garbage; }$/;"	f	class:Garbage
is_ignoring	src/ignore.cc	/^bool is_ignoring(Character *ch, Character *victim)$/;"	f
is_infix_of	src/String.cc	/^is_infix_of(const String& str, std::size_t min_chars) const {$/;"	f	class:String
is_note_to	src/Note.cc	/^bool is_note_to(Character *ch, Note *pnote)$/;"	f
is_npc	src/include/Character.hh	/^    bool is_npc() const { return pcdata == nullptr; }$/;"	f	class:Character
is_number	src/String.cc	/^is_number() const {$/;"	f	class:String
is_on_map	src/Room.cc	/^bool Room::is_on_map() const { return location.coord.is_valid(); }$/;"	f	class:Room
is_participant	src/Auction.cc	/^is_participant(Character *ch) const {$/;"	f	class:Auction
is_participant	src/Auction.cc	/^is_participant(Object *obj) const {$/;"	f	class:Auction
is_playing	src/Descriptor.cc	/^is_playing() const {$/;"	f	class:Descriptor
is_prefix_of	src/String.cc	/^is_prefix_of(const String& str, std::size_t min_chars) const {$/;"	f	class:String
is_private	src/Room.cc	/^is_private() const {$/;"	f	class:Room
is_questshop	src/include/Shop.hh	/^    bool is_questshop() const { return buy_type[0] == ITEM_QUESTSHOP; }$/;"	f	class:Shop
is_room_owner	src/handler.cc	/^bool is_room_owner(Character *ch, Room *room)$/;"	f
is_safe	src/fight.cc	/^bool is_safe(Character *ch, Character *victim, bool showmsg)$/;"	f
is_safe_char	src/fight.cc	/^bool is_safe_char(Character *ch, Character *victim, bool showmsg)$/;"	f
is_safe_drag	src/act_move.cc	/^bool is_safe_drag(Character *ch, Character *victim)$/;"	f
is_safe_spell	src/fight.cc	/^bool is_safe_spell(Character *ch, Character *victim, bool area)$/;"	f
is_same_clan	src/handler.cc	/^bool is_same_clan(Character *ch, Character *victim)$/;"	f
is_same_group	src/act_comm.cc	/^bool is_same_group(Character *ach, Character *bch)$/;"	f
is_suffix_of	src/String.cc	/^is_suffix_of(const String& str, std::size_t min_chars) const {$/;"	f	class:String
is_used	src/include/worldmap/Quadtree.hh	/^	bool is_used() const {$/;"	f	class:worldmap::Quadtree
is_valid	src/include/Location.hh	/^	bool is_valid() const { return coord.is_valid() || room_id.is_valid(); }$/;"	f	class:Location
is_valid	src/include/RoomID.hh	/^	bool is_valid() const { return !(number_data < 0); }$/;"	f	class:RoomID
is_valid	src/include/worldmap/Coordinate.hh	/^	inline bool is_valid() const { return !(x < 0); }$/;"	f	class:worldmap::Coordinate
is_very_dark	src/Room.cc	/^is_very_dark() const {$/;"	f	class:Room
is_worth_saving	src/objstate.cc	/^bool is_worth_saving(Object *obj)$/;"	f
issued	src/include/Battle.hh	/^    bool        issued = false;$/;"	m	class:Battle
it	src/include/GarbageCollectingList.hh	/^		typename std::list<T>::iterator it;$/;"	m	class:GarbageCollectingList::iterator
item	src/include/Auction.hh	/^    Object  *   item = nullptr;   \/* a pointer to the item *\/$/;"	m	class:Auction
item_lookup	src/lookup.cc	/^int item_lookup(const String& name)$/;"	f
item_name	src/typename.cc	/^String item_name(int item_type)$/;"	f
item_table	src/const.cc	/^const std::vector<item_type> item_table = {$/;"	v
item_type	src/include/Object.hh	/^	int			item_type = 0;$/;"	m	class:Object
item_type	src/include/ObjectPrototype.hh	/^    int              item_type = 0;$/;"	m	class:ObjectPrototype
item_type	src/include/merc.hh	/^struct item_type$/;"	s
item_type_name	src/typename.cc	/^String item_type_name(Object *obj)$/;"	f
iterate_over_char	src/affect/affect_char.cc	/^void iterate_over_char(Character *ch, affect_fn fn, void *data) {$/;"	f	namespace:affect
iterate_over_list	src/affect/affect_list.cc	/^void iterate_over_list(Affect **list_head, affect_fn fn, fn_params *params) {$/;"	f	namespace:affect
iterate_over_obj	src/affect/affect_obj.cc	/^void iterate_over_obj(Object *obj, affect_fn fn, void *data) {$/;"	f	namespace:affect
iterate_over_room	src/affect/affect_room.cc	/^void iterate_over_room(Room *room, affect_fn fn, void *data) {$/;"	f	namespace:affect
iterator	src/include/GarbageCollectingList.hh	/^		iterator(typename std::list<T>::iterator it, GarbageCollectingList<T>& ls) : it(it), list(ls) {}$/;"	f	class:GarbageCollectingList::iterator
iterator	src/include/GarbageCollectingList.hh	/^	class iterator {$/;"	c	class:GarbageCollectingList
janitor_update	src/update.cc	/^void janitor_update()$/;"	f
join_to_char	src/affect/affect_char.cc	/^void join_to_char(Character *ch, Affect *paf)$/;"	f	namespace:affect
join_to_obj	src/affect/affect_obj.cc	/^void join_to_obj(Object *obj, Affect *paf) {$/;"	f	namespace:affect
join_to_room	src/affect/affect_room.cc	/^void join_to_room(Room *room, Affect *paf) {$/;"	f	namespace:affect
ka	src/comm.cc	/^struct ka_struct *ka;$/;"	v	typeref:struct:ka_struct
key	src/Exit.cc	/^key() const {$/;"	f	class:Exit
key	src/include/ExitPrototype.hh	/^    int                 key = 0; \/\/ actually a vnum, but we use -1 as a placeholder for some reason$/;"	m	class:ExitPrototype
keyword	src/Exit.cc	/^keyword() const {$/;"	f	class:Exit
keyword	src/include/Duel.hh	/^        String  keyword;$/;"	m	class:Duel::Arena
keyword	src/include/ExitPrototype.hh	/^    String              keyword;$/;"	m	class:ExitPrototype
keyword	src/include/ExtraDescr.hh	/^    String keyword;              \/* Keyword in look\/examine          *\/$/;"	m	class:ExtraDescr
keyword	src/include/gem/gem.hh	/^	char *		keyword;$/;"	m	struct:gem::quality_st
keyword	src/include/gem/gem.hh	/^    char *      keyword;$/;"	m	struct:gem::type_st
keywords	src/include/Area.hh	/^    String              keywords;   \/* -- Elrac *\/$/;"	m	class:Area
kick	src/include/skill/Type.hh	/^    kick,$/;"	m	class:skill::type
kill_off	src/fight.cc	/^void kill_off(Character *ch, Character *victim)$/;"	f
killed	src/include/MobilePrototype.hh	/^    int              killed = 0;$/;"	m	class:MobilePrototype
know_alignment	src/include/skill/Type.hh	/^    know_alignment,$/;"	m	class:skill::type
languages	src/include/skill/Type.hh	/^    languages,$/;"	m	class:skill::type
last_bank	src/include/Character.hh	/^    time_t              last_bank = 0;  \/* For Bank, duh *\/$/;"	m	class:Character
last_changes	src/include/Player.hh	/^	time_t			    last_changes = 0;$/;"	m	class:Player
last_idea	src/include/Player.hh	/^	time_t			    last_idea = 0;$/;"	m	class:Player
last_immquest	src/include/Player.hh	/^	time_t			    last_immquest = 0;$/;"	m	class:Player
last_level	src/include/Player.hh	/^	int                 last_level = 0;$/;"	m	class:Player
last_logoff	src/include/Player.hh	/^	int			        last_logoff = 0;$/;"	m	class:Player
last_lsite	src/include/Player.hh	/^    String              last_lsite;$/;"	m	class:Player
last_ltime	src/include/Player.hh	/^    time_t              last_ltime = 0;$/;"	m	class:Player
last_note	src/include/Player.hh	/^	time_t			    last_note = 0;$/;"	m	class:Player
last_personal	src/include/Player.hh	/^	time_t			    last_personal = 0;$/;"	m	class:Player
last_roleplay	src/include/Player.hh	/^	time_t			    last_roleplay = 0;$/;"	m	class:Player
last_saved	src/include/Player.hh	/^    time_t              last_saved = 0;$/;"	m	class:Player
last_signal	src/comm.cc	/^int                                     last_signal = -1;$/;"	v
last_trade	src/include/Player.hh	/^	time_t			    last_trade = 0;$/;"	m	class:Player
lastcolor	src/include/Player.hh	/^    int              lastcolor      [2] = {0};$/;"	m	class:Player
lay_on_hands	src/include/skill/Type.hh	/^    lay_on_hands,$/;"	m	class:skill::type
lays	src/include/Player.hh	/^    int              lays = 0;$/;"	m	class:Player
leader	src/include/Character.hh	/^    Character *         leader = nullptr;$/;"	m	class:Character
learn	src/include/merc.hh	/^	int      learn;$/;"	m	struct:int_app_type
learned	src/include/Player.hh	/^	std::vector<int> learned;$/;"	m	class:Player
legendary_base_pool_table	src/loot_tables.cc	/^const std::vector<String> legendary_base_pool_table = {$/;"	v
legendary_name_table	src/loot_tables.cc	/^const std::map<int, std::vector<String> > legendary_name_table = {$/;"	v
length	src/deps/cJSON/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon2	file:
level	src/dispel.cc	/^	int level;$/;"	m	struct:dispel_params	file:
level	src/include/Character.hh	/^    int              level = 0;$/;"	m	class:Character
level	src/include/MobilePrototype.hh	/^    int              level = 0;$/;"	m	class:MobilePrototype
level	src/include/Object.hh	/^	int			level = 0;$/;"	m	class:Object
level	src/include/ObjectPrototype.hh	/^    int              level = 0;$/;"	m	class:ObjectPrototype
level	src/include/affect/Affect.hh	/^    int              level = 0;$/;"	m	class:affect::Affect
level	src/include/gem/gem.hh	/^	int			level;$/;"	m	struct:gem::quality_st
level	src/include/merc.hh	/^	int         level;$/;"	m	struct:wiznet_type
level	src/include/worldmap/Quadtree.hh	/^	unsigned int level = 0;$/;"	m	class:worldmap::Quadtree
level	src/skills.cc	/^	int level; \/* level for the current ch *\/$/;"	m	struct:s_spell_info	file:
level_save	src/dispel.cc	/^bool level_save(int dis_level, int save_level)$/;"	f
light	src/include/Room.hh	/^	int			light = 0;$/;"	m	class:Room
light_of_truth	src/include/skill/Type.hh	/^    light_of_truth,$/;"	m	class:skill::type
lightning_bolt	src/include/skill/Type.hh	/^    lightning_bolt,$/;"	m	class:skill::type
lightning_breath	src/include/skill/Type.hh	/^    lightning_breath,$/;"	m	class:skill::type
lines	src/include/Character.hh	/^    int                 lines = 0;  \/* for the pager *\/$/;"	m	class:Character
lines	src/include/music.hh	/^    int lines;$/;"	m	struct:song_data
liq_lookup	src/lookup.cc	/^int liq_lookup(const String& name)$/;"	f
liq_table	src/const.cc	/^const std::vector<liq_type> liq_table = {$/;"	v
liq_type	src/include/merc.hh	/^struct  liq_type$/;"	s
list	src/include/GarbageCollectingList.hh	/^		GarbageCollectingList& list;$/;"	m	class:GarbageCollectingList::iterator
list_char	src/affect/affect_char.cc	/^const Affect *list_char(Character *ch) {$/;"	f	namespace:affect
list_exits	src/act_info.cc	/^const String list_exits(Character *ch, bool fAuto) {$/;"	f
list_extraskill	src/remort.cc	/^void list_extraskill(Character *ch)$/;"	f
list_obj	src/affect/affect_obj.cc	/^const Affect *list_obj(Object *obj) {$/;"	f	namespace:affect
list_room	src/affect/affect_room.cc	/^const Affect *list_room(Room *room) {$/;"	f	namespace:affect
list_window	src/edit.cc	/^static void list_window(Character *ch)$/;"	f	file:
listline	src/edit.cc	/^static void listline(String& dbuf, int lineno, char *line)$/;"	f	file:
load	src/Area.cc	/^load() {$/;"	f	class:Area
load	src/util/Image.cc	/^bool Image::load(const String& filename) {$/;"	f	class:util::Image
load_areas	src/World.cc	/^load_areas() {$/;"	f	class:World
load_arena_table	src/duel.cc	/^void load_arena_table()$/;"	f
load_char_obj	src/save.cc	/^bool load_char_obj(Descriptor *d, const String& name)$/;"	f
load_clan_table	src/clan-edit.cc	/^void load_clan_table()$/;"	f
load_config	src/load_config.cc	/^int load_config(const char *filename) {$/;"	f
load_departed_list	src/departed.cc	/^void load_departed_list()$/;"	f
load_disabled	src/Disabled.cc	/^void load_disabled()$/;"	f
load_header	src/Area.cc	/^load_header(FILE *fp) {$/;"	f	class:Area
load_mobiles	src/Area.cc	/^load_mobiles(FILE *fp)$/;"	f	class:Area
load_notes	src/Note.cc	/^void load_notes(void)$/;"	f
load_objects	src/Area.cc	/^load_objects(FILE *fp)$/;"	f	class:Area
load_region	src/Area.cc	/^load_region(FILE *fp) {$/;"	f	class:Area
load_resets	src/Area.cc	/^load_resets(FILE *fp)$/;"	f	class:Area
load_rooms	src/Area.cc	/^load_rooms(FILE *fp) {$/;"	f	class:Area
load_shops	src/Area.cc	/^load_shops(FILE *fp)$/;"	f	class:Area
load_social	src/social.cc	/^void load_social(FILE *fp, Social *social)$/;"	f
load_social_table	src/social.cc	/^void load_social_table()$/;"	f
load_songs	src/music.cc	/^void load_songs(void)$/;"	f
load_specials	src/Area.cc	/^load_specials(FILE *fp)$/;"	f	class:Area
load_storage_list	src/storage.cc	/^void load_storage_list()$/;"	f
load_thread	src/Note.cc	/^void load_thread(char *name, Note **list, int type, time_t free_time)$/;"	f
load_war_events	src/War.cc	/^void load_war_events()$/;"	f
load_war_table	src/War.cc	/^void load_war_table()$/;"	f
locate_life	src/include/skill/Type.hh	/^    locate_life,$/;"	m	class:skill::type
locate_object	src/include/skill/Type.hh	/^    locate_object,$/;"	m	class:skill::type
location	src/include/Room.hh	/^    Location       location;$/;"	m	class:Room
location	src/include/affect/Affect.hh	/^    int              location = 0;$/;"	m	class:affect::Affect
locker	src/include/Player.hh	/^    Object *            locker = nullptr;$/;"	m	class:Player
log	src/Logging.cc	/^log(const String& str)$/;"	f	class:Logging
log	src/include/interp.hh	/^    int              log;$/;"	m	struct:cmd_type
log_all	src/Game.cc	/^bool Game::log_all = false;$/;"	m	class:Game	file:
log_all	src/include/Game.hh	/^    static bool log_all;$/;"	m	class:Game
logf	src/include/Logging.hh	/^void logf(const String& fmt, Params... params)$/;"	f	namespace:Logging
logline	src/interp.cc	/^char logline[MAX_STRING_LENGTH] = " "; \/* extern for debug *\/$/;"	v
logon	src/include/Character.hh	/^    time_t              logon = 0;$/;"	m	class:Character
long_descr	src/include/Character.hh	/^    String              long_descr;$/;"	m	class:Character
long_descr	src/include/MobilePrototype.hh	/^    String              long_descr;$/;"	m	class:MobilePrototype
lookup	src/affect/affect_table.cc	/^const ::affect::type lookup(const String& name) {$/;"	f	namespace:affect
lookup	src/affect/affect_table.cc	/^const table_entry& lookup(::affect::type type) {$/;"	f	namespace:affect
lookup	src/skill/skill_table.cc	/^const skill_table_t& lookup(type t) {$/;"	f	namespace:skill
lookup	src/skill/skill_table.cc	/^type lookup(const String& name) {$/;"	f	namespace:skill
lookup_storage_data	src/storage.cc	/^StoredPlayer *lookup_storage_data(const String& name)$/;"	f
lore	src/include/skill/Type.hh	/^    lore,$/;"	m	class:skill::type
low	src/include/Battle.hh	/^    int         low = 0;$/;"	m	class:Battle
low_range	src/include/Area.hh	/^    int              low_range = 0;$/;"	m	class:Area
lowercase	src/String.cc	/^lowercase() const {$/;"	f	class:String
lsplit	src/String.cc	/^lsplit(String& word, const String& chars) const {$/;"	f	class:String
lsplit	src/String.cc	/^lsplit(const String& chars) const {$/;"	f	class:String
lstrip	src/String.cc	/^lstrip(const String& chars) const {$/;"	f	class:String
lurk_level	src/include/Character.hh	/^    int              lurk_level = 0;$/;"	m	class:Character
lyrics	src/include/music.hh	/^    String lyrics[MAX_LINES];$/;"	m	struct:song_data
mace	src/include/skill/Type.hh	/^    mace,$/;"	m	class:skill::type
mage	src/include/Guild.hh	/^	mage = 0,$/;"	e	enum:Guild
mage_poses	src/act_comm.cc	/^std::vector<new_pose_struct> mage_poses = {$/;"	v
magic_missile	src/include/skill/Type.hh	/^    magic_missile,$/;"	m	class:skill::type
main	src/comm.cc	/^int main(int argc, char **argv)$/;"	f
make_bar	src/act_info.cc	/^String make_bar(const String& bgcolor, const String& fgcolor, long info, int numbg, bool imm)$/;"	f
make_corpse	src/fight.cc	/^void make_corpse(Character *ch)$/;"	f
make_garbage	src/include/Garbage.hh	/^	void make_garbage() { _garbage = true; }$/;"	f	class:Garbage
make_pet	src/act_obj.cc	/^void make_pet(Character *ch, Character *pet) {$/;"	f
makedrunk	src/channels.cc	/^String makedrunk(Character *ch, const String& string)$/;"	f
male	src/include/tables.hh	/^	String male;$/;"	m	struct:CleT_type
male	src/include/tables.hh	/^	String male;$/;"	m	struct:MagT_type
male	src/include/tables.hh	/^	String male;$/;"	m	struct:ThiT_type
male	src/include/tables.hh	/^	String male;$/;"	m	struct:WarT_type
malloc_fn	src/deps/cJSON/cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
mana	src/include/Character.hh	/^    int              mana = 0;$/;"	m	class:Character
mana	src/include/MobilePrototype.hh	/^    int              mana[3] = {0};$/;"	m	class:MobilePrototype
mana_gain	src/update.cc	/^int mana_gain(Character *ch)$/;"	f
mana_max	src/include/merc.hh	/^	int	mana_max;		\/* Max mana gained on leveling  *\/$/;"	m	struct:guild_type
mana_min	src/include/merc.hh	/^	int	mana_min;		\/* Min mana gained on leveling  *\/$/;"	m	struct:guild_type
mana_rate	src/Room.cc	/^int Room::mana_rate() const { return prototype.mana_rate; }$/;"	f	class:Room
mana_rate	src/include/RoomPrototype.hh	/^	int			mana_rate = 100;$/;"	m	class:RoomPrototype
manap	src/include/merc.hh	/^	int	manap;		\/* bonus to mana -- Montrey *\/$/;"	m	struct:int_app_type
maptree	src/include/World.hh	/^	worldmap::Quadtree<Room> maptree;$/;"	m	class:World
mark	src/include/affect/Affect.hh	/^    bool                mark = false; \/\/ mark for deletion from list, other uses$/;"	m	class:affect::Affect
mark	src/include/skill/Type.hh	/^    mark,$/;"	m	class:skill::type
mark_room	src/include/Player.hh	/^    Location                 mark_room;$/;"	m	class:Player
mass_healing	src/include/skill/Type.hh	/^    mass_healing,$/;"	m	class:skill::type
mass_invis	src/include/affect/Type.hh	/^    mass_invis,$/;"	m	class:affect::type
mass_invis	src/include/skill/Type.hh	/^    mass_invis,$/;"	m	class:skill::type
master	src/include/Character.hh	/^    Character *         master = nullptr;$/;"	m	class:Character
material	src/include/Character.hh	/^    String              material;$/;"	m	class:Character
material	src/include/MobilePrototype.hh	/^    String              material;$/;"	m	class:MobilePrototype
material	src/include/Object.hh	/^	String 	        material;$/;"	m	class:Object
material	src/include/ObjectPrototype.hh	/^    String              material;$/;"	m	class:ObjectPrototype
max	src/include/World.hh	/^	Vnum min, max;$/;"	m	struct:VnumRange
maxSocial	src/social.cc	/^int maxSocial;$/;"	v
max_level	src/include/QuestArea.hh	/^	int max_level = MAX_LEVEL;$/;"	m	class:QuestArea
max_prefixes	src/lootv2.cc	/^	int max_prefixes;$/;"	m	struct:eq_quality_t	file:
max_stats	src/include/merc.hh	/^	int      max_stats[MAX_STATS];   \/* maximum stats *\/$/;"	m	struct:pc_race_type
max_suffixes	src/lootv2.cc	/^	int max_suffixes;$/;"	m	struct:eq_quality_t	file:
max_vnum	src/include/Area.hh	/^    Vnum                max_vnum = 0;$/;"	m	class:Area
maxvnum	src/include/Duel.hh	/^        Vnum maxvnum = 0;$/;"	m	class:Duel::Arena
meditation	src/include/affect/Type.hh	/^    meditation,$/;"	m	class:affect::type
meditation	src/include/skill/Type.hh	/^    meditation,$/;"	m	class:skill::type
merc_down	src/comm.cc	/^bool            merc_down;              \/* shutdown *\/$/;"	v
message	src/include/tables.hh	/^	String message;$/;"	m	struct:revoke_type
midnight	src/include/affect/Type.hh	/^    midnight,$/;"	m	class:affect::type
midnight	src/include/skill/Type.hh	/^    midnight,$/;"	m	class:skill::type
min	src/include/Auction.hh	/^    int         min = 0;    \/* Minimum bid *\/$/;"	m	class:Auction
min	src/include/World.hh	/^	Vnum min, max;$/;"	m	struct:VnumRange
min_level	src/include/QuestArea.hh	/^	int min_level = 0;$/;"	m	class:QuestArea
min_mana	src/include/skill/skill.hh	/^	int      min_mana;               \/* Minimum mana used            *\/$/;"	m	struct:skill::skill_table_t
min_vnum	src/include/Area.hh	/^    Vnum                min_vnum = 0;$/;"	m	class:Area
minimum_position	src/include/skill/skill.hh	/^	int      minimum_position;       \/* Position for caster \/ user   *\/$/;"	m	struct:skill::skill_table_t
minvnum	src/include/Duel.hh	/^        Vnum minvnum = 0;    \/* actual arena, not prep rooms or view room *\/$/;"	m	class:Duel::Arena
mmhg	src/include/Weather.hh	/^    int         mmhg = 960;$/;"	m	class:Weather
mob_exists	src/handler.cc	/^bool mob_exists(const char *name)$/;"	f
mob_hit	src/fight.cc	/^void mob_hit(Character *ch, Character *victim, skill::type attack_skill)$/;"	f
mob_prototypes	src/include/Area.hh	/^    std::map<Vnum, MobilePrototype *> mob_prototypes;$/;"	m	class:Area
mobile_update	src/update.cc	/^void mobile_update(void)$/;"	f
mobprogs	src/include/MobilePrototype.hh	/^    std::vector<MobProg *> mobprogs;$/;"	m	class:MobilePrototype
mod_mob	src/include/tables.hh	/^	int				mod_mob;$/;"	m	struct:field_type
mod_plr	src/include/tables.hh	/^	int				mod_plr;$/;"	m	struct:field_type
mod_t	src/include/lootv2.hh	/^struct mod_t {$/;"	s
mod_table	src/loot_tables.cc	/^const std::map<affect::type, mod_t> mod_table = {$/;"	v
modifier	src/include/affect/Affect.hh	/^	owner_modifier_fn modifier;$/;"	m	struct:affect::fn_params
modifier	src/include/affect/Affect.hh	/^    int              modifier = 0;$/;"	m	class:affect::Affect
modifier	src/include/gem/gem.hh	/^    int			modifier[Quality::COUNT];$/;"	m	struct:gem::type_st
modify_char	src/affect/affect_char.cc	/^void modify_char(Character *ch, const Affect *paf, bool fAdd) {$/;"	f	namespace:affect
modify_char	src/affect/affect_char.cc	/^void modify_char(void *owner, const Affect *paf, bool fAdd) {$/;"	f	namespace:affect
modify_flag_cache_obj	src/affect/affect_obj.cc	/^void modify_flag_cache_obj(Object *obj, int where, const Flags& flags, bool fAdd) {$/;"	f	namespace:affect
modify_flag_cache_room	src/affect/affect_room.cc	/^void modify_flag_cache_room(Room *room, int where, const Flags& flags, bool fAdd) {$/;"	f	namespace:affect
modify_obj	src/affect/affect_obj.cc	/^void modify_obj(Object *obj, const Affect *paf, bool fAdd) {$/;"	f	namespace:affect
modify_obj	src/affect/affect_obj.cc	/^void modify_obj(void *owner, const Affect *paf, bool fAdd) {$/;"	f	namespace:affect
modify_room	src/affect/affect_room.cc	/^void modify_room(Room *room, const Affect *paf, bool fAdd) {$/;"	f	namespace:affect
modify_room	src/affect/affect_room.cc	/^void modify_room(void *owner, const Affect *paf, bool fAdd) {$/;"	f	namespace:affect
month	src/include/GameTime.hh	/^    int         month = 0;$/;"	m	class:GameTime
month_name	src/GameTime.cc	/^month_name() const {$/;"	f	class:GameTime
month_names	src/file.cc	/^static const String month_names[] = {$/;"	v	file:
motd	src/Game.cc	/^String Game::motd;$/;"	m	class:Game	file:
motd	src/include/Game.hh	/^    static String motd;$/;"	m	class:Game
mountain	src/include/Sector.hh	/^	mountain = 5,$/;"	m	class:Sector
move_char	src/act_move.cc	/^void move_char(Character *ch, int door, bool follow)$/;"	f
mpact	src/include/Character.hh	/^    MobProgActList *    mpact = nullptr;$/;"	m	class:Character
mpactnum	src/include/Character.hh	/^    int                 mpactnum = 0;$/;"	m	class:Character
mprog_act_trigger	src/mob_prog.cc	/^void mprog_act_trigger(const char *buf, Character *mob, Character *ch,$/;"	f
mprog_boot_trigger	src/mob_prog.cc	/^void mprog_boot_trigger(Character *mob)$/;"	f
mprog_bribe_trigger	src/mob_prog.cc	/^void mprog_bribe_trigger(Character *mob, Character *ch, int amount)$/;"	f
mprog_buy_trigger	src/mob_prog.cc	/^void mprog_buy_trigger(Character *mob, Character *ch)$/;"	f
mprog_death_trigger	src/mob_prog.cc	/^void mprog_death_trigger(Character *mob)$/;"	f
mprog_do_ifchck	src/mob_prog.cc	/^bool mprog_do_ifchck(const char *ifchck, Character *mob, Character *actor,$/;"	f
mprog_driver	src/mob_prog.cc	/^void mprog_driver(const String& com_list, Character *mob, Character *actor,$/;"	f
mprog_entry_trigger	src/mob_prog.cc	/^void mprog_entry_trigger(Character *mob)$/;"	f
mprog_fight_trigger	src/mob_prog.cc	/^void mprog_fight_trigger(Character *mob, Character *ch)$/;"	f
mprog_give_trigger	src/mob_prog.cc	/^void mprog_give_trigger(Character *mob, Character *ch, Object *obj)$/;"	f
mprog_greet_trigger	src/mob_prog.cc	/^void mprog_greet_trigger(Character *ch)$/;"	f
mprog_hitprcnt_trigger	src/mob_prog.cc	/^void mprog_hitprcnt_trigger(Character *mob, Character *ch)$/;"	f
mprog_next_command	src/mob_prog.cc	/^char *mprog_next_command(char *clist)$/;"	f
mprog_percent_check	src/mob_prog.cc	/^void mprog_percent_check(Character *mob, Character *actor, Object *obj,$/;"	f
mprog_process_cmnd	src/mob_prog.cc	/^void mprog_process_cmnd(const String& cmnd, Character *mob, Character *actor,$/;"	f
mprog_process_if	src/mob_prog.cc	/^char *mprog_process_if(const char *ifchck, char *com_list, Character *mob,$/;"	f
mprog_random_area_trigger	src/mob_prog.cc	/^void mprog_random_area_trigger(Character *mob)$/;"	f
mprog_random_trigger	src/mob_prog.cc	/^void mprog_random_trigger(Character *mob)$/;"	f
mprog_seval	src/mob_prog.cc	/^bool mprog_seval(const String& lhs, const char *opr, const char *rhs)$/;"	f
mprog_speech_trigger	src/mob_prog.cc	/^void mprog_speech_trigger(const String& txt, Character *mob)$/;"	f
mprog_tick_trigger	src/mob_prog.cc	/^void mprog_tick_trigger(Character *mob)    \/* Montrey *\/$/;"	f
mprog_translate	src/mob_prog.cc	/^String mprog_translate(char ch, Character *mob, Character *actor,$/;"	f
mprog_veval	src/mob_prog.cc	/^bool mprog_veval(int lhs, const char *opr, int rhs)$/;"	f
mprog_wordlist_check	src/mob_prog.cc	/^void mprog_wordlist_check(const String& arg, Character *mob, Character *actor,$/;"	f
msg_obj	src/include/affect/Affect.hh	/^    String        msg_obj;                \/* Wear off message for obects  *\/$/;"	m	struct:affect::table_entry
msg_off	src/include/affect/Affect.hh	/^    String        msg_off;                \/* Wear off message             *\/$/;"	m	struct:affect::table_entry
msg_room	src/include/affect/Affect.hh	/^    String        msg_room;              \/\/ wear off message to room$/;"	m	struct:affect::table_entry
msg_to_room	src/dispel.cc	/^	const String msg_to_room;$/;"	m	struct:dispel_type	file:
mud_exp	src/include/Player.hh	/^	int			    mud_exp = 0;$/;"	m	class:Player
mudstr	src/scripts/fix_pcindex.py	/^import mudstr$/;"	i
mult_argument	src/argument.cc	/^int mult_argument(const String& argument, String& arg) {$/;"	f
mult_argument	src/argument.cc	/^int mult_argument(const char *argument, char *arg)$/;"	f
multi_hit	src/fight.cc	/^void multi_hit(Character *ch, Character *victim, skill::type attack_skill)$/;"	f
name	src/Room.cc	/^const String& Room::name() const { return prototype.name; }$/;"	f	class:Room
name	src/help.cc	/^	String name;$/;"	m	struct:helpfile_table_type	file:
name	src/include/Area.hh	/^    String              name;$/;"	m	class:Area
name	src/include/Character.hh	/^    String              name;$/;"	m	class:Character
name	src/include/Clan.hh	/^    String  name;$/;"	m	class:Clan
name	src/include/DepartedPlayer.hh	/^    String name;$/;"	m	class:DepartedPlayer
name	src/include/Duel.hh	/^        String  name;$/;"	m	class:Duel::Arena
name	src/include/Object.hh	/^	String 	        name;$/;"	m	class:Object
name	src/include/ObjectPrototype.hh	/^    String              name;$/;"	m	class:ObjectPrototype
name	src/include/RoomPrototype.hh	/^	String 		name;$/;"	m	class:RoomPrototype
name	src/include/Social.hh	/^    String    name;$/;"	m	class:Social
name	src/include/StoredPlayer.hh	/^    String name;$/;"	m	class:StoredPlayer
name	src/include/War.hh	/^        String  name;$/;"	m	class:War::Opponent
name	src/include/affect/Affect.hh	/^    String        name;                   \/* Name of skill                *\/$/;"	m	struct:affect::table_entry
name	src/include/interp.hh	/^    String              name;$/;"	m	struct:cmd_type
name	src/include/merc.hh	/^	String      name;                   \/* MUST be in race_type *\/$/;"	m	struct:pc_race_type
name	src/include/merc.hh	/^	String      name;                   \/* call name of the race *\/$/;"	m	struct:race_type
name	src/include/merc.hh	/^	String      name;                   \/* name *\/$/;"	m	struct:attack_type
name	src/include/merc.hh	/^	String      name;                   \/* special function name *\/$/;"	m	struct:spec_type
name	src/include/merc.hh	/^	String      name;                   \/* the full name of the class *\/$/;"	m	struct:guild_type
name	src/include/merc.hh	/^	String      name;$/;"	m	struct:deity_type
name	src/include/merc.hh	/^	String      name;$/;"	m	struct:group_type
name	src/include/merc.hh	/^	String      name;$/;"	m	struct:item_type
name	src/include/merc.hh	/^	String      name;$/;"	m	struct:liq_type
name	src/include/merc.hh	/^	String      name;$/;"	m	struct:weapon_table_t
name	src/include/merc.hh	/^	String      name;$/;"	m	struct:wiznet_type
name	src/include/music.hh	/^    String name;$/;"	m	struct:song_data
name	src/include/skill/skill.hh	/^	String      name;                   \/* Name of skill                *\/$/;"	m	struct:skill::skill_table_t
name	src/include/tables.hh	/^	String			name;$/;"	m	struct:field_type
name	src/include/tables.hh	/^	String name;$/;"	m	struct:affect_table_type
name	src/include/tables.hh	/^	String name;$/;"	m	struct:chan_type
name	src/include/tables.hh	/^	String name;$/;"	m	struct:color_type
name	src/include/tables.hh	/^	String name;$/;"	m	struct:csetting_type
name	src/include/tables.hh	/^	String name;$/;"	m	struct:revoke_type
name	src/include/tables.hh	/^    String name;$/;"	m	struct:flag_type
name	src/include/tables.hh	/^    String name;$/;"	m	struct:position_type
name	src/include/tables.hh	/^    String name;$/;"	m	struct:sector_type
name	src/include/tables.hh	/^    String name;$/;"	m	struct:sex_type
name	src/include/tables.hh	/^    String name;$/;"	m	struct:size_type
name_expand	src/wiz_gen.cc	/^const String name_expand(Character *ch)$/;"	f
name_to_type	src/MobProg.cc	/^name_to_type(const String& name) {$/;"	f	class:MobProg
necromancer	src/include/Guild.hh	/^	necromancer,$/;"	e	enum:Guild
necromancer_poses	src/act_comm.cc	/^std::vector<new_pose_struct> necromancer_poses           = {$/;"	v
nectimer	src/include/Character.hh	/^    int              nectimer = 0;$/;"	m	class:Character
new_color	src/act_info.cc	/^void new_color(Character *ch, int slot)$/;"	f
new_pose_struct	src/act_comm.cc	/^struct new_pose_struct {$/;"	s	file:
new_pose_table	src/act_comm.cc	/^std::vector<std::vector<new_pose_struct> > new_pose_table      = {$/;"	v
newlock	src/Game.cc	/^bool Game::newlock = false;$/;"	m	class:Game	file:
newlock	src/include/Game.hh	/^	static bool newlock;$/;"	m	class:Game
next	src/deps/cJSON/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
next	src/include/Clan.hh	/^    Clan * next = nullptr;$/;"	m	class:Clan
next	src/include/DepartedPlayer.hh	/^    DepartedPlayer *next = nullptr;$/;"	m	class:DepartedPlayer
next	src/include/Descriptor.hh	/^    Descriptor *        next = nullptr;$/;"	m	class:Descriptor
next	src/include/Disabled.hh	/^    Disabled *next = nullptr;             \/* pointer to next node *\/$/;"	m	class:Disabled
next	src/include/Duel.hh	/^        Duel::Arena *    next = nullptr;$/;"	m	class:Duel::Arena
next	src/include/Duel.hh	/^    Duel *next = nullptr;$/;"	m	class:Duel
next	src/include/ExtraDescr.hh	/^    ExtraDescr *next = nullptr;     \/* Next in list                     *\/$/;"	m	class:ExtraDescr
next	src/include/MobProgActList.hh	/^    MobProgActList * next = nullptr;$/;"	m	class:MobProgActList
next	src/include/MobilePrototype.hh	/^    MobilePrototype *   next = nullptr;$/;"	m	class:MobilePrototype
next	src/include/Note.hh	/^    Note      * next = nullptr;$/;"	m	class:Note
next	src/include/Object.hh	/^	Object *            next = nullptr;$/;"	m	class:Object
next	src/include/ObjectPrototype.hh	/^    ObjectPrototype *    next = nullptr;$/;"	m	class:ObjectPrototype
next	src/include/Social.hh	/^    Social * next = nullptr;$/;"	m	class:Social
next	src/include/StoredPlayer.hh	/^    StoredPlayer *next = nullptr;$/;"	m	class:StoredPlayer
next	src/include/Tail.hh	/^    Tail *      next = nullptr;$/;"	m	class:Tail
next	src/include/War.hh	/^        Event *    next = nullptr;$/;"	m	class:War::Event
next	src/include/War.hh	/^        Opponent *  next = nullptr;$/;"	m	class:War::Opponent
next	src/include/War.hh	/^    War *  next = nullptr;$/;"	m	class:War
next	src/include/affect/Affect.hh	/^    Affect *       next = nullptr;$/;"	m	class:affect::Affect
next_content	src/include/Object.hh	/^	Object *            next_content = nullptr;$/;"	m	class:Object
next_in_room	src/include/Character.hh	/^    Character *         next_in_room = nullptr;$/;"	m	class:Character
next_lay_countdown	src/include/Player.hh	/^    int              next_lay_countdown = 0;$/;"	m	class:Player
next_line	src/edit.cc	/^static char *next_line(char *current_line)$/;"	f	file:
nextquest	src/include/Player.hh	/^    int              nextquest = 0;    \/* Vassago *\/$/;"	m	class:Player
nextsquest	src/include/Player.hh	/^	int              nextsquest = 0;$/;"	m	class:Player
nexus	src/include/skill/Type.hh	/^    nexus,$/;"	m	class:skill::type
night_vision	src/include/affect/Type.hh	/^    night_vision,$/;"	m	class:affect::type
night_vision	src/include/skill/Type.hh	/^    night_vision,$/;"	m	class:skill::type
noncombat_regen	src/fight.cc	/^void noncombat_regen(Character *ch) {$/;"	f
none	src/include/Guild.hh	/^	none = -1,$/;"	e	enum:Guild
none	src/include/Sector.hh	/^	none = 255 \/\/ maximum, don't go over this$/;"	m	class:Sector
none	src/include/affect/Type.hh	/^    none = 0, \/\/ don't touch$/;"	m	class:affect::type
not_garbage	src/include/Garbage.hh	/^	void not_garbage() { _garbage = false; }$/;"	f	class:Garbage
note_attach	src/Note.cc	/^void note_attach(Character *ch, int type)$/;"	f
note_list	src/Note.cc	/^Note *note_list;$/;"	v
note_remove	src/Note.cc	/^void note_remove(Character *ch, Note *pnote, bool del)$/;"	f
notify_note_post	src/Note.cc	/^void notify_note_post(Note *pnote, Character *vch, int type)$/;"	f
noun	src/include/merc.hh	/^	String      noun;                   \/* message *\/$/;"	m	struct:attack_type
noun_damage	src/include/skill/skill.hh	/^	String      noun_damage;            \/* Damage message               *\/$/;"	m	struct:skill::skill_table_t
npc_advance_level	src/update.cc	/^void npc_advance_level(Character *ch)$/;"	f
nuke_pets	src/act_comm.cc	/^void nuke_pets(Character *ch)$/;"	f
num1	src/edit.cc	/^static int num1, num2;$/;"	v	file:
num2	src/edit.cc	/^static int num1, num2;$/;"	v	file:
num_bits_coord	src/include/worldmap/Coordinate.hh	/^	inline int num_bits_coord() const { return 15; }$/;"	f	class:worldmap::Coordinate
num_bits_number	src/include/RoomID.hh	/^	inline int num_bits_number() const { return 14; }$/;"	f	class:RoomID
num_bits_vnum	src/include/RoomID.hh	/^	inline int num_bits_vnum() const { return 16; }$/;"	f	class:RoomID
num_imms	src/include/Area.hh	/^    int num_imms() const { return _num_imms; }$/;"	f	class:Area
num_players	src/include/Area.hh	/^    int num_players() const { return _num_players; }$/;"	f	class:Area
num_settings	src/include/Object.hh	/^    char            num_settings = 0;$/;"	m	class:Object
num_settings	src/include/ObjectPrototype.hh	/^    int                 num_settings = 0; \/\/ for socketed gems$/;"	m	class:ObjectPrototype
num_skills	src/skill/skill_table.cc	/^int num_skills() {$/;"	f	namespace:skill
number	src/include/War.hh	/^        int      number = 0;$/;"	m	class:War::Event
number_argument	src/argument.cc	/^int number_argument(const String& argument, String& arg) {$/;"	f
number_argument	src/argument.cc	/^int number_argument(const char *argument, char *arg)$/;"	f
number_bits	src/random.cc	/^int number_bits(int width)$/;"	f
number_data	src/include/RoomID.hh	/^	short number_data;$/;"	m	class:RoomID
number_door	src/random.cc	/^int number_door(void)$/;"	f
number_fuzzy	src/random.cc	/^int number_fuzzy(int number)$/;"	f
number_mm	src/random.cc	/^long number_mm(void)$/;"	f
number_percent	src/random.cc	/^int number_percent(void)$/;"	f
number_range	src/random.cc	/^int number_range(int from, int to)$/;"	f
numeric_args	src/edit.cc	/^static Flags numeric_args;$/;"	v	file:
obj	src/include/MobProgActList.hh	/^    Object *         obj = nullptr;$/;"	m	class:MobProgActList
obj_brew_unique	src/include/affect/Type.hh	/^	obj_brew_unique,$/;"	m	class:affect::type
obj_cast_spell	src/magic.cc	/^void obj_cast_spell(skill::type sn, int level, Character *ch, Character *victim, Object *obj)$/;"	f
obj_forge_unique	src/include/affect/Type.hh	/^	obj_forge_unique,$/;"	m	class:affect::type
obj_from_char	src/handler.cc	/^void obj_from_char(Object *obj)$/;"	f
obj_from_locker	src/handler.cc	/^void obj_from_locker(Object *obj)$/;"	f
obj_from_obj	src/handler.cc	/^void obj_from_obj(Object *obj)$/;"	f
obj_from_room	src/handler.cc	/^void obj_from_room(Object *obj)$/;"	f
obj_from_strongbox	src/handler.cc	/^void obj_from_strongbox(Object *obj)$/;"	f
obj_has_affect	src/affect/affect_obj.cc	/^bool obj_has_affect(Object *obj, ::affect::type type) {$/;"	f	namespace:affect
obj_lidda_aura_unique	src/include/affect/Type.hh	/^	obj_lidda_aura_unique,$/;"	m	class:affect::type
obj_necro_pierce_unique	src/include/affect/Type.hh	/^	obj_necro_pierce_unique,$/;"	m	class:affect::type
obj_prefix_astral	src/include/affect/Type.hh	/^    obj_prefix_astral,$/;"	m	class:affect::type
obj_prefix_brutal	src/include/affect/Type.hh	/^    obj_prefix_brutal,$/;"	m	class:affect::type
obj_prefix_fortuitous	src/include/affect/Type.hh	/^    obj_prefix_fortuitous,$/;"	m	class:affect::type
obj_prefix_healthy	src/include/affect/Type.hh	/^    obj_prefix_healthy,$/;"	m	class:affect::type
obj_prefix_hearty	src/include/affect/Type.hh	/^    obj_prefix_hearty,$/;"	m	class:affect::type
obj_prefix_jagged	src/include/affect/Type.hh	/^    obj_prefix_jagged,$/;"	m	class:affect::type
obj_prefix_lucky	src/include/affect/Type.hh	/^    obj_prefix_lucky,$/;"	m	class:affect::type
obj_prefix_lunar	src/include/affect/Type.hh	/^    obj_prefix_lunar,$/;"	m	class:affect::type
obj_prefix_magical	src/include/affect/Type.hh	/^    obj_prefix_magical,$/;"	m	class:affect::type
obj_prefix_mystical	src/include/affect/Type.hh	/^    obj_prefix_mystical,$/;"	m	class:affect::type
obj_prefix_precise	src/include/affect/Type.hh	/^    obj_prefix_precise,$/;"	m	class:affect::type
obj_prefix_reinforced	src/include/affect/Type.hh	/^    obj_prefix_reinforced,$/;"	m	class:affect::type
obj_prefix_skilled	src/include/affect/Type.hh	/^    obj_prefix_skilled,$/;"	m	class:affect::type
obj_prefix_solar	src/include/affect/Type.hh	/^    obj_prefix_solar,$/;"	m	class:affect::type
obj_prefix_stalwart	src/include/affect/Type.hh	/^    obj_prefix_stalwart,$/;"	m	class:affect::type
obj_prefix_sturdy	src/include/affect/Type.hh	/^    obj_prefix_sturdy,$/;"	m	class:affect::type
obj_prefix_windy	src/include/affect/Type.hh	/^    obj_prefix_windy,$/;"	m	class:affect::type
obj_priestess_unique	src/include/affect/Type.hh	/^	obj_priestess_unique,$/;"	m	class:affect::type
obj_prototypes	src/include/Area.hh	/^    std::map<Vnum, ObjectPrototype *> obj_prototypes;$/;"	m	class:Area
obj_repair	src/special.cc	/^void obj_repair(Character *ch, Object *obj)$/;"	f
obj_scribe_unique	src/include/affect/Type.hh	/^	obj_scribe_unique,$/;"	m	class:affect::type
obj_set_cleric_divine	src/include/affect/Type.hh	/^	obj_set_cleric_divine,$/;"	m	class:affect::type
obj_set_mage_invoker	src/include/affect/Type.hh	/^	obj_set_mage_invoker,$/;"	m	class:affect::type
obj_set_paladin_grace	src/include/affect/Type.hh	/^	obj_set_paladin_grace,$/;"	m	class:affect::type
obj_set_thief_cutpurse	src/include/affect/Type.hh	/^	obj_set_thief_cutpurse,$/;"	m	class:affect::type
obj_set_warrior_berserker	src/include/affect/Type.hh	/^	obj_set_warrior_berserker,$/;"	m	class:affect::type
obj_suffix_advanced_mage	src/include/affect/Type.hh	/^    obj_suffix_advanced_mage,$/;"	m	class:affect::type
obj_suffix_advanced_questor	src/include/affect/Type.hh	/^    obj_suffix_advanced_questor,$/;"	m	class:affect::type
obj_suffix_annihilation	src/include/affect/Type.hh	/^    obj_suffix_annihilation,$/;"	m	class:affect::type
obj_suffix_arcane_power	src/include/affect/Type.hh	/^    obj_suffix_arcane_power,$/;"	m	class:affect::type
obj_suffix_devastation	src/include/affect/Type.hh	/^    obj_suffix_devastation,$/;"	m	class:affect::type
obj_suffix_experienced	src/include/affect/Type.hh	/^    obj_suffix_experienced,$/;"	m	class:affect::type
obj_suffix_falcon	src/include/affect/Type.hh	/^    obj_suffix_falcon,$/;"	m	class:affect::type
obj_suffix_hawk	src/include/affect/Type.hh	/^    obj_suffix_hawk,$/;"	m	class:affect::type
obj_suffix_hexxing	src/include/affect/Type.hh	/^    obj_suffix_hexxing,$/;"	m	class:affect::type
obj_suffix_initiate_mage	src/include/affect/Type.hh	/^    obj_suffix_initiate_mage,$/;"	m	class:affect::type
obj_suffix_initiate_questor	src/include/affect/Type.hh	/^    obj_suffix_initiate_questor,$/;"	m	class:affect::type
obj_suffix_master_mage	src/include/affect/Type.hh	/^    obj_suffix_master_mage,$/;"	m	class:affect::type
obj_suffix_master_questor	src/include/affect/Type.hh	/^    obj_suffix_master_questor,$/;"	m	class:affect::type
obj_suffix_mystic	src/include/affect/Type.hh	/^	obj_suffix_mystic,$/;"	m	class:affect::type
obj_suffix_mystical_power	src/include/affect/Type.hh	/^    obj_suffix_mystical_power,$/;"	m	class:affect::type
obj_suffix_restorative	src/include/affect/Type.hh	/^	obj_suffix_restorative,$/;"	m	class:affect::type
obj_suffix_skilled	src/include/affect/Type.hh	/^    obj_suffix_skilled,$/;"	m	class:affect::type
obj_suffix_skillful	src/include/affect/Type.hh	/^    obj_suffix_skillful,$/;"	m	class:affect::type
obj_suffix_swallow	src/include/affect/Type.hh	/^    obj_suffix_swallow,$/;"	m	class:affect::type
obj_tank_unique	src/include/affect/Type.hh	/^	obj_tank_unique,$/;"	m	class:affect::type
obj_to_char	src/handler.cc	/^void obj_to_char(Object *obj, Character *ch)$/;"	f
obj_to_keeper	src/act_obj.cc	/^void obj_to_keeper(Object *obj, Character *ch)$/;"	f
obj_to_locker	src/handler.cc	/^void obj_to_locker(Object *obj, Character *ch)$/;"	f
obj_to_obj	src/handler.cc	/^void obj_to_obj(Object *obj, Object *obj_to)$/;"	f
obj_to_room	src/handler.cc	/^void obj_to_room(Object *obj, Room *room)$/;"	f
obj_to_strongbox	src/handler.cc	/^void obj_to_strongbox(Object *obj, Character *ch)$/;"	f
obj_update	src/update.cc	/^void obj_update(void)$/;"	f
object_list	src/include/World.hh	/^	Object *object_list = nullptr;$/;"	m	class:World
objstate_load_items	src/objstate.cc	/^int objstate_load_items() {$/;"	f
objstate_save_items	src/objstate.cc	/^int objstate_save_items()$/;"	f
off	src/include/merc.hh	/^	Flags       off;                    \/* off bits for the race *\/$/;"	m	struct:race_type
off_bit_name	src/typename.cc	/^const String off_bit_name(const Flags& flags) {$/;"	f
off_flags	src/include/Character.hh	/^    Flags               off_flags;$/;"	m	class:Character
off_flags	src/include/MobilePrototype.hh	/^    Flags               off_flags;$/;"	m	class:MobilePrototype
off_flags	src/tables.cc	/^const std::vector<flag_type> off_flags = {$/;"	v
offset	src/deps/cJSON/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon2	file:
on	src/include/Character.hh	/^    Object *            on = nullptr;$/;"	m	class:Character
on	src/include/Object.hh	/^	Object *            on = nullptr;$/;"	m	class:Object
one_argument	src/argument.cc	/^const char *one_argument(const String& argument, String& arg) {$/;"	f
one_argument	src/argument.cc	/^const char *one_argument(const char *argument, char *arg_first)$/;"	f
one_hit	src/fight.cc	/^void one_hit(Character *ch, Character *victim, skill::type attack_skill, bool secondary)$/;"	f
one_keyword	src/help.cc	/^const char *one_keyword(const char *keywords, char *word)$/;"	f
ongoing	src/include/War.hh	/^    bool        ongoing = false;$/;"	m	class:War
open	src/include/QuestArea.hh	/^	bool open = false;$/;"	m	class:QuestArea
open_hour	src/include/Shop.hh	/^    int      open_hour = 0;              \/* First opening hour           *\/$/;"	m	class:Shop
operator !=	src/String.cc	/^bool operator!= (const String &lhs, const String &rhs) {$/;"	f
operator !=	src/String.cc	/^bool operator!= (const String &lhs, const char *rhs) {$/;"	f
operator !=	src/include/Area.hh	/^inline bool operator!=(const Area& lhs, const Area& rhs) {$/;"	f
operator !=	src/include/Flags.hh	/^inline bool operator!= (const Flags& lhs, const Flags& rhs) {$/;"	f
operator !=	src/include/GarbageCollectingList.hh	/^		friend bool operator!=(const iterator& lhs, const iterator& rhs) { return !(lhs == rhs); }$/;"	f	class:GarbageCollectingList::iterator
operator !=	src/include/Location.hh	/^	inline friend bool operator!=(const Location& lhs, const Location& rhs) {$/;"	f	class:Location
operator !=	src/include/ObjectValue.hh	/^inline bool operator!=(const ObjectValue& lhs, const ObjectValue& rhs) {$/;"	f
operator !=	src/include/RoomID.hh	/^	inline friend bool operator!=(const RoomID& lhs, const RoomID& rhs) { return !(lhs == rhs); }$/;"	f	class:RoomID
operator !=	src/include/Vnum.hh	/^	inline friend bool operator!=(const Vnum& lhs, const Vnum& rhs) { return !(lhs == rhs); }$/;"	f	class:Vnum
operator !=	src/include/worldmap/Coordinate.hh	/^	inline friend bool operator!=(const Coordinate& lhs, const Coordinate& rhs) {$/;"	f	class:worldmap::Coordinate
operator !=	src/include/worldmap/MapColor.hh	/^	inline bool operator!=(const MapColor& rhs) const {$/;"	f	class:worldmap::MapColor
operator ()	src/String.cc	/^	bool operator() (char lhs, char rhs) {$/;"	f	struct:case_insensitive_equal
operator *	src/include/GarbageCollectingList.hh	/^		T& operator*() { return *it; }$/;"	f	class:GarbageCollectingList::iterator
operator +	src/include/Flags.hh	/^	const Flags operator+ (const Flags& rhs) const { return Flags(*this) += rhs; }$/;"	f	class:Flags
operator +	src/include/Flags.hh	/^inline const Flags operator+ (const Flags::Bit& lhs, const Flags::Bit& rhs) {$/;"	f
operator +	src/include/ObjectValue.hh	/^	const ObjectValue operator+(const Flags& rhs) { return ObjectValue(*this) += rhs; }$/;"	f	class:ObjectValue
operator +	src/include/ObjectValue.hh	/^	const ObjectValue operator+(const ObjectValue& rhs) { return ObjectValue(*this) += rhs; }$/;"	f	class:ObjectValue
operator +	src/include/ObjectValue.hh	/^	const ObjectValue operator+(int rhs) { return ObjectValue(*this) += rhs; }$/;"	f	class:ObjectValue
operator ++	src/include/GarbageCollectingList.hh	/^		iterator& operator++() {$/;"	f	class:GarbageCollectingList::iterator
operator ++	src/include/ObjectValue.hh	/^	ObjectValue& operator++() { ++_value; return *this; }$/;"	f	class:ObjectValue
operator ++	src/include/ObjectValue.hh	/^	const ObjectValue operator++(int) { ObjectValue copy(*this); ++_value; return copy; }$/;"	f	class:ObjectValue
operator +=	src/ObjectValue.cc	/^operator+=(const ObjectValue &rhs) {$/;"	f	class:ObjectValue
operator +=	src/include/Flags.hh	/^	Flags& operator+= (const Flags& rhs) { bits |=  rhs.bits; return *this; }$/;"	f	class:Flags
operator +=	src/include/ObjectValue.hh	/^	ObjectValue& operator+=(const Flags& rhs) { *this += ObjectValue(rhs); return *this; }$/;"	f	class:ObjectValue
operator +=	src/include/ObjectValue.hh	/^	ObjectValue& operator+=(int rhs) { *this += ObjectValue(rhs); return *this; }$/;"	f	class:ObjectValue
operator -	src/include/Flags.hh	/^	const Flags operator- (const Flags& rhs) const { return Flags(*this) -= rhs; }$/;"	f	class:Flags
operator -	src/include/ObjectValue.hh	/^	const ObjectValue operator-(const Flags& rhs) { return ObjectValue(*this) -= rhs; }$/;"	f	class:ObjectValue
operator -	src/include/ObjectValue.hh	/^	const ObjectValue operator-(const ObjectValue& rhs) { return ObjectValue(*this) -= rhs; }$/;"	f	class:ObjectValue
operator -	src/include/ObjectValue.hh	/^	const ObjectValue operator-(int rhs) { return ObjectValue(*this) -= rhs; }$/;"	f	class:ObjectValue
operator --	src/include/ObjectValue.hh	/^	ObjectValue& operator--() { --_value; return *this; }$/;"	f	class:ObjectValue
operator --	src/include/ObjectValue.hh	/^	const ObjectValue operator--(int) { ObjectValue copy(*this); --_value; return copy; }$/;"	f	class:ObjectValue
operator -=	src/ObjectValue.cc	/^operator-=(const ObjectValue &rhs) {$/;"	f	class:ObjectValue
operator -=	src/include/Flags.hh	/^	Flags& operator-= (const Flags& rhs) { bits &= ~rhs.bits; return *this; }$/;"	f	class:Flags
operator -=	src/include/ObjectValue.hh	/^	ObjectValue& operator-=(const Flags& rhs) { *this -= ObjectValue(rhs); return *this; }$/;"	f	class:ObjectValue
operator -=	src/include/ObjectValue.hh	/^	ObjectValue& operator-=(int rhs) { *this -= ObjectValue(rhs); return *this; }$/;"	f	class:ObjectValue
operator <	src/include/RoomID.hh	/^	inline friend bool operator<(const RoomID& lhs, const RoomID& rhs) { return lhs.to_int() < rhs.to_int(); }$/;"	f	class:RoomID
operator <	src/include/Vnum.hh	/^	inline friend bool  operator<(const Vnum& lhs, const Vnum& rhs) { return lhs._value < rhs._value; }$/;"	f	class:Vnum
operator <	src/include/World.hh	/^	inline friend bool operator<(const VnumRange& lhs, const VnumRange& rhs) { return lhs.max < rhs.min; }$/;"	f	struct:VnumRange
operator <	src/include/worldmap/MapColor.hh	/^	inline bool operator<(const MapColor& rhs) const {$/;"	f	class:worldmap::MapColor
operator <=	src/include/Vnum.hh	/^	inline friend bool operator<=(const Vnum& lhs, const Vnum& rhs) { return !(lhs > rhs); }$/;"	f	class:Vnum
operator =	src/ObjectValue.cc	/^operator=(const Flags& rhs) {$/;"	f	class:ObjectValue
operator =	src/include/Flags.hh	/^	Flags& operator=(const Flags& f) { bits = f.bits; return *this; }$/;"	f	class:Flags
operator =	src/include/GarbageCollectingList.hh	/^		iterator& operator=(const iterator& rhs) { it = rhs; return *this; }$/;"	f	class:GarbageCollectingList::iterator
operator =	src/include/Location.hh	/^	Location& operator=(const Location& l) {$/;"	f	class:Location
operator =	src/include/ObjectValue.hh	/^	ObjectValue& operator=(const ObjectValue& rhs) {$/;"	f	class:ObjectValue
operator =	src/include/ObjectValue.hh	/^	ObjectValue& operator=(const Vnum& rhs) { this->_value = rhs.value(); return *this; }$/;"	f	class:ObjectValue
operator =	src/include/ObjectValue.hh	/^	ObjectValue& operator=(int rhs) { this->_value = rhs; return *this; }$/;"	f	class:ObjectValue
operator =	src/include/RoomID.hh	/^	RoomID& operator=(const RoomID& id) {$/;"	f	class:RoomID
operator =	src/include/String.hh	/^	String& operator=(const String& name) {$/;"	f	class:String
operator =	src/include/String.hh	/^	String& operator=(const char ch) {$/;"	f	class:String
operator =	src/include/Vnum.hh	/^	Vnum& operator=(const Vnum& v) { _value = v._value; return *this; }$/;"	f	class:Vnum
operator =	src/include/worldmap/Coordinate.hh	/^	Coordinate& operator=(const Coordinate& c) { x = c.x; y = c.y; return *this; }$/;"	f	class:worldmap::Coordinate
operator =	src/include/worldmap/MapColor.hh	/^	MapColor& operator=(const MapColor& m) {$/;"	f	class:worldmap::MapColor
operator ==	src/String.cc	/^bool operator== (const String &lhs, const String &rhs) {$/;"	f
operator ==	src/String.cc	/^bool operator== (const String &lhs, const char *rhs) {$/;"	f
operator ==	src/include/Area.hh	/^inline bool operator==(const Area& lhs, const Area& rhs) {$/;"	f
operator ==	src/include/Flags.hh	/^inline bool operator== (const Flags& lhs, const Flags& rhs) {$/;"	f
operator ==	src/include/GarbageCollectingList.hh	/^		friend bool operator==(const iterator& lhs, const iterator& rhs) { return lhs.it == rhs.it; }$/;"	f	class:GarbageCollectingList::iterator
operator ==	src/include/Location.hh	/^	inline friend bool operator==(const Location& lhs, const Location& rhs) {$/;"	f	class:Location
operator ==	src/include/ObjectValue.hh	/^inline bool operator==(const ObjectValue& lhs, const ObjectValue& rhs) {$/;"	f
operator ==	src/include/RoomID.hh	/^	inline friend bool operator==(const RoomID& lhs, const RoomID& rhs) { return lhs.to_int() == rhs.to_int(); }$/;"	f	class:RoomID
operator ==	src/include/RoomPrototype.hh	/^	inline bool operator==(const RoomPrototype& rhs) const {$/;"	f	class:RoomPrototype
operator ==	src/include/Vnum.hh	/^	inline friend bool operator==(const Vnum& lhs, const Vnum& rhs) { return lhs._value == rhs._value; }$/;"	f	class:Vnum
operator ==	src/include/worldmap/Coordinate.hh	/^	inline friend bool operator==(const Coordinate& lhs, const Coordinate& rhs) {$/;"	f	class:worldmap::Coordinate
operator ==	src/include/worldmap/MapColor.hh	/^	inline bool operator==(const MapColor& rhs) const {$/;"	f	class:worldmap::MapColor
operator >	src/include/Vnum.hh	/^	inline friend bool  operator>(const Vnum& lhs, const Vnum& rhs) { return rhs < lhs; }$/;"	f	class:Vnum
operator >=	src/include/Vnum.hh	/^	inline friend bool operator>=(const Vnum& lhs, const Vnum& rhs) { return !(lhs < rhs); }$/;"	f	class:Vnum
operator Flags	src/ObjectValue.cc	/^operator Flags() const {$/;"	f	class:ObjectValue
operator Vnum	src/include/ObjectValue.hh	/^	operator Vnum() const { return Vnum(value()); }$/;"	f	class:ObjectValue
operator ^=	src/ObjectValue.cc	/^operator^=(const Flags& rhs) {$/;"	f	class:ObjectValue
operator ^=	src/include/Flags.hh	/^	Flags& operator^= (const Flags& rhs) { bits ^=  rhs.bits; return *this; }$/;"	f	class:Flags
operator delete	src/include/Pooled.hh	/^	inline void operator delete( void *p ) {$/;"	f	class:Pooled
operator int	src/include/ObjectValue.hh	/^	operator int() const { return value(); }$/;"	f	class:ObjectValue
operator new	src/include/Pooled.hh	/^	inline void *operator new( size_t stAllocateBlock) {$/;"	f	class:Pooled
operator |	src/include/Flags.hh	/^	const Flags operator| (const Bit& rhs) const { return Flags(*this) += Flags(rhs); }$/;"	f	class:Flags
operator |	src/include/Flags.hh	/^inline const Flags operator| (const Flags::Bit& lhs, const Flags::Bit& rhs) {$/;"	f
opposite_dir	src/wiz_build.cc	/^const int opposite_dir [6] =$/;"	v
ordinal_string	src/act_obj.cc	/^char *ordinal_string(int n)$/;"	f
original	src/include/Descriptor.hh	/^    Character *         original = nullptr;$/;"	m	class:Descriptor
other_str	src/include/tables.hh	/^	String other_str;$/;"	m	struct:chan_type
others_auto	src/include/Social.hh	/^    String      others_auto;$/;"	m	class:Social
others_found	src/include/Social.hh	/^    String    others_found;$/;"	m	class:Social
others_no_arg	src/include/Social.hh	/^    String    others_no_arg;$/;"	m	class:Social
outbuf	src/include/Descriptor.hh	/^    String              outbuf;$/;"	m	class:Descriptor
overworld	src/include/World.hh	/^	worldmap::Worldmap overworld;$/;"	m	class:World
owner	src/Room.cc	/^const String& Room::owner() const { return prototype.owner; }$/;"	f	class:Room
owner	src/include/Object.hh	/^	String 	        owner;$/;"	m	class:Object
owner	src/include/RoomPrototype.hh	/^	String 		owner = "";$/;"	m	class:RoomPrototype
owner	src/include/affect/Affect.hh	/^	void *owner;$/;"	m	struct:affect::fn_params
owner_modifier_fn	src/include/affect/Affect.hh	/^typedef void (*owner_modifier_fn)(void *owner, const Affect *paf, bool fAdd);$/;"	t	namespace:affect
p	src/random.cc	/^	int p;$/;"	m	struct:prd_table_entry	file:
pIndexData	src/include/Character.hh	/^    MobilePrototype *   pIndexData = nullptr;$/;"	m	class:Character
pIndexData	src/include/Object.hh	/^	ObjectPrototype *	pIndexData = nullptr;$/;"	m	class:Object
pShop	src/include/MobilePrototype.hh	/^    Shop *              pShop = nullptr;$/;"	m	class:MobilePrototype
page_to_char	src/comm.cc	/^void page_to_char(const String& txt, Character *ch)$/;"	f
pain	src/include/skill/Type.hh	/^    pain,$/;"	m	class:skill::type
paladin	src/include/Guild.hh	/^	paladin,$/;"	e	enum:Guild
paladin_poses	src/act_comm.cc	/^std::vector<new_pose_struct> paladin_poses           = {$/;"	v
paralyze	src/include/affect/Type.hh	/^    paralyze,$/;"	m	class:affect::type
paralyze	src/include/skill/Type.hh	/^    paralyze,$/;"	m	class:skill::type
parry	src/include/skill/Type.hh	/^    parry,$/;"	m	class:skill::type
parse_array	src/deps/cJSON/cJSON.c	/^static const char *parse_array(cJSON *item,const char *value,const char **ep)$/;"	f	file:
parse_deity	src/handler.cc	/^int parse_deity(const String& dstring)$/;"	f
parse_flags	src/affect/affect.cc	/^bool parse_flags(char letter, Affect *paf, Flags& bitvector) {$/;"	f	namespace:affect
parse_flags	src/scripts/mudstr.py	/^def parse_flags(str):$/;"	f
parse_hex4	src/deps/cJSON/cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:
parse_note	src/Note.cc	/^void parse_note(Character *ch, String argument, int type)$/;"	f
parse_number	src/deps/cJSON/cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:
parse_object	src/deps/cJSON/cJSON.c	/^static const char *parse_object(cJSON *item,const char *value,const char **ep)$/;"	f	file:
parse_string	src/deps/cJSON/cJSON.c	/^static const char *parse_string(cJSON *item,const char *str,const char **ep)$/;"	f	file:
parse_value	src/deps/cJSON/cJSON.c	/^static const char *parse_value(cJSON *item,const char *value,const char **ep)$/;"	f	file:
part_bit_name	src/typename.cc	/^const String part_bit_name(const Flags& flags) {$/;"	f
part_flags	src/tables.cc	/^const std::vector<flag_type> part_flags = {$/;"	v
parts	src/include/merc.hh	/^	Flags       parts;                  \/* default parts for the race *\/$/;"	m	struct:race_type
parts_flags	src/include/Character.hh	/^    Flags               parts_flags;$/;"	m	class:Character
parts_flags	src/include/MobilePrototype.hh	/^    Flags               parts_flags;$/;"	m	class:MobilePrototype
pass_door	src/include/affect/Type.hh	/^    pass_door,$/;"	m	class:affect::type
pass_door	src/include/skill/Type.hh	/^    pass_door,$/;"	m	class:skill::type
pc_race	src/include/merc.hh	/^	bool        pc_race;                \/* can be chosen by pcs *\/$/;"	m	struct:race_type
pc_race_table	src/const.cc	/^const std::vector<pc_race_type> pc_race_table = {$/;"	v
pc_race_type	src/include/merc.hh	/^struct pc_race_type  \/* additional data for pc races *\/$/;"	s
pcdata	src/include/Character.hh	/^    Player *            pcdata = nullptr;$/;"	m	class:Character
pcdata_flags	src/tables.cc	/^const std::vector<flag_type> pcdata_flags = {$/;"	v
pckilled	src/include/Player.hh	/^	int                 pckilled = 0;$/;"	m	class:Player
pckills	src/include/Player.hh	/^	int                 pckills = 0;$/;"	m	class:Player
peek	src/include/skill/Type.hh	/^    peek,$/;"	m	class:skill::type
people	src/include/Room.hh	/^	Character *		people = nullptr;$/;"	m	class:Room
permanent	src/include/affect/Affect.hh	/^    bool                permanent = false;$/;"	m	class:affect::Affect
pers_eq_ok	src/act_obj.cc	/^bool pers_eq_ok(Character *ch, Object *obj, const String& action)$/;"	f
personal_list	src/Note.cc	/^Note *personal_list;$/;"	v
pet	src/include/Character.hh	/^    Character *         pet = nullptr;			\/* not saving at quit - Montrey *\/$/;"	m	class:Character
pick_lock	src/include/skill/Type.hh	/^    pick_lock,$/;"	m	class:skill::type
pk	src/include/QuestArea.hh	/^	bool pk = true; \/\/ unlimited pk$/;"	m	class:QuestArea
pkrank	src/include/Player.hh	/^	int			        pkrank = 0;$/;"	m	class:Player
pktimer	src/include/Player.hh	/^    int              pktimer = 0;$/;"	m	class:Player
plague	src/include/affect/Type.hh	/^    plague,$/;"	m	class:affect::type
plague	src/include/skill/Type.hh	/^    plague,$/;"	m	class:skill::type
played	src/include/Player.hh	/^	int                 played = 0;$/;"	m	class:Player
player	src/scripts/fix_pcindex.py	/^  player = pmap[name]$/;"	v
player_name	src/include/MobilePrototype.hh	/^    String              player_name;$/;"	m	class:MobilePrototype
playing	src/conn/State.cc	/^PlayingState State::playing;$/;"	m	class:conn::State	file:
playing	src/include/conn/State.hh	/^	static PlayingState playing;$/;"	m	struct:conn::State
plr_bit_name	src/typename.cc	/^const String plr_bit_name(const Flags& flags) {$/;"	f
plr_flags	src/include/Player.hh	/^    Flags               plr_flags; \/* Extra PLR flags *\/$/;"	m	class:Player
plr_flags	src/tables.cc	/^const std::vector<flag_type> plr_flags = {$/;"	v
pmap	src/scripts/fix_pcindex.py	/^pmap = {}$/;"	v
pnote	src/include/Character.hh	/^    Note      *         pnote = nullptr;$/;"	m	class:Character
points	src/include/Player.hh	/^	int              points = 0;$/;"	m	class:Player
points	src/include/merc.hh	/^	int      points;                 \/* cost in points of the race *\/$/;"	m	struct:pc_race_type
poison	src/include/affect/Type.hh	/^    poison,$/;"	m	class:affect::type
poison	src/include/skill/Type.hh	/^    poison,$/;"	m	class:skill::type
poison_effect	src/effects.cc	/^void poison_effect(void *vo, int level, int dam, int target, int evolution)$/;"	f
polearm	src/include/skill/Type.hh	/^    polearm,$/;"	m	class:skill::type
polymorph	src/include/skill/Type.hh	/^    polymorph,$/;"	m	class:skill::type
pool_allocated	src/include/Pooled.hh	/^	static unsigned int& pool_allocated() {$/;"	f	class:Pooled
pool_free	src/include/Pooled.hh	/^	static unsigned int pool_free() {$/;"	f	class:Pooled
port	src/Game.cc	/^int Game::port;$/;"	m	class:Game	file:
port	src/include/Descriptor.hh	/^    int                 port = 0;$/;"	m	class:Descriptor
port	src/include/Game.hh	/^	static int port;$/;"	m	class:Game
portal	src/include/skill/Type.hh	/^    portal,$/;"	m	class:skill::type
position	src/include/Character.hh	/^    int              position = 0;$/;"	m	class:Character
position	src/include/interp.hh	/^    int              position;$/;"	m	struct:cmd_type
position_lookup	src/lookup.cc	/^int position_lookup(const String& name)$/;"	f
position_table	src/tables.cc	/^const std::vector<position_type> position_table = {$/;"	v
position_type	src/include/tables.hh	/^struct position_type$/;"	s
pow2gt	src/deps/cJSON/cJSON.c	/^static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}$/;"	f	file:
power_word	src/include/skill/Type.hh	/^    power_word,$/;"	m	class:skill::type
prac_by_group	src/act_info.cc	/^void prac_by_group(Character *ch, const String& argument)$/;"	f
prac_by_key	src/act_info.cc	/^void prac_by_key(Character *ch, const String& key, const char *argument)$/;"	f
practice	src/include/Character.hh	/^    int              practice = 0;$/;"	m	class:Character
practice	src/include/merc.hh	/^	int      practice;$/;"	m	struct:wis_app_type
prd_chance	src/random.cc	/^bool prd_chance(int *prev_fails, int p) {$/;"	f
prd_table	src/random.cc	/^const float prd_table[] = {$/;"	v
prd_table_entry	src/random.cc	/^struct prd_table_entry {$/;"	s	file:
precompute	src/include/worldmap/MapColor.hh	/^	void precompute() {$/;"	f	class:worldmap::MapColor
prefix	src/include/Character.hh	/^    String              prefix;$/;"	m	class:Character
prefix_self	src/include/tables.hh	/^	String prefix_self;$/;"	m	struct:chan_type
prefixes_allowed	src/loot_tables.cc	/^const std::multimap<int, affect::type> prefixes_allowed = {$/;"	v
prep_timer	src/include/Duel.hh	/^    int     prep_timer = 0;$/;"	m	class:Duel
prepare_char	src/duel.cc	/^void prepare_char(Character *ch, Duel *duel)$/;"	f
prev	src/deps/cJSON/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::
prev	src/include/affect/Affect.hh	/^    Affect *       prev = nullptr; \/\/ now a doubly liked list -- Montrey$/;"	m	class:affect::Affect
previous	src/include/Clan.hh	/^    Clan * previous = nullptr;$/;"	m	class:Clan
previous	src/include/DepartedPlayer.hh	/^    DepartedPlayer *previous = nullptr;$/;"	m	class:DepartedPlayer
previous	src/include/Duel.hh	/^        Duel::Arena *    previous = nullptr;$/;"	m	class:Duel::Arena
previous	src/include/Duel.hh	/^    Duel *previous = nullptr;$/;"	m	class:Duel
previous	src/include/Social.hh	/^    Social * previous = nullptr;$/;"	m	class:Social
previous	src/include/StoredPlayer.hh	/^    StoredPlayer *previous = nullptr;$/;"	m	class:StoredPlayer
previous	src/include/War.hh	/^    War *  previous = nullptr;$/;"	m	class:War
print_array	src/deps/cJSON/cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:
print_bit_names	src/typename.cc	/^const String print_bit_names(const std::vector<flag_type> &flag_table, const Flags& flags) {$/;"	f
print_cache	src/affect/affect_cache_array.cc	/^String print_cache(Character *ch) {$/;"	f	namespace:affect
print_defense_modifiers	src/attribute.cc	/^String print_defense_modifiers(Character *ch, int where) {$/;"	f
print_new_affects	src/act_info.cc	/^void print_new_affects(Character *ch)$/;"	f
print_number	src/deps/cJSON/cJSON.c	/^static char *print_number(cJSON *item,printbuffer *p)$/;"	f	file:
print_object	src/deps/cJSON/cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:
print_string	src/deps/cJSON/cJSON.c	/^static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}$/;"	f	file:
print_string_ptr	src/deps/cJSON/cJSON.c	/^static char *print_string_ptr(const char *str,printbuffer *p)$/;"	f	file:
print_value	src/deps/cJSON/cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:
printbuffer	src/deps/cJSON/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	t	typeref:struct:__anon2	file:
printf	src/include/Format.hh	/^int printf(const String& fmt, Params&&... params) {$/;"	f	namespace:Format
process_output	src/comm.cc	/^bool process_output(Descriptor *d, bool fPrompt)$/;"	f
profit_buy	src/include/Shop.hh	/^    int      profit_buy = 0;             \/* Cost multiplier for buying   *\/$/;"	m	class:Shop
profit_sell	src/include/Shop.hh	/^    int      profit_sell = 0;            \/* Cost multiplier for selling  *\/$/;"	m	class:Shop
progtype_flags	src/include/MobilePrototype.hh	/^    Flags               progtype_flags;$/;"	m	class:MobilePrototype
prompt	src/include/Character.hh	/^    String              prompt;$/;"	m	class:Character
propose	src/include/Player.hh	/^    String              propose;$/;"	m	class:Player
protect_container	src/include/skill/Type.hh	/^    protect_container,$/;"	m	class:skill::type
protection_evil	src/include/affect/Type.hh	/^    protection_evil,$/;"	m	class:affect::type
protection_evil	src/include/skill/Type.hh	/^    protection_evil,$/;"	m	class:skill::type
protection_good	src/include/affect/Type.hh	/^    protection_good,$/;"	m	class:affect::type
protection_good	src/include/skill/Type.hh	/^    protection_good,$/;"	m	class:skill::type
prototype	src/include/Exit.hh	/^    const ExitPrototype& prototype;$/;"	m	class:Exit
prototype	src/include/Room.hh	/^	RoomPrototype& prototype;$/;"	m	class:Room
ptc	src/include/Character.hh	/^void ptc(Character *ch, const String& fmt, Params&&... params)$/;"	f
pulse	src/include/Auction.hh	/^    int      pulse = 0;  \/* how many pulses (.25 sec) until another call-out ? *\/$/;"	m	class:Auction
put	src/include/worldmap/Quadtree.hh	/^	void put(T *data, const Coordinate& coord) {$/;"	f	class:worldmap::Quadtree
pwd	src/include/Player.hh	/^	String              pwd;$/;"	m	class:Player
quality	src/include/EQSocket.hh	/^    char quality = 0;$/;"	m	class:EQSocket
quality	src/include/gem/gem.hh	/^	int			quality;$/;"	m	struct:gem::quality_st
quality_st	src/include/gem/gem.hh	/^struct quality_st$/;"	s	namespace:gem
quality_table	src/gem/gem.cc	/^const quality_st quality_table [Quality::COUNT] = {$/;"	m	namespace:gem	file:
query	src/include/Player.hh	/^	std::vector<String> query;$/;"	m	class:Player
quest	src/include/World.hh	/^	QuestArea quest;$/;"	m	class:World
quest_cleanup	src/quest.cc	/^void quest_cleanup(Character *ch) {$/;"	f
quest_double	src/Game.cc	/^int Game::quest_double = false;$/;"	m	class:Game	file:
quest_double	src/include/Game.hh	/^	static int quest_double;$/;"	m	class:Game
quest_giver	src/include/Player.hh	/^    Vnum                quest_giver = 0;  \/* Elrac *\/$/;"	m	class:Player
quest_info	src/quest.cc	/^void quest_info(Character *ch)$/;"	f
quest_level_diff	src/quest.cc	/^bool quest_level_diff(int clevel, int mlevel)$/;"	f
quest_update	src/update.cc	/^void quest_update(void)$/;"	f
quest_usage	src/quest.cc	/^void quest_usage(Character *ch)$/;"	f
quest_where	src/quest.cc	/^void quest_where(Character *ch, char *what)$/;"	f
questloc	src/include/Player.hh	/^    Location             questloc;     \/* -- Elrac *\/$/;"	m	class:Player
questmob	src/include/Player.hh	/^    Vnum             questmob = 0;     \/* Vassago *\/$/;"	m	class:Player
questobf	src/include/Player.hh	/^    int              questobf = 0;     \/* Lotus *\/$/;"	m	class:Player
questobj	src/include/Player.hh	/^    Vnum             questobj = 0;     \/* Vassago *\/$/;"	m	class:Player
questpoints	src/include/Player.hh	/^    int                 questpoints = 0;  \/* Vassago *\/$/;"	m	class:Player
questpoints_donated	src/include/Player.hh	/^    int			        questpoints_donated = 0; \/* Clerve *\/$/;"	m	class:Player
quick	src/include/skill/Type.hh	/^    quick,$/;"	m	class:skill::type
race	src/include/Character.hh	/^    int              race = 0;$/;"	m	class:Character
race	src/include/MobilePrototype.hh	/^    int              race = 0;$/;"	m	class:MobilePrototype
race_lookup	src/lookup.cc	/^int race_lookup(const String& name)$/;"	f
race_table	src/const.cc	/^const std::vector<race_type> race_table = {$/;"	v
race_type	src/include/merc.hh	/^struct race_type$/;"	s
raff_add_to_char	src/remort.cc	/^void raff_add_to_char(Character *ch, int raff_id) {$/;"	f
raff_lookup	src/remort.cc	/^int raff_lookup(int index)$/;"	f
raffect	src/include/Player.hh	/^    int			        raffect        [MAX_RAFFECT_SLOTS] = {0};$/;"	m	class:Player
raffects	src/include/tables.hh	/^struct raffects$/;"	s
raffects	src/tables.cc	/^const struct raffects raffects[MAX_RAFFECTS] = {$/;"	v	typeref:struct:raffects
rage	src/include/skill/Type.hh	/^    rage,$/;"	m	class:skill::type
random_prototype	src/lootv2.cc	/^int random_prototype(String key)$/;"	f
ranger	src/include/Guild.hh	/^	ranger,$/;"	e	enum:Guild
ranger_poses	src/act_comm.cc	/^std::vector<new_pose_struct> ranger_poses           = {$/;"	v
rank	src/include/Player.hh	/^    String              rank;$/;"	m	class:Player
rarity	src/include/lootv2.hh	/^	int rarity;$/;"	m	struct:mod_t
rating	src/include/merc.hh	/^	int      rating[Guild::size];$/;"	m	struct:group_type
rating	src/include/skill/skill.hh	/^	int      rating[Guild::size];      \/* How hard it is to learn      *\/$/;"	m	struct:skill::skill_table_t
raw_kill	src/fight.cc	/^void raw_kill(Character *victim)$/;"	f
ray_of_truth	src/include/skill/Type.hh	/^    ray_of_truth,$/;"	m	class:skill::type
rayban	src/include/affect/Type.hh	/^    rayban,$/;"	m	class:affect::type
rayban	src/include/skill/Type.hh	/^    rayban,$/;"	m	class:skill::type
readIMOTD	src/conn/State.cc	/^ReadIMOTDState State::readIMOTD;$/;"	m	class:conn::State	file:
readIMOTD	src/include/conn/State.hh	/^	static ReadIMOTDState readIMOTD;$/;"	m	struct:conn::State
readMOTD	src/conn/State.cc	/^ReadMOTDState State::readMOTD;$/;"	m	class:conn::State	file:
readMOTD	src/include/conn/State.hh	/^	static ReadMOTDState readMOTD;$/;"	m	struct:conn::State
readNewMOTD	src/conn/State.cc	/^ReadNewMOTDState State::readNewMOTD;$/;"	m	class:conn::State	file:
readNewMOTD	src/include/conn/State.hh	/^	static ReadNewMOTDState readNewMOTD;$/;"	m	struct:conn::State
read_file	src/JSON/cJSON.cc	/^cJSON * JSON::read_file(const String& filename) {$/;"	f	class:JSON
read_from_buffer	src/comm.cc	/^void read_from_buffer(Descriptor *d)$/;"	f
read_from_descriptor	src/comm.cc	/^bool read_from_descriptor(Descriptor *d)$/;"	f
read_line	src/storage.cc	/^void read_line(FILE *fp, StoredPlayer *sd)$/;"	f
read_mobprogs	src/MobilePrototype.cc	/^read_mobprogs(FILE *fp) {$/;"	f	class:MobilePrototype
reason	src/include/Disabled.hh	/^    String reason;$/;"	m	class:Disabled
reboot_time	src/comm.cc	/^time_t              reboot_time = 0;$/;"	v
rec_event	src/War.cc	/^void rec_event(War *war, int type, const String& astr, const String& bstr, int number)$/;"	f
recall	src/act_move.cc	/^void recall(Character *ch, bool clan)$/;"	f
recall	src/include/skill/Type.hh	/^    recall,$/;"	m	class:skill::type
recharge	src/include/skill/Type.hh	/^    recharge,$/;"	m	class:skill::type
record_logins	src/Game.cc	/^unsigned long Game::record_logins = 0;$/;"	m	class:Game	file:
record_logins	src/include/Game.hh	/^	static unsigned long record_logins;$/;"	m	class:Game
record_players	src/Game.cc	/^int Game::record_players = 0;$/;"	m	class:Game	file:
record_players	src/include/Game.hh	/^	static int record_players;$/;"	m	class:Game
record_players_since_boot	src/Game.cc	/^int Game::record_players_since_boot = 0;$/;"	m	class:Game	file:
record_players_since_boot	src/include/Game.hh	/^	static int record_players_since_boot;$/;"	m	class:Game
recursive_clone	src/wiz_gen.cc	/^void recursive_clone(Character *ch, Object *obj, Object *clone)$/;"	f
red	src/include/util/Image.hh	/^	enum Channel { red = 0, green, blue, alpha };$/;"	e	enum:util::Image::Channel
red	src/include/worldmap/MapColor.hh	/^	unsigned int red, green, blue;$/;"	m	class:worldmap::MapColor
refresh	src/include/skill/Type.hh	/^    refresh,$/;"	m	class:skill::type
regeneration	src/include/affect/Type.hh	/^    regeneration,$/;"	m	class:affect::type
regeneration	src/include/skill/Type.hh	/^    regeneration,$/;"	m	class:skill::type
region	src/include/Area.hh	/^    worldmap::Region *region = nullptr;$/;"	m	class:Area
rem_raff_affect	src/remort.cc	/^void rem_raff_affect(Character *ch, int index)$/;"	f
remort_affect_modify_char	src/affect/affect_char.cc	/^void remort_affect_modify_char(Character *ch, int where, Flags bitvector, bool fAdd) {$/;"	f	namespace:affect
remort_count	src/include/Player.hh	/^    int              remort_count = 0;$/;"	m	class:Player
remort_guild	src/include/skill/skill.hh	/^	Guild         remort_guild;           \/* Required remort level or 0   *\/$/;"	m	struct:skill::skill_table_t
remort_level	src/include/merc.hh	/^	int         remort_level;           \/* remort level of race *\/$/;"	m	struct:pc_race_type
remove	src/include/GarbageCollectingList.hh	/^    void remove(T ptr) { ptr->make_garbage(); }$/;"	f	class:GarbageCollectingList
remove	src/include/worldmap/Quadtree.hh	/^	void remove(const Coordinate& coord) {$/;"	f	class:worldmap::Quadtree
remove_alignment	src/include/skill/Type.hh	/^    remove_alignment,$/;"	m	class:skill::type
remove_all_from_char	src/affect/affect_char.cc	/^void remove_all_from_char(Character *ch, bool permanent) {$/;"	f	namespace:affect
remove_all_from_obj	src/affect/affect_obj.cc	/^void remove_all_from_obj(Object *obj, bool permanent)$/;"	f	namespace:affect
remove_all_from_room	src/affect/affect_room.cc	/^void remove_all_from_room(Room *room, bool permanent)$/;"	f	namespace:affect
remove_cgroup	src/Character.cc	/^remove_cgroup(const Flags& cg) {$/;"	f	class:Character
remove_char	src/Area.cc	/^remove_char(Character *ch) {$/;"	f	class:Area
remove_char	src/Room.cc	/^remove_char(Character *ch) {$/;"	f	class:Room
remove_char	src/World.cc	/^remove_char(Character *ch) {$/;"	f	class:World
remove_clan	src/clan-edit.cc	/^void remove_clan(const String& name)$/;"	f
remove_curse	src/include/skill/Type.hh	/^    remove_curse,$/;"	m	class:skill::type
remove_departed	src/departed.cc	/^void remove_departed(const String& name)$/;"	f
remove_duel	src/duel.cc	/^void remove_duel(Duel *c)$/;"	f
remove_from_char	src/affect/affect_char.cc	/^void remove_from_char(Character *ch, Affect *paf)$/;"	f	namespace:affect
remove_from_list	src/affect/affect_list.cc	/^void remove_from_list(Affect **list_head, Affect *paf) {$/;"	f	namespace:affect
remove_from_obj	src/affect/affect_obj.cc	/^void remove_from_obj(Object *obj, Affect *paf)$/;"	f	namespace:affect
remove_from_room	src/affect/affect_room.cc	/^void remove_from_room(Room *room, Affect *paf)$/;"	f	namespace:affect
remove_invis	src/include/skill/Type.hh	/^    remove_invis,$/;"	m	class:skill::type
remove_marked_from_char	src/affect/affect_char.cc	/^void remove_marked_from_char(Character *ch) {$/;"	f	namespace:affect
remove_marked_from_obj	src/affect/affect_obj.cc	/^void remove_marked_from_obj(Object *obj) {$/;"	f	namespace:affect
remove_marked_from_room	src/affect/affect_room.cc	/^void remove_marked_from_room(Room *room) {$/;"	f	namespace:affect
remove_matching_from_char	src/affect/affect_char.cc	/^void remove_matching_from_char(Character *ch, comparator comp, const Affect *pattern) {$/;"	f	namespace:affect
remove_matching_from_list	src/affect/affect_list.cc	/^void remove_matching_from_list(Affect **list_head, comparator comp, const Affect *pattern, fn_params *params) {$/;"	f	namespace:affect
remove_matching_from_obj	src/affect/affect_obj.cc	/^void remove_matching_from_obj(Object *obj, comparator comp, const Affect *pattern) {$/;"	f	namespace:affect
remove_matching_from_room	src/affect/affect_room.cc	/^void remove_matching_from_room(Room *room, comparator comp, const Affect *pattern) {$/;"	f	namespace:affect
remove_obj	src/act_obj.cc	/^bool remove_obj(Character *ch, int iWear, bool fReplace)$/;"	f
remove_social	src/social.cc	/^void remove_social(const String& name)$/;"	f
remove_storagedata	src/storage.cc	/^void remove_storagedata(StoredPlayer *olddata)$/;"	f
remove_type_from_char	src/affect/affect_char.cc	/^void remove_type_from_char(Character *ch, ::affect::type type) {$/;"	f	namespace:affect
remove_type_from_obj	src/affect/affect_obj.cc	/^void remove_type_from_obj(Object *obj, ::affect::type type) {$/;"	f	namespace:affect
remove_type_from_room	src/affect/affect_room.cc	/^void remove_type_from_room(Room *room, ::affect::type type) {$/;"	f	namespace:affect
repair	src/include/skill/Type.hh	/^    repair,$/;"	m	class:skill::type
repeat	src/include/Descriptor.hh	/^    int                 repeat = 0;$/;"	m	class:Descriptor
replace	src/String.cc	/^replace(const String& what, const String& with, int times) const {$/;"	f	class:String
reply	src/include/Character.hh	/^    String              reply;$/;"	m	class:Character
replylock	src/include/Character.hh	/^    bool                replylock = false;     \/* <--- made this a bool to simplify *\/$/;"	m	class:Character
res	src/include/merc.hh	/^	Flags       res;                    \/* res bits for the race *\/$/;"	m	struct:race_type
res_flags	src/include/MobilePrototype.hh	/^    Flags               res_flags;$/;"	m	class:MobilePrototype
rescue	src/include/skill/Type.hh	/^    rescue,$/;"	m	class:skill::type
reset	src/Area.cc	/^reset() {$/;"	f	class:Area
reset	src/include/Character.hh	/^    const Reset *	    reset = nullptr;		\/* let's make it keep track of what reset it *\/$/;"	m	class:Character
reset	src/include/Object.hh	/^	const Reset *		reset = nullptr;		\/* let's make it keep track of what reset it *\/$/;"	m	class:Object
reset_num	src/include/ObjectPrototype.hh	/^    int              reset_num = 0;$/;"	m	class:ObjectPrototype
reset_terminal	src/comm.cc	/^void reset_terminal(Character *ch) {$/;"	f
resets	src/include/Area.hh	/^    std::vector<Reset *> resets;$/;"	m	class:Area
restore_char	src/wiz_gen.cc	/^void restore_char(Character *ch, Character *victim)$/;"	f
resurrect	src/include/skill/Type.hh	/^    resurrect,$/;"	m	class:skill::type
rev_dir	src/include/Exit.hh	/^rev_dir(unsigned int dir) {$/;"	f	class:Exit
revoke_bit	src/include/tables.hh	/^	Flags::Bit revoke_bit;$/;"	m	struct:chan_type
revoke_bit_name	src/typename.cc	/^const String revoke_bit_name(const Flags& flags) {$/;"	f
revoke_flags	src/include/Character.hh	/^    Flags               revoke_flags;  \/* New Revoke stuff *\/$/;"	m	class:Character
revoke_flags	src/tables.cc	/^const std::vector<flag_type> revoke_flags = {$/;"	v
revoke_table	src/tables.cc	/^const std::vector<revoke_type> revoke_table = {$/;"	v
revoke_type	src/include/tables.hh	/^struct revoke_type$/;"	s
riposte	src/include/skill/Type.hh	/^    riposte,$/;"	m	class:skill::type
road	src/include/Sector.hh	/^    road = 8,$/;"	m	class:Sector
roleplay_list	src/Note.cc	/^Note *roleplay_list;$/;"	v
rolepoints	src/include/Player.hh	/^	int			        rolepoints = 0;$/;"	m	class:Player
rollStats	src/conn/State.cc	/^RollStatsState State::rollStats;$/;"	m	class:conn::State	file:
rollStats	src/include/conn/State.hh	/^	static RollStatsState rollStats;$/;"	m	struct:conn::State
roll_chance	src/random.cc	/^int roll_chance(int percent) {$/;"	f
roll_mod	src/lootv2.cc	/^const String roll_mod(Object *obj, int eq_type, const std::multimap<int, affect::type>& mods_allowed) {$/;"	f
roll_one_raff	src/remort.cc	/^void roll_one_raff(Character *ch, Character *victim, int place)$/;"	f
roll_raffects	src/remort.cc	/^void roll_raffects(Character *ch, Character *victim)$/;"	f
roll_stat	src/conn/RollStatsState.cc	/^int roll_stat(const Character *ch, int stat)$/;"	f	namespace:conn
room_bit_name	src/typename.cc	/^const String room_bit_name(const Flags& flags) {$/;"	f
room_flags	src/include/Room.hh	/^    Flags           room_flags; \/\/ copied from the prototype for room-specific things, such as NO_MOB from fix_exits$/;"	m	class:Room
room_flags	src/include/RoomPrototype.hh	/^	Flags       room_flags;$/;"	m	class:RoomPrototype
room_flags	src/tables.cc	/^const std::vector<flag_type> room_flags = {$/;"	v
room_id	src/include/Location.hh	/^	RoomID room_id;$/;"	m	class:Location
room_msg	src/act_comm.cc	/^	String room_msg;$/;"	m	struct:new_pose_struct	file:
room_pair	src/wiz_build.cc	/^String room_pair(Room *left, Room *right, exit_status ex) {$/;"	f
room_prototypes	src/include/Area.hh	/^    std::map<Vnum, RoomPrototype *> room_prototypes;$/;"	m	class:Area
room_update	src/update.cc	/^void room_update(void) {$/;"	f
rooms	src/include/Area.hh	/^    std::map<RoomID, Room *> rooms;$/;"	m	class:Area
rotate	src/include/skill/Type.hh	/^    rotate,$/;"	m	class:skill::type
rounddown	src/include/macros.hh	/^#define rounddown(/;"	d
roundhouse	src/include/skill/Type.hh	/^    roundhouse,$/;"	m	class:skill::type
roundup	src/include/macros.hh	/^#define roundup(/;"	d
rows	src/include/util/Image.hh	/^	unsigned char **rows = nullptr;$/;"	m	class:util::Image
rows	src/include/worldmap/Worldmap.hh	/^	unsigned char ** rows = nullptr;$/;"	m	class:worldmap::Worldmap
rsplit	src/String.cc	/^rsplit(String& word, const String& chars) const {$/;"	f	class:String
rsplit	src/String.cc	/^rsplit(const String& chars) const {$/;"	f	class:String
rstrip	src/String.cc	/^rstrip(const String& chars) const {$/;"	f	class:String
s_spell_info	src/skills.cc	/^struct s_spell_info {$/;"	s	file:
same_area	src/hunt.cc	/^	int same_area;$/;"	m	struct:hunt_conditions	file:
sanctuary	src/include/affect/Type.hh	/^    sanctuary,$/;"	m	class:affect::type
sanctuary	src/include/skill/Type.hh	/^    sanctuary,$/;"	m	class:skill::type
sap	src/include/skill/Type.hh	/^    sap,$/;"	m	class:skill::type
save	src/dispel.cc	/^	bool save;$/;"	m	struct:dispel_params	file:
save_char_obj	src/save.cc	/^void save_char_obj(Character *ch)$/;"	f
save_clan_table	src/clan-edit.cc	/^void save_clan_table()$/;"	f
save_departed_list	src/departed.cc	/^void save_departed_list()$/;"	f
save_line	src/storage.cc	/^void save_line(FILE *fp, StoredPlayer *sd)$/;"	f
save_notes	src/Note.cc	/^void save_notes(int type)$/;"	f
save_number	src/update.cc	/^int     save_number = 0;$/;"	v
save_social	src/social.cc	/^void save_social(const Social *s, FILE *fp)$/;"	f
save_social_table	src/social.cc	/^void save_social_table()$/;"	f
save_storage_list	src/storage.cc	/^void save_storage_list()$/;"	f
save_war_events	src/War.cc	/^void save_war_events()$/;"	f
save_war_table	src/War.cc	/^void save_war_table()$/;"	f
saves_spell	src/dispel.cc	/^bool saves_spell(int level, Character *victim, int dam_type)$/;"	f
say_spell	src/magic.cc	/^void say_spell(Character *ch, skill::type sn)$/;"	f
scaling	src/include/lootv2.hh	/^	bool scaling;$/;"	m	struct:mod_t
scan	src/include/skill/Type.hh	/^    scan,$/;"	m	class:skill::type
scan_char	src/scan.cc	/^void scan_char(Character *victim, Character *ch, int depth, int door)$/;"	f
scan_credits	src/Area.cc	/^scan_credits()$/;"	f	class:Area
scan_list	src/scan.cc	/^void scan_list(Room *scan_room, Character *ch, int depth, int door)$/;"	f
scan_room	src/scan.cc	/^void scan_room(Room *room, Character *ch, int depth, int door, Exit *pexit)$/;"	f
score	src/include/Clan.hh	/^    int     score = 0;      \/* points remaining to defeat in current war *\/$/;"	m	class:Clan
score_new	src/act_info.cc	/^void score_new(Character *ch)$/;"	f
scribe	src/include/skill/Type.hh	/^    scribe,$/;"	m	class:skill::type
scrolls	src/include/skill/Type.hh	/^    scrolls,$/;"	m	class:skill::type
scry	src/include/skill/Type.hh	/^    scry,$/;"	m	class:skill::type
second_attack	src/include/skill/Type.hh	/^    second_attack,$/;"	m	class:skill::type
sector_lookup	src/lookup.cc	/^String sector_lookup(Sector type)$/;"	f
sector_table	src/tables.cc	/^const std::vector<sector_type> sector_table = {$/;"	v
sector_type	src/Room.cc	/^Sector Room::sector_type() const { return prototype.sector_type; }$/;"	f	class:Room
sector_type	src/include/RoomPrototype.hh	/^	Sector		sector_type;$/;"	m	class:RoomPrototype
sector_type	src/include/tables.hh	/^struct sector_type {$/;"	s
secure_level	src/include/Character.hh	/^    int              secure_level = 0;$/;"	m	class:Character
see_mob	src/include/tables.hh	/^	int				see_mob;$/;"	m	struct:field_type
see_plr	src/include/tables.hh	/^	int				see_plr;$/;"	m	struct:field_type
select_pose	src/act_comm.cc	/^int select_pose(Character *ch)$/;"	f
self_msg	src/act_comm.cc	/^	String self_msg;$/;"	m	struct:new_pose_struct	file:
seller	src/include/Auction.hh	/^    Character * seller = nullptr; \/* a pointer to the seller - which may NOT quit *\/$/;"	m	class:Auction
send_to_clan	src/channels.cc	/^void send_to_clan(Character *ch, Clan *target, const String& text)$/;"	f
send_to_query	src/channels.cc	/^void send_to_query(Character *ch, const char *string)$/;"	f
sender	src/include/Note.hh	/^    String      sender;$/;"	m	class:Note
set1	src/include/lootv2.hh	/^	String set1;			\/\/1 pc bonus$/;"	m	struct:set_gear
set2	src/include/lootv2.hh	/^	String set2;			\/\/2 pc bonus$/;"	m	struct:set_gear
set3	src/include/lootv2.hh	/^	String set3;			\/\/3 pc bonus$/;"	m	struct:set_gear
set4	src/include/lootv2.hh	/^	String set4;			\/\/4 pc bonus$/;"	m	struct:set_gear
set5	src/include/lootv2.hh	/^	String set5;			\/\/5 pc bonus$/;"	m	struct:set_gear
set_color	src/act_info.cc	/^void set_color(Character *ch, int color, int bold)$/;"	f
set_evolution	src/skills.cc	/^void set_evolution(Character *ch, skill::type sn, int value) {$/;"	f
set_fighting	src/fight.cc	/^void set_fighting(Character *ch, Character *victim)$/;"	f
set_gear	src/include/lootv2.hh	/^struct set_gear {$/;"	s
set_learned	src/skills.cc	/^void set_learned(Character *ch, skill::type sn, int value) {$/;"	f
set_name	src/include/lootv2.hh	/^	int set_name;			\/\/use exact set name (IE:SET_MAGE_INVOKER)$/;"	m	struct:set_gear
set_table	src/loot_tables.cc	/^const std::vector<set_gear> set_table = {$/;"	v
set_tail	src/wiz_secure.cc	/^int set_tail(Character *ch, Character *victim, Flags tail_flags)$/;"	f
set_title	src/act_info.cc	/^void set_title(Character *ch, const String& title)$/;"	f
set_window	src/comm.cc	/^void set_window(Character *ch, int top, int bottom)$/;"	f
setgameinout	src/wiz_gen.cc	/^void setgameinout(Character *ch, String argument, const String& entryexit, char flag)$/;"	f
setstr	src/save.cc	/^void setstr(String *field, const char* value) {$/;"	f
settable	src/include/tables.hh	/^	bool settable;$/;"	m	struct:affect_table_type
settable	src/include/tables.hh	/^    bool settable;$/;"	m	struct:flag_type
setup_obj	src/wiz_quest.cc	/^bool setup_obj(Character *ch, Object *obj, String argument)$/;"	f
sex	src/include/MobilePrototype.hh	/^    int              sex = 0;$/;"	m	class:MobilePrototype
sex_lookup	src/lookup.cc	/^int sex_lookup(const String& name)$/;"	f
sex_table	src/tables.cc	/^const std::vector<sex_type> sex_table = {$/;"	v
sex_type	src/include/tables.hh	/^struct sex_type$/;"	s
shadow_form	src/include/affect/Type.hh	/^    shadow_form,$/;"	m	class:affect::type
shadow_form	src/include/skill/Type.hh	/^    shadow_form,$/;"	m	class:skill::type
sheen	src/include/affect/Type.hh	/^    sheen,$/;"	m	class:affect::type
sheen	src/include/skill/Type.hh	/^    sheen,$/;"	m	class:skill::type
shield	src/include/affect/Type.hh	/^    shield,$/;"	m	class:affect::type
shield	src/include/skill/Type.hh	/^    shield,$/;"	m	class:skill::type
shield_block	src/include/skill/Type.hh	/^    shield_block,$/;"	m	class:skill::type
shock	src/include/merc.hh	/^	int      shock;$/;"	m	struct:con_app_type
shock_blade	src/include/skill/Type.hh	/^    shock_blade,$/;"	m	class:skill::type
shock_effect	src/effects.cc	/^void shock_effect(void *vo, int level, int dam, int target, int evolution)$/;"	f
shocking_grasp	src/include/skill/Type.hh	/^    shocking_grasp,$/;"	m	class:skill::type
short_descr	src/include/Character.hh	/^    String              short_descr;$/;"	m	class:Character
short_descr	src/include/MobilePrototype.hh	/^    String              short_descr;$/;"	m	class:MobilePrototype
short_descr	src/include/Object.hh	/^	String 	        short_descr;$/;"	m	class:Object
short_descr	src/include/ObjectPrototype.hh	/^    String              short_descr;$/;"	m	class:ObjectPrototype
short_name	src/include/tables.hh	/^    String short_name;$/;"	m	struct:position_type
shortname	src/include/tables.hh	/^    String shortname;$/;"	m	struct:raffects
show	src/include/interp.hh	/^    int              show;$/;"	m	struct:cmd_type
show_affect_to_char	src/act_info.cc	/^void show_affect_to_char(const affect::Affect *paf, Character *ch)$/;"	f
show_char_to_char	src/act_info.cc	/^void show_char_to_char(Character *list, Character *ch)$/;"	f
show_char_to_char_0	src/act_info.cc	/^void show_char_to_char_0(Character *victim, Character *ch)$/;"	f
show_char_to_char_1	src/act_info.cc	/^void show_char_to_char_1(Character *victim, Character *ch)$/;"	f
show_list_to_char	src/act_info.cc	/^void show_list_to_char(Object *list, Character *ch, bool fShort, bool fShowNothing, bool insidecont)$/;"	f
show_string	src/comm.cc	/^void show_string(Descriptor *d, bool clear_remainder)$/;"	f
showlost	src/act_comm.cc	/^bool showlost(Character *ch, Object *obj, bool found, bool locker)$/;"	f
showstr_head	src/include/Descriptor.hh	/^    String              showstr_head;$/;"	m	class:Descriptor
shrink	src/include/skill/Type.hh	/^    shrink,$/;"	m	class:skill::type
sig_handle	src/comm.cc	/^void sig_handle(int sig)$/;"	f
silver	src/include/Character.hh	/^    int                silver = 0;$/;"	m	class:Character
silver_in_bank	src/include/Character.hh	/^    int                silver_in_bank = 0;$/;"	m	class:Character
silver_weight	src/include/Character.hh	/^#define silver_weight(/;"	d
silver_weight	src/include/macros.hh	/^#define silver_weight(/;"	d
sing	src/include/skill/Type.hh	/^    sing,$/;"	m	class:skill::type
site_to_ssite	src/conn/GetOldPassState.cc	/^const String site_to_ssite(const String& site)$/;"	f	namespace:conn
size	src/include/Character.hh	/^    int              size = 0;$/;"	m	class:Character
size	src/include/GarbageCollectingList.hh	/^    size_t size() const { return container.size(); }$/;"	f	class:GarbageCollectingList
size	src/include/Guild.hh	/^	size,$/;"	e	enum:Guild
size	src/include/MobilePrototype.hh	/^    int              size = 0;$/;"	m	class:MobilePrototype
size	src/include/affect/Type.hh	/^    size, \/\/ don't touch$/;"	m	class:affect::type
size	src/include/merc.hh	/^	int      size;                   \/* aff bits for the race *\/$/;"	m	struct:pc_race_type
size	src/include/skill/Type.hh	/^    size, \/\/ don't touch$/;"	m	class:skill::type
size_lookup	src/lookup.cc	/^int size_lookup(const String& name)$/;"	f
size_table	src/tables.cc	/^const std::vector<size_type> size_table = {$/;"	v
size_type	src/include/tables.hh	/^struct size_type$/;"	s
skeleton	src/include/Player.hh	/^	Character *         skeleton = nullptr;$/;"	m	class:Player
skill	src/include/merc.hh	/^	skill::type skill;$/;"	m	struct:weapon_table_t
skill	src/include/skill/Type.hh	/^namespace skill {$/;"	n
skill	src/include/skill/skill.hh	/^namespace skill {$/;"	n
skill	src/skill/skill_table.cc	/^namespace skill {$/;"	n	file:
skill_adept	src/include/merc.hh	/^	int      skill_adept;            \/* Maximum skill level          *\/$/;"	m	struct:guild_type
skill_fails	src/include/Character.hh	/^    int                 skill_fails = 0; \/\/ number of times they have failed a skill in a row$/;"	m	class:Character
skill_level	src/include/skill/skill.hh	/^	int      skill_level[Guild::size]; \/* Level needed by class        *\/$/;"	m	struct:skill::skill_table_t
skill_table	src/const.cc	/^const std::map<skill::type, skill::skill_table_t> skill_table = {$/;"	v
skill_table_t	src/include/skill/skill.hh	/^struct  skill_table_t$/;"	s	namespace:skill
skillpoints	src/include/Player.hh	/^	int			        skillpoints = 0;$/;"	m	class:Player
skills	src/include/merc.hh	/^	String      skills[5];              \/* bonus skills for the race *\/$/;"	m	struct:pc_race_type
skip	src/deps/cJSON/cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:
sky	src/include/Weather.hh	/^    Sky         sky = Cloudless;$/;"	m	class:Weather
sleep	src/include/affect/Type.hh	/^    sleep,$/;"	m	class:affect::type
sleep	src/include/skill/Type.hh	/^    sleep,$/;"	m	class:skill::type
slow	src/include/affect/Type.hh	/^    slow,$/;"	m	class:affect::type
slow	src/include/skill/Type.hh	/^    slow,$/;"	m	class:skill::type
smokescreen	src/include/affect/Type.hh	/^    smokescreen,$/;"	m	class:affect::type
smokescreen	src/include/skill/Type.hh	/^    smokescreen,$/;"	m	class:skill::type
sneak	src/include/affect/Type.hh	/^    sneak,$/;"	m	class:affect::type
sneak	src/include/skill/Type.hh	/^    sneak,$/;"	m	class:skill::type
snoop_by	src/include/Descriptor.hh	/^    Descriptor *        snoop_by = nullptr;$/;"	m	class:Descriptor
snprintf	src/include/Format.hh	/^int snprintf(String& str, unsigned int len, const String& fmt, Params&&... params) {$/;"	f	namespace:Format
snprintf	src/include/Format.hh	/^int snprintf(char *buf, unsigned int len, const String& fmt, Params&&... params) {$/;"	f	namespace:Format
social_lookup	src/social.cc	/^Social *social_lookup(const String& name)$/;"	f
social_table_head	src/social.cc	/^Social *social_table_head;     \/* and social table *\/$/;"	v
social_table_tail	src/social.cc	/^Social *social_table_tail;     \/* and social table *\/$/;"	v
song_data	src/include/music.hh	/^struct song_data$/;"	s
song_table	src/music.cc	/^std::vector<struct song_data> song_table;$/;"	v
song_update	src/music.cc	/^void song_update(void)$/;"	f
sort_char	src/affect/affect_char.cc	/^void sort_char(Character *ch, comparator comp) {$/;"	f	namespace:affect
sort_list	src/affect/affect_list.cc	/^void sort_list(Affect **list_head, comparator comp) {$/;"	f	namespace:affect
sort_obj	src/affect/affect_obj.cc	/^void sort_obj(Object *obj, comparator comp) {$/;"	f	namespace:affect
sort_room	src/affect/affect_room.cc	/^void sort_room(Room *room, comparator comp) {$/;"	f	namespace:affect
spear	src/include/skill/Type.hh	/^    spear,$/;"	m	class:skill::type
spec_blacksmith	src/special.cc	/^DECLARE_SPEC_FUN(spec_blacksmith);$/;"	v
spec_blacksmith	src/special.cc	/^bool spec_blacksmith(Character *ch)$/;"	f
spec_breath_acid	src/special.cc	/^DECLARE_SPEC_FUN(spec_breath_acid);$/;"	v
spec_breath_acid	src/special.cc	/^bool spec_breath_acid(Character *ch)$/;"	f
spec_breath_any	src/special.cc	/^DECLARE_SPEC_FUN(spec_breath_any);$/;"	v
spec_breath_any	src/special.cc	/^bool spec_breath_any(Character *ch)$/;"	f
spec_breath_fire	src/special.cc	/^DECLARE_SPEC_FUN(spec_breath_fire);$/;"	v
spec_breath_fire	src/special.cc	/^bool spec_breath_fire(Character *ch)$/;"	f
spec_breath_frost	src/special.cc	/^DECLARE_SPEC_FUN(spec_breath_frost);$/;"	v
spec_breath_frost	src/special.cc	/^bool spec_breath_frost(Character *ch)$/;"	f
spec_breath_gas	src/special.cc	/^DECLARE_SPEC_FUN(spec_breath_gas);$/;"	v
spec_breath_gas	src/special.cc	/^bool spec_breath_gas(Character *ch)$/;"	f
spec_breath_lightning	src/special.cc	/^DECLARE_SPEC_FUN(spec_breath_lightning);$/;"	v
spec_breath_lightning	src/special.cc	/^bool spec_breath_lightning(Character *ch)$/;"	f
spec_cast_adept	src/special.cc	/^DECLARE_SPEC_FUN(spec_cast_adept);$/;"	v
spec_cast_adept	src/special.cc	/^bool spec_cast_adept(Character *ch)$/;"	f
spec_cast_cleric	src/special.cc	/^DECLARE_SPEC_FUN(spec_cast_cleric);$/;"	v
spec_cast_cleric	src/special.cc	/^bool spec_cast_cleric(Character *ch)$/;"	f
spec_cast_judge	src/special.cc	/^DECLARE_SPEC_FUN(spec_cast_judge);$/;"	v
spec_cast_judge	src/special.cc	/^bool spec_cast_judge(Character *ch)$/;"	f
spec_cast_mage	src/special.cc	/^DECLARE_SPEC_FUN(spec_cast_mage);$/;"	v
spec_cast_mage	src/special.cc	/^bool spec_cast_mage(Character *ch)$/;"	f
spec_cast_undead	src/special.cc	/^DECLARE_SPEC_FUN(spec_cast_undead);$/;"	v
spec_cast_undead	src/special.cc	/^bool spec_cast_undead(Character *ch)$/;"	f
spec_charm	src/special.cc	/^DECLARE_SPEC_FUN(spec_charm);$/;"	v
spec_charm	src/special.cc	/^bool spec_charm(Character *ch)$/;"	f
spec_clanguard	src/act_move.cc	/^DECLARE_SPEC_FUN(spec_clanguard);$/;"	v
spec_clanguard	src/special.cc	/^DECLARE_SPEC_FUN(spec_clanguard);$/;"	v
spec_clanguard	src/special.cc	/^bool spec_clanguard(Character *ch)$/;"	f
spec_executioner	src/special.cc	/^DECLARE_SPEC_FUN(spec_executioner);$/;"	v
spec_executioner	src/special.cc	/^bool spec_executioner(Character *ch)$/;"	f
spec_fido	src/special.cc	/^DECLARE_SPEC_FUN(spec_fido);$/;"	v
spec_fido	src/special.cc	/^bool spec_fido(Character *ch)$/;"	f
spec_fight_clanguard	src/special.cc	/^DECLARE_SPEC_FUN(spec_fight_clanguard);$/;"	v
spec_fight_clanguard	src/special.cc	/^bool spec_fight_clanguard(Character *ch)$/;"	f
spec_fun	src/include/Character.hh	/^    SPEC_FUN *          spec_fun = nullptr;$/;"	m	class:Character
spec_fun	src/include/MobilePrototype.hh	/^    SPEC_FUN *          spec_fun = nullptr;$/;"	m	class:MobilePrototype
spec_guard	src/special.cc	/^DECLARE_SPEC_FUN(spec_guard);$/;"	v
spec_guard	src/special.cc	/^bool spec_guard(Character *ch)$/;"	f
spec_janitor	src/special.cc	/^DECLARE_SPEC_FUN(spec_janitor);$/;"	v
spec_janitor	src/special.cc	/^bool spec_janitor(Character *ch)$/;"	f
spec_lookup	src/special.cc	/^SPEC_FUN *spec_lookup(const String& name)$/;"	f
spec_mayor	src/special.cc	/^DECLARE_SPEC_FUN(spec_mayor);$/;"	v
spec_mayor	src/special.cc	/^bool spec_mayor(Character *ch)$/;"	f
spec_name	src/special.cc	/^String spec_name(SPEC_FUN *function)$/;"	f
spec_nasty	src/special.cc	/^DECLARE_SPEC_FUN(spec_nasty);$/;"	v
spec_nasty	src/special.cc	/^bool spec_nasty(Character *ch)$/;"	f
spec_ogre_member	src/special.cc	/^DECLARE_SPEC_FUN(spec_ogre_member);$/;"	v
spec_ogre_member	src/special.cc	/^bool spec_ogre_member(Character *ch)$/;"	f
spec_patrolman	src/special.cc	/^DECLARE_SPEC_FUN(spec_patrolman);$/;"	v
spec_patrolman	src/special.cc	/^bool spec_patrolman(Character *ch)$/;"	f
spec_poison	src/special.cc	/^DECLARE_SPEC_FUN(spec_poison);$/;"	v
spec_poison	src/special.cc	/^bool spec_poison(Character *ch)$/;"	f
spec_questmaster	src/special.cc	/^DECLARE_SPEC_FUN(spec_questmaster);                  \/* Vassago *\/$/;"	v
spec_questmaster	src/special.cc	/^bool spec_questmaster(Character *ch)$/;"	f
spec_sage	src/special.cc	/^DECLARE_SPEC_FUN(spec_sage);$/;"	v
spec_sage	src/special.cc	/^bool spec_sage(Character *ch)$/;"	f
spec_squestmaster	src/special.cc	/^DECLARE_SPEC_FUN(spec_squestmaster);          \/* Montrey *\/$/;"	v
spec_squestmaster	src/special.cc	/^bool spec_squestmaster(Character *ch)$/;"	f
spec_table	src/special.cc	/^const std::vector<spec_type> spec_table = {$/;"	v
spec_thief	src/special.cc	/^DECLARE_SPEC_FUN(spec_thief);$/;"	v
spec_thief	src/special.cc	/^bool spec_thief(Character *ch)$/;"	f
spec_troll_member	src/special.cc	/^DECLARE_SPEC_FUN(spec_troll_member);$/;"	v
spec_troll_member	src/special.cc	/^bool spec_troll_member(Character *ch)$/;"	f
spec_type	src/include/merc.hh	/^struct spec_type$/;"	s
spell_acid_blast	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_acid_blast        );$/;"	v
spell_acid_blast	src/magic.cc	/^void spell_acid_blast(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_acid_breath	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_acid_breath       );$/;"	v
spell_acid_breath	src/magic.cc	/^void spell_acid_breath(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_acid_rain	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_acid_rain         );$/;"	v
spell_acid_rain	src/magic.cc	/^void spell_acid_rain(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_age	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_age               );$/;"	v
spell_age	src/magic.cc	/^void spell_age(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_animate_gargoyle	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_animate_gargoyle  );$/;"	v
spell_animate_gargoyle	src/magic.cc	/^void spell_animate_gargoyle(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_animate_skeleton	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_animate_skeleton	);$/;"	v
spell_animate_skeleton	src/magic.cc	/^void spell_animate_skeleton(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_animate_wraith	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_animate_wraith    );$/;"	v
spell_animate_wraith	src/magic.cc	/^void spell_animate_wraith(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_animate_zombie	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_animate_zombie    );$/;"	v
spell_animate_zombie	src/magic.cc	/^void spell_animate_zombie(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_armor	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_armor             );$/;"	v
spell_armor	src/magic.cc	/^void spell_armor(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_barrier	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_barrier           );$/;"	v
spell_barrier	src/rmagic.cc	/^void spell_barrier(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_bless	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_bless             );$/;"	v
spell_bless	src/magic.cc	/^void spell_bless(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_blindness	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_blindness         );$/;"	v
spell_blindness	src/magic.cc	/^void spell_blindness(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_blizzard	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_blizzard          );$/;"	v
spell_blizzard	src/magic.cc	/^void spell_blizzard(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_blood_blade	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_blood_blade       );$/;"	v
spell_blood_blade	src/magic.cc	/^void spell_blood_blade(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_blood_moon	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_blood_moon        );$/;"	v
spell_blood_moon	src/magic.cc	/^void spell_blood_moon(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_bone_wall	src/include/magic.hh	/^DECLARE_SPELL_FUN(	spell_bone_wall		);$/;"	v
spell_bone_wall	src/rmagic.cc	/^void spell_bone_wall(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_burning_hands	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_burning_hands     );$/;"	v
spell_burning_hands	src/magic.cc	/^void spell_burning_hands(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_call_lightning	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_call_lightning    );$/;"	v
spell_call_lightning	src/magic.cc	/^void spell_call_lightning(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_calm	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_calm              );$/;"	v
spell_calm	src/magic.cc	/^void spell_calm(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_cancellation	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_cancellation      );$/;"	v
spell_cancellation	src/magic.cc	/^void spell_cancellation(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_cause_critical	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_cause_critical    );$/;"	v
spell_cause_critical	src/magic.cc	/^void spell_cause_critical(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_cause_light	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_cause_light       );$/;"	v
spell_cause_light	src/magic.cc	/^void spell_cause_light(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_cause_serious	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_cause_serious     );$/;"	v
spell_cause_serious	src/magic.cc	/^void spell_cause_serious(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_chain_lightning	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_chain_lightning   );$/;"	v
spell_chain_lightning	src/magic.cc	/^void spell_chain_lightning(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_change_sex	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_change_sex        );$/;"	v
spell_change_sex	src/magic.cc	/^void spell_change_sex(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_channel	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_channel           );$/;"	v
spell_channel	src/magic.cc	/^void spell_channel(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_charm_person	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_charm_person      );$/;"	v
spell_charm_person	src/magic.cc	/^void spell_charm_person(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_charm_person	src/special.cc	/^DECLARE_SPELL_FUN(spell_charm_person);$/;"	v
spell_chill_touch	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_chill_touch       );$/;"	v
spell_chill_touch	src/magic.cc	/^void spell_chill_touch(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_colour_spray	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_colour_spray      );$/;"	v
spell_colour_spray	src/magic.cc	/^void spell_colour_spray(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_continual_light	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_continual_light   );$/;"	v
spell_continual_light	src/magic.cc	/^void spell_continual_light(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_control_weather	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_control_weather   );$/;"	v
spell_control_weather	src/magic.cc	/^void spell_control_weather(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_create_food	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_create_food       );$/;"	v
spell_create_food	src/magic.cc	/^void spell_create_food(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_create_parchment	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_create_parchment  );$/;"	v
spell_create_parchment	src/magic.cc	/^void spell_create_parchment(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_create_rose	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_create_rose       );$/;"	v
spell_create_rose	src/magic.cc	/^void spell_create_rose(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_create_sign	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_create_sign       );$/;"	v
spell_create_sign	src/magic.cc	/^void spell_create_sign(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_create_spring	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_create_spring     );$/;"	v
spell_create_spring	src/magic.cc	/^void spell_create_spring(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_create_vial	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_create_vial       );$/;"	v
spell_create_vial	src/magic.cc	/^void spell_create_vial(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_create_water	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_create_water      );$/;"	v
spell_create_water	src/magic.cc	/^void spell_create_water(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_cure_blindness	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_cure_blindness    );$/;"	v
spell_cure_blindness	src/magic.cc	/^void spell_cure_blindness(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_cure_critical	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_cure_critical     );$/;"	v
spell_cure_critical	src/magic.cc	/^void spell_cure_critical(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_cure_disease	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_cure_disease      );$/;"	v
spell_cure_disease	src/magic.cc	/^void spell_cure_disease(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_cure_light	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_cure_light        );$/;"	v
spell_cure_light	src/magic.cc	/^void spell_cure_light(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_cure_poison	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_cure_poison       );$/;"	v
spell_cure_poison	src/magic.cc	/^void spell_cure_poison(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_cure_serious	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_cure_serious      );$/;"	v
spell_cure_serious	src/magic.cc	/^void spell_cure_serious(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_curse	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_curse             );$/;"	v
spell_curse	src/magic.cc	/^void spell_curse(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_darkness	src/include/magic.hh	/^DECLARE_SPELL_FUN(	spell_darkness		);$/;"	v
spell_darkness	src/magic.cc	/^void spell_darkness(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_dazzle	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_dazzle            );$/;"	v
spell_dazzle	src/rmagic.cc	/^void spell_dazzle(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_dazzling_light	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_dazzling_light    );$/;"	v
spell_dazzling_light	src/magic.cc	/^void spell_dazzling_light(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_demonfire	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_demonfire         );$/;"	v
spell_demonfire	src/magic.cc	/^void spell_demonfire(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_detect_evil	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_detect_evil       );$/;"	v
spell_detect_evil	src/magic.cc	/^void spell_detect_evil(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_detect_good	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_detect_good       );$/;"	v
spell_detect_good	src/magic.cc	/^void spell_detect_good(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_detect_hidden	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_detect_hidden     );$/;"	v
spell_detect_hidden	src/magic.cc	/^void spell_detect_hidden(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_detect_invis	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_detect_invis      );$/;"	v
spell_detect_invis	src/magic.cc	/^void spell_detect_invis(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_detect_magic	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_detect_magic      );$/;"	v
spell_detect_magic	src/magic.cc	/^void spell_detect_magic(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_detect_poison	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_detect_poison     );$/;"	v
spell_detect_poison	src/magic.cc	/^void spell_detect_poison(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_dispel_evil	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_dispel_evil       );$/;"	v
spell_dispel_evil	src/magic.cc	/^void spell_dispel_evil(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_dispel_good	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_dispel_good       );$/;"	v
spell_dispel_good	src/magic.cc	/^void spell_dispel_good(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_dispel_magic	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_dispel_magic      );$/;"	v
spell_dispel_magic	src/magic.cc	/^void spell_dispel_magic(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_divine_healing	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_divine_healing    );$/;"	v
spell_divine_healing	src/magic.cc	/^void spell_divine_healing(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_divine_regeneration	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_divine_regeneration);$/;"	v
spell_divine_regeneration	src/magic.cc	/^void spell_divine_regeneration(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_earthquake	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_earthquake        );$/;"	v
spell_earthquake	src/magic.cc	/^void spell_earthquake(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_encampment	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_encampment        );$/;"	v
spell_encampment	src/magic.cc	/^void spell_encampment(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_enchant_armor	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_enchant_armor     );$/;"	v
spell_enchant_armor	src/magic.cc	/^void spell_enchant_armor(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_enchant_weapon	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_enchant_weapon    );$/;"	v
spell_enchant_weapon	src/magic.cc	/^void spell_enchant_weapon(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_energy_drain	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_energy_drain      );$/;"	v
spell_energy_drain	src/magic.cc	/^void spell_energy_drain(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_faerie_fire	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_faerie_fire       );$/;"	v
spell_faerie_fire	src/magic.cc	/^void spell_faerie_fire(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_faerie_fog	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_faerie_fog        );$/;"	v
spell_faerie_fog	src/magic.cc	/^void spell_faerie_fog(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_farsight	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_farsight          );$/;"	v
spell_farsight	src/magic.cc	/^void spell_farsight(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_fear	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_fear              );$/;"	v
spell_fear	src/magic.cc	/^void spell_fear(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_fire_breath	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_fire_breath       );$/;"	v
spell_fire_breath	src/magic.cc	/^void spell_fire_breath(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_fireball	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_fireball          );$/;"	v
spell_fireball	src/magic.cc	/^void spell_fireball(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_fireproof	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_fireproof         );$/;"	v
spell_fireproof	src/magic.cc	/^void spell_fireproof(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_firestorm	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_firestorm         );$/;"	v
spell_firestorm	src/magic.cc	/^void spell_firestorm(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_flame_blade	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_flame_blade       );$/;"	v
spell_flame_blade	src/magic.cc	/^void spell_flame_blade(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_flameshield	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_flameshield       );$/;"	v
spell_flameshield	src/magic.cc	/^void spell_flameshield(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_flamestrike	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_flamestrike       );$/;"	v
spell_flamestrike	src/magic.cc	/^void spell_flamestrike(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_floating_disc	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_floating_disc     );$/;"	v
spell_floating_disc	src/magic.cc	/^void spell_floating_disc(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_fly	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_fly               );$/;"	v
spell_fly	src/magic.cc	/^void spell_fly(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_focus	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_focus             );$/;"	v
spell_focus	src/rmagic.cc	/^void spell_focus(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_force	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_force             );$/;"	v
spell_force	src/rmagic.cc	/^void spell_force(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_frenzy	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_frenzy            );$/;"	v
spell_frenzy	src/magic.cc	/^void spell_frenzy(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_frost_blade	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_frost_blade       );$/;"	v
spell_frost_blade	src/magic.cc	/^void spell_frost_blade(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_frost_breath	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_frost_breath      );$/;"	v
spell_frost_breath	src/magic.cc	/^void spell_frost_breath(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_full_heal	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_full_heal         );$/;"	v
spell_full_heal	src/rmagic.cc	/^void spell_full_heal(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_fun	src/include/skill/skill.hh	/^	SPELL_FUN * spell_fun;              \/* Spell pointer (for spells)   *\/$/;"	m	struct:skill::skill_table_t
spell_gas_breath	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_gas_breath        );$/;"	v
spell_gas_breath	src/magic.cc	/^void spell_gas_breath(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_gate	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_gate              );$/;"	v
spell_gate	src/magic.cc	/^void spell_gate(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_general_purpose	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_general_purpose   );$/;"	v
spell_general_purpose	src/magic.cc	/^void spell_general_purpose(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_giant_strength	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_giant_strength    );$/;"	v
spell_giant_strength	src/magic.cc	/^void spell_giant_strength(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_harm	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_harm              );$/;"	v
spell_harm	src/magic.cc	/^void spell_harm(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_haste	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_haste             );$/;"	v
spell_haste	src/magic.cc	/^void spell_haste(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_heal	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_heal              );$/;"	v
spell_heal	src/magic.cc	/^void spell_heal(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_heat_metal	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_heat_metal        );$/;"	v
spell_heat_metal	src/magic.cc	/^void spell_heat_metal(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_hex	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_hex               );$/;"	v
spell_hex	src/rmagic.cc	/^void spell_hex(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_high_explosive	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_high_explosive    );$/;"	v
spell_high_explosive	src/magic.cc	/^void spell_high_explosive(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_holy_sword	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_holy_sword        );$/;"	v
spell_holy_sword	src/rmagic.cc	/^void spell_holy_sword(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_holy_word	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_holy_word         );$/;"	v
spell_holy_word	src/magic.cc	/^void spell_holy_word(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_identify	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_identify          );$/;"	v
spell_identify	src/magic.cc	/^void spell_identify(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_identify	src/special.cc	/^DECLARE_SPELL_FUN(spell_identify);$/;"	v
spell_imprint	src/magic.cc	/^void spell_imprint(skill::type sn, int level, Character *ch, void *vo)$/;"	f
spell_infravision	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_infravision       );$/;"	v
spell_infravision	src/magic.cc	/^void spell_infravision(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_invis	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_invis             );$/;"	v
spell_invis	src/magic.cc	/^void spell_invis(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_ironskin	src/rmagic.cc	/^void spell_ironskin(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_know_alignment	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_know_alignment    );$/;"	v
spell_know_alignment	src/magic.cc	/^void spell_know_alignment(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_light_of_truth	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_light_of_truth    );$/;"	v
spell_light_of_truth	src/magic.cc	/^void spell_light_of_truth(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_lightning_bolt	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_lightning_bolt    );$/;"	v
spell_lightning_bolt	src/magic.cc	/^void spell_lightning_bolt(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_lightning_breath	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_lightning_breath  );$/;"	v
spell_lightning_breath	src/magic.cc	/^void spell_lightning_breath(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_locate_life	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_locate_life       );$/;"	v
spell_locate_life	src/magic.cc	/^void spell_locate_life(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_locate_object	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_locate_object     );$/;"	v
spell_locate_object	src/magic.cc	/^void spell_locate_object(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_magic_missile	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_magic_missile     );$/;"	v
spell_magic_missile	src/magic.cc	/^void spell_magic_missile(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_mass_healing	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_mass_healing      );$/;"	v
spell_mass_healing	src/magic.cc	/^void spell_mass_healing(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_mass_invis	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_mass_invis        );$/;"	v
spell_mass_invis	src/magic.cc	/^void spell_mass_invis(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_midnight	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_midnight          );$/;"	v
spell_midnight	src/rmagic.cc	/^void spell_midnight(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_nexus	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_nexus             );$/;"	v
spell_nexus	src/magic.cc	/^void spell_nexus(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_null	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_null              );$/;"	v
spell_null	src/magic.cc	/^void spell_null(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_pain	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_pain              );$/;"	v
spell_pain	src/rmagic.cc	/^void spell_pain(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_paralyze	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_paralyze		);$/;"	v
spell_paralyze	src/rmagic.cc	/^void spell_paralyze(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_pass_door	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_pass_door         );$/;"	v
spell_pass_door	src/magic.cc	/^void spell_pass_door(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_plague	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_plague            );$/;"	v
spell_plague	src/magic.cc	/^void spell_plague(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_poison	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_poison            );$/;"	v
spell_poison	src/magic.cc	/^void spell_poison(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_polymorph	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_polymorph         );$/;"	v
spell_polymorph	src/magic.cc	/^void spell_polymorph(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_portal	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_portal            );$/;"	v
spell_portal	src/magic.cc	/^void spell_portal(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_power_word	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_power_word        );$/;"	v
spell_power_word	src/magic.cc	/^void spell_power_word(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_protect_container	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_protect_container );$/;"	v
spell_protect_container	src/magic.cc	/^void spell_protect_container(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_protection_evil	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_protection_evil   );$/;"	v
spell_protection_evil	src/magic.cc	/^void spell_protection_evil(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_protection_good	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_protection_good   );$/;"	v
spell_protection_good	src/magic.cc	/^void spell_protection_good(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_quick	src/include/magic.hh	/^DECLARE_SPELL_FUN(	spell_quick		);$/;"	v
spell_quick	src/rmagic.cc	/^void spell_quick(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_ray_of_truth	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_ray_of_truth      );$/;"	v
spell_ray_of_truth	src/magic.cc	/^void spell_ray_of_truth(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_rayban	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_rayban            );$/;"	v
spell_rayban	src/magic.cc	/^void spell_rayban(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_recharge	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_recharge          );$/;"	v
spell_recharge	src/magic.cc	/^void spell_recharge(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_refresh	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_refresh           );$/;"	v
spell_refresh	src/magic.cc	/^void spell_refresh(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_regeneration	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_regeneration      );$/;"	v
spell_regeneration	src/magic.cc	/^void spell_regeneration(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_remove_alignment	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_remove_alignment  );$/;"	v
spell_remove_alignment	src/magic.cc	/^void spell_remove_alignment(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_remove_curse	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_remove_curse      );$/;"	v
spell_remove_curse	src/magic.cc	/^void spell_remove_curse(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_remove_invis	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_remove_invis      );$/;"	v
spell_remove_invis	src/magic.cc	/^void spell_remove_invis(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_resurrect	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_resurrect         );$/;"	v
spell_resurrect	src/magic.cc	/^void spell_resurrect(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_sanctuary	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_sanctuary         );$/;"	v
spell_sanctuary	src/magic.cc	/^void spell_sanctuary(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_sap	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_sap               );$/;"	v
spell_sap	src/rmagic.cc	/^void spell_sap(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_scry	src/act_info.cc	/^void spell_scry(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_scry	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_scry              );$/;"	v
spell_sheen	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_sheen             );$/;"	v
spell_sheen	src/rmagic.cc	/^void spell_sheen(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_shield	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_shield            );$/;"	v
spell_shield	src/magic.cc	/^void spell_shield(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_shock_blade	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_shock_blade       );$/;"	v
spell_shock_blade	src/magic.cc	/^void spell_shock_blade(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_shocking_grasp	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_shocking_grasp    );$/;"	v
spell_shocking_grasp	src/magic.cc	/^void spell_shocking_grasp(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_shrink	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_shrink            );$/;"	v
spell_shrink	src/magic.cc	/^void spell_shrink(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_sleep	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_sleep             );$/;"	v
spell_sleep	src/magic.cc	/^void spell_sleep(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_slow	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_slow              );$/;"	v
spell_slow	src/magic.cc	/^void spell_slow(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_smokescreen	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_smokescreen       );$/;"	v
spell_smokescreen	src/magic.cc	/^void spell_smokescreen(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_starve	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_starve            );$/;"	v
spell_starve	src/magic.cc	/^void spell_starve(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_steel_mist	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_steel_mist        );$/;"	v
spell_steel_mist	src/magic.cc	/^void spell_steel_mist(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_stone_skin	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_stone_skin        );$/;"	v
spell_stone_skin	src/magic.cc	/^void spell_stone_skin(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_summon	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_summon            );$/;"	v
spell_summon	src/magic.cc	/^void spell_summon(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_summon_object	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_summon_object     );$/;"	v
spell_summon_object	src/magic.cc	/^void spell_summon_object(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_sunray	src/include/magic.hh	/^DECLARE_SPELL_FUN(	spell_sunray		);$/;"	v
spell_sunray	src/magic.cc	/^void spell_sunray(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_talon	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_talon             );$/;"	v
spell_talon	src/magic.cc	/^void spell_talon(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_teleport	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_teleport          );$/;"	v
spell_teleport	src/magic.cc	/^void spell_teleport(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_teleport_object	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_teleport_object   );$/;"	v
spell_teleport_object	src/magic.cc	/^void spell_teleport_object(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_undo_spell	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_undo_spell        );$/;"	v
spell_undo_spell	src/magic.cc	/^void spell_undo_spell(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_ventriloquate	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_ventriloquate     );$/;"	v
spell_ventriloquate	src/magic.cc	/^void spell_ventriloquate(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_vision	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_vision            );$/;"	v
spell_vision	src/magic.cc	/^void spell_vision(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_weaken	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_weaken            );$/;"	v
spell_weaken	src/magic.cc	/^void spell_weaken(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_word_of_recall	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_word_of_recall    );$/;"	v
spell_word_of_recall	src/magic.cc	/^void spell_word_of_recall(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spell_wrath	src/include/magic.hh	/^DECLARE_SPELL_FUN(      spell_wrath             );$/;"	v
spell_wrath	src/magic.cc	/^void spell_wrath(skill::type sn, int level, Character *ch, void *vo, int target, int evolution)$/;"	f
spells	src/include/merc.hh	/^	std::vector<String> spells;$/;"	m	struct:group_type
spill_contents	src/handler.cc	/^void spill_contents(Object *obj, Object *contents) {$/;"	f
spouse	src/include/Player.hh	/^    String              spouse;$/;"	m	class:Player
spousegate	src/include/skill/Type.hh	/^    spousegate,$/;"	m	class:skill::type
spread_plague	src/magic.cc	/^void spread_plague(Room *room, const affect::Affect *plague, int chance) {$/;"	f
sprintf	src/include/Format.hh	/^int sprintf(String& str, const String& fmt, Params&&... params) {$/;"	f	namespace:Format
sprintf	src/include/Format.hh	/^int sprintf(char *buf, const String& fmt, Params&&... params) {$/;"	f	namespace:Format
sq_cleanup	src/quest.cc	/^void sq_cleanup(Character *ch)$/;"	f
sqcountdown	src/include/Player.hh	/^	int              sqcountdown = 0;$/;"	m	class:Player
squest_giver	src/include/Player.hh	/^	Vnum                 squest_giver = 0;$/;"	m	class:Player
squest_info	src/quest.cc	/^void squest_info(Character *ch)$/;"	f
squestloc1	src/include/Player.hh	/^	Location	        squestloc1; \/* obj *\/$/;"	m	class:Player
squestloc2	src/include/Player.hh	/^	Location	        squestloc2;	\/* mob *\/$/;"	m	class:Player
squestmob	src/include/Player.hh	/^	Character *         squestmob = nullptr;$/;"	m	class:Player
squestmob_found	src/quest.cc	/^void squestmob_found(Character *ch, Character *mob)$/;"	f
squestmobf	src/include/Player.hh	/^	bool		        squestmobf = false;$/;"	m	class:Player
squestobj	src/include/Player.hh	/^	Object  *           squestobj = nullptr;$/;"	m	class:Player
squestobj_to_squestmob	src/quest.cc	/^void squestobj_to_squestmob(Character *ch, Object *obj, Character *mob)$/;"	f
squestobjf	src/include/Player.hh	/^	bool                squestobjf = false;$/;"	m	class:Player
stam	src/include/Character.hh	/^    int              stam = 0;$/;"	m	class:Character
stam_gain	src/update.cc	/^int stam_gain(Character *ch)$/;"	f
stam_max	src/include/merc.hh	/^	int	stam_max;		\/* Max stamina gained on leveling *\/$/;"	m	struct:guild_type
stam_min	src/include/merc.hh	/^	int	stam_min;		\/* Min stamina gained on leveling *\/$/;"	m	struct:guild_type
stamina_loss	src/act_move.cc	/^const std::map<Sector, int> stamina_loss = {$/;"	v
standfast	src/include/skill/Type.hh	/^    standfast,$/;"	m	class:skill::type
start	src/include/Battle.hh	/^    bool        start = false;$/;"	m	class:Battle
start_pos	src/include/Character.hh	/^    int              start_pos = 0;$/;"	m	class:Character
start_pos	src/include/MobilePrototype.hh	/^    int              start_pos = 0;$/;"	m	class:MobilePrototype
start_score	src/include/War.hh	/^        int      start_score = 0;$/;"	m	class:War::Opponent
startroom	src/include/QuestArea.hh	/^	Room *startroom = nullptr;$/;"	m	class:QuestArea
starve	src/include/skill/Type.hh	/^    starve,$/;"	m	class:skill::type
stat_prime	src/include/merc.hh	/^	int      stat_prime;             \/* Prime attribute              *\/$/;"	m	struct:guild_type
stat_to_attr	src/attribute.cc	/^int stat_to_attr(int stat) {$/;"	f
state	src/include/Descriptor.hh	/^    conn::State         *state;$/;"	m	class:Descriptor
stats	src/include/merc.hh	/^	int      stats[MAX_STATS];       \/* starting stats *\/$/;"	m	struct:pc_race_type
status	src/include/Player.hh	/^    String              status;$/;"	m	class:Player
staves	src/include/skill/Type.hh	/^    staves,$/;"	m	class:skill::type
stc	src/comm.cc	/^void stc(const String& txt, Character *ch)$/;"	f
steal	src/include/skill/Type.hh	/^    steal,$/;"	m	class:skill::type
steel_mist	src/include/affect/Type.hh	/^    steel_mist,$/;"	m	class:affect::type
steel_mist	src/include/skill/Type.hh	/^    steel_mist,$/;"	m	class:skill::type
steps	src/hunt.cc	/^	int  steps;$/;"	m	struct:hunt_conditions	file:
stone_skin	src/include/affect/Type.hh	/^    stone_skin,$/;"	m	class:affect::type
stone_skin	src/include/skill/Type.hh	/^    stone_skin,$/;"	m	class:skill::type
stop_fighting	src/fight.cc	/^void stop_fighting(Character *ch, bool fBoth)$/;"	f
stop_follower	src/act_comm.cc	/^void stop_follower(Character *ch)$/;"	f
stop_idling	src/comm.cc	/^void stop_idling(Character *ch)$/;"	f
storage_list_head	src/storage.cc	/^StoredPlayer *storage_list_head;$/;"	v
storage_list_tail	src/storage.cc	/^StoredPlayer *storage_list_tail;$/;"	v
stp	src/include/merc.hh	/^	int	stp;		\/* bonus to stamina -- Montrey *\/$/;"	m	struct:str_app_type
str	src/lootv2.cc	/^	String str;$/;"	m	struct:eq_quality_t	file:
str_app	src/const.cc	/^const struct str_app_type str_app[26] = {$/;"	v	typeref:struct:str_app_type
str_app_type	src/include/merc.hh	/^struct  str_app_type$/;"	s
str_boot_time	src/comm.cc	/^char                str_boot_time[MAX_INPUT_LENGTH];$/;"	v
strcasecmp	src/include/String.hh	/^inline int strcasecmp(const String& astr, const String& bstr) {$/;"	f
strcat	src/include/String.hh	/^inline char *strcat(char *dest, const String& src) {$/;"	f
strchr	src/include/String.hh	/^inline const char *strchr(const String& str, int ch) {$/;"	f
strcmp	src/include/String.hh	/^inline int strcmp(const String& astr, const String& bstr) {$/;"	f
strcpy	src/include/String.hh	/^inline char *strcpy(char *dest, const String& src) {$/;"	f
string	src/deps/cJSON/cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON
strip	src/String.cc	/^strip(const String& chars) const {$/;"	f	class:String
strlen	src/include/String.hh	/^inline size_t strlen(const String& str) {$/;"	f
strncat	src/include/String.hh	/^inline char *strncat(char *dest, const String& src, size_t n) {$/;"	f
strncmp	src/include/String.hh	/^inline int strncmp(const String& astr, const String& bstr, size_t n) {$/;"	f
strncpy	src/include/String.hh	/^inline char *strncpy(char *dest, const String& src, size_t n) {$/;"	f
strongbox	src/include/Player.hh	/^    Object *            strongbox = nullptr;$/;"	m	class:Player
strstr	src/include/String.hh	/^inline char *strstr(char *astr, const String& bstr) {$/;"	f
strstr	src/include/String.hh	/^inline const char *strstr(const String& astr, const String& bstr) {$/;"	f
stupidassline	src/help.cc	/^const String stupidassline =$/;"	v
subject	src/include/Note.hh	/^    String      subject;$/;"	m	class:Note
subscribe	src/event/Dispatcher.cc	/^subscribe(Type type, Handler *s) {$/;"	f	class:event::Dispatcher
subscribers	src/include/event/Dispatcher.hh	/^	std::multimap<Type, Handler *> subscribers;$/;"	m	class:event::Dispatcher
substitute_alias	src/alias.cc	/^void substitute_alias(Descriptor *d, String argument)$/;"	f
substr	src/String.cc	/^substr(std::size_t pos, std::size_t count) const {$/;"	f	class:String
suffix_object	src/deps/cJSON/cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:
suffixes_allowed	src/loot_tables.cc	/^const std::multimap<int, affect::type> suffixes_allowed = {$/;"	v
summon	src/include/skill/Type.hh	/^    summon,$/;"	m	class:skill::type
summon_object	src/include/skill/Type.hh	/^    summon_object,$/;"	m	class:skill::type
sunlight	src/include/GameTime.hh	/^    Sun         sunlight = Night;$/;"	m	class:GameTime
sunray	src/include/skill/Type.hh	/^    sunray,$/;"	m	class:skill::type
swap	src/affect/affect.cc	/^void swap(Affect *a, Affect *b) {$/;"	f	namespace:affect
swearcheck	src/channels.cc	/^bool swearcheck(const String& argument)$/;"	f
swimming	src/include/skill/Type.hh	/^    swimming,$/;"	m	class:skill::type
sword	src/include/skill/Type.hh	/^    sword,$/;"	m	class:skill::type
sys	src/scripts/mudstr.py	/^  import sys$/;"	i
table_entry	src/include/affect/Affect.hh	/^struct table_entry$/;"	s	namespace:affect
tail	src/include/Character.hh	/^    Tail *              tail = nullptr;         \/* -- Elrac *\/$/;"	m	class:Character
tailed_by	src/include/Tail.hh	/^    Character * tailed_by = nullptr;$/;"	m	class:Tail
tailer_name	src/include/Tail.hh	/^    String      tailer_name;$/;"	m	class:Tail
tailing	src/include/Player.hh	/^    int              tailing = 0;$/;"	m	class:Player
talk_auction	src/channels.cc	/^void talk_auction(const String& argument)$/;"	f
talon	src/include/affect/Type.hh	/^    talon,$/;"	m	class:affect::type
talon	src/include/skill/Type.hh	/^    talon,$/;"	m	class:skill::type
target	src/dispel.cc	/^	void *target;$/;"	m	struct:dispel_params	file:
target	src/include/skill/skill.hh	/^	int      target;                 \/* Legal targets                *\/$/;"	m	struct:skill::skill_table_t
target_name	src/magic.cc	/^String target_name;$/;"	v
telcmds	src/include/telnet.hh	/^char *telcmds[] = {$/;"	v
tele_dest	src/Room.cc	/^const Location& Room::tele_dest() const { return prototype.tele_dest; }$/;"	f	class:Room
tele_dest	src/include/RoomPrototype.hh	/^	const Location tele_dest;$/;"	m	class:RoomPrototype
tele_update	src/update.cc	/^void tele_update(void)$/;"	f
teleport	src/include/skill/Type.hh	/^    teleport,$/;"	m	class:skill::type
teleport_object	src/include/skill/Type.hh	/^    teleport_object,$/;"	m	class:skill::type
telopts	src/include/telnet.hh	/^char *telopts[NTELOPTS] = {$/;"	v
test	src/include/event/event.hh	/^	test,$/;"	e	enum:event::Type
text	src/include/Note.hh	/^    String      text;$/;"	m	class:Note
text	src/include/lootv2.hh	/^	String  text;$/;"	m	struct:mod_t
thac0_00	src/include/merc.hh	/^	int      thac0_00;               \/* Thac0 for level  0           *\/$/;"	m	struct:guild_type
thac0_32	src/include/merc.hh	/^	int      thac0_32;               \/* Thac0 for level 32           *\/$/;"	m	struct:guild_type
thief	src/include/Guild.hh	/^	thief,$/;"	e	enum:Guild
thief_poses	src/act_comm.cc	/^std::vector<new_pose_struct> thief_poses           = {$/;"	v
third_attack	src/include/skill/Type.hh	/^    third_attack,$/;"	m	class:skill::type
thru_doors	src/hunt.cc	/^	int thru_doors;$/;"	m	struct:hunt_conditions	file:
time	src/include/War.hh	/^        time_t      time = 0;$/;"	m	class:War::Event
time	src/include/Weather.hh	/^	const GameTime& time;$/;"	m	class:Weather
time	src/include/World.hh	/^	GameTime time;$/;"	m	class:World
timer	src/include/Character.hh	/^    int              timer = 0;  \/* Main timer is now part of descriptor *\/$/;"	m	class:Character
timer	src/include/Descriptor.hh	/^    int              timer = 0;$/;"	m	class:Descriptor
timer	src/include/Object.hh	/^	int			timer = 0;$/;"	m	class:Object
title	src/include/Area.hh	/^    String              title;      \/* -- Elrac *\/$/;"	m	class:Area
title	src/include/Player.hh	/^	String              title;$/;"	m	class:Player
to_c	src/include/Format.hh	/^inline const char *to_c(Flags& s) { return s.to_string().c_str(); }$/;"	f	namespace:Format
to_c	src/include/Format.hh	/^inline const char *to_c(Location& v) { return v.to_string().c_str(); }$/;"	f	namespace:Format
to_c	src/include/Format.hh	/^inline const char *to_c(String& s) { return s.c_str(); }$/;"	f	namespace:Format
to_c	src/include/Format.hh	/^inline const char *to_c(const Flags& s) { return s.to_string().c_str(); }$/;"	f	namespace:Format
to_c	src/include/Format.hh	/^inline const char *to_c(const Location& v) { return v.to_string().c_str(); }$/;"	f	namespace:Format
to_c	src/include/Format.hh	/^inline const char *to_c(const String& s) { return s.c_str(); }$/;"	f	namespace:Format
to_c	src/include/Format.hh	/^inline int to_c(ObjectValue& v) { return v.value(); }$/;"	f	namespace:Format
to_c	src/include/Format.hh	/^inline int to_c(const ObjectValue& v) { return v.value(); }$/;"	f	namespace:Format
to_c	src/include/Format.hh	/^inline unsigned long to_c(Vnum& v) { return v.value(); }$/;"	f	namespace:Format
to_c	src/include/Format.hh	/^inline unsigned long to_c(const Vnum& v) { return v.value(); }$/;"	f	namespace:Format
to_int	src/include/Location.hh	/^	int to_int() const {$/;"	f	class:Location
to_int	src/include/RoomID.hh	/^	int to_int() const {$/;"	f	class:RoomID
to_int	src/include/worldmap/Coordinate.hh	/^	int to_int() const {$/;"	f	class:worldmap::Coordinate
to_list	src/include/Note.hh	/^    String      to_list;$/;"	m	class:Note
to_room	src/hunt.cc	/^	Room *to_room;$/;"	m	struct:hunt_conditions	file:
to_room	src/include/Exit.hh	/^    Room *to_room;$/;"	m	class:Exit
to_string	src/Flags.cc	/^to_string() const {$/;"	f	class:Flags
to_string	src/RoomID.cc	/^to_string(bool short_loc) const {$/;"	f	class:RoomID
to_string	src/include/Location.hh	/^	const String to_string(bool short_loc = true) const {$/;"	f	class:Location
to_string	src/worldmap/Coordinate.cc	/^to_string(bool short_loc) const {$/;"	f	class:worldmap::Coordinate
to_ulong	src/include/Flags.hh	/^	unsigned long to_ulong() const { return bits.to_ulong(); }$/;"	f	class:Flags
to_vnum	src/include/ExitPrototype.hh	/^    Vnum                to_vnum = 0;$/;"	m	class:ExitPrototype
todam	src/include/merc.hh	/^	int      todam;$/;"	m	struct:str_app_type
tohit	src/include/merc.hh	/^	int      tohit;$/;"	m	struct:str_app_type
top_exit	src/memory.cc	/^int     top_exit;$/;"	v
top_mob_index	src/memory.cc	/^int     top_mob_index;$/;"	v
top_obj_index	src/memory.cc	/^int     top_obj_index;$/;"	v
top_reset	src/memory.cc	/^int     top_reset;$/;"	v
top_room	src/memory.cc	/^int     top_room;$/;"	v
top_shop	src/memory.cc	/^int     top_shop;$/;"	v
trade_list	src/Note.cc	/^Note *trade_list;$/;"	v
train	src/include/Character.hh	/^    int              train = 0;$/;"	m	class:Character
trains_to_hit	src/include/Player.hh	/^	int			    trains_to_hit = 0;$/;"	m	class:Player
trains_to_mana	src/include/Player.hh	/^	int			    trains_to_mana = 0;$/;"	m	class:Player
trains_to_stam	src/include/Player.hh	/^	int			    trains_to_stam = 0;$/;"	m	class:Player
trip	src/fight.cc	/^bool trip(Character *ch, Character *victim, int chance, skill::type attack_skill)$/;"	f
trip	src/include/skill/Type.hh	/^    trip,$/;"	m	class:skill::type
type	src/deps/cJSON/cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON
type	src/dispel.cc	/^	affect::type type;$/;"	m	struct:dispel_params	file:
type	src/include/EQSocket.hh	/^    char type = 0;$/;"	m	class:EQSocket
type	src/include/MobProg.hh	/^    Flags::Bit         type;$/;"	m	class:MobProg
type	src/include/Note.hh	/^    int         type = 0;$/;"	m	class:Note
type	src/include/War.hh	/^        int      type = 0;$/;"	m	class:War::Event
type	src/include/affect/Affect.hh	/^    ::affect::type                type = ::affect::type::none;$/;"	m	class:affect::Affect
type	src/include/affect/Affect.hh	/^    ::affect::type type;$/;"	m	struct:affect::fn_data_container_type
type	src/include/affect/Type.hh	/^enum class type {$/;"	c	namespace:affect
type	src/include/merc.hh	/^	int         type;$/;"	m	struct:item_type
type	src/include/merc.hh	/^	int      type;$/;"	m	struct:weapon_table_t
type	src/include/skill/Type.hh	/^enum class type {$/;"	c	namespace:skill
type	src/include/tables.hh	/^	affect::type type;$/;"	m	struct:affect_table_type
type	src/include/tables.hh	/^    Sector type;$/;"	m	struct:sector_type
type	src/lootv2.cc	/^	int type;$/;"	m	struct:eq_roll_t	file:
type	src/skills.cc	/^	skill::type type;$/;"	m	struct:s_spell_info	file:
type_st	src/include/gem/gem.hh	/^struct type_st$/;"	s	namespace:gem
type_table	src/gem/gem.cc	/^const std::vector<type_st> type_table = {$/;"	m	namespace:gem	file:
type_to_name	src/MobProg.cc	/^type_to_name(Flags::Bit type) {$/;"	f	class:MobProg
unarmed	src/include/skill/Type.hh	/^    unarmed,$/;"	m	class:skill::type
uncolor	src/String.cc	/^uncolor() const {$/;"	f	class:String
uncolored	src/include/worldmap/MapColor.hh	/^	static const MapColor uncolored;$/;"	m	class:worldmap::MapColor
underwater_update	src/update.cc	/^void underwater_update(void)$/;"	f
undo_spell	src/dispel.cc	/^bool undo_spell(int dis_level, Character *victim, affect::type type, bool save) {$/;"	f
undo_spell	src/include/skill/Type.hh	/^    undo_spell,$/;"	m	class:skill::type
unequip_char	src/handler.cc	/^void unequip_char(Character *ch, Object *obj)$/;"	f
unique_item	src/Object.cc	/^void unique_item(Object *item)$/;"	f
unknown	src/include/Sector.hh	/^    unknown = 254,$/;"	m	class:Sector
unknown	src/include/affect/Type.hh	/^    unknown = -1, \/\/ don't touch$/;"	m	class:affect::type
unknown	src/include/skill/Type.hh	/^    unknown = -1, \/\/ don't touch$/;"	m	class:skill::type
unsubscribe	src/event/Dispatcher.cc	/^unsubscribe(Type type, Handler *s) {$/;"	f	class:event::Dispatcher
update	src/Area.cc	/^update() {$/;"	f	class:Area
update	src/Auction.cc	/^update() {$/;"	f	class:Auction
update	src/Character.cc	/^void Character::update() {$/;"	f	class:Character
update	src/GameTime.cc	/^update() {$/;"	f	class:GameTime
update	src/Weather.cc	/^update()$/;"	f	class:Weather
update	src/World.cc	/^update() {$/;"	f	class:World
update	src/affect/affect.cc	/^void update(Affect *paf, const Affect *aff_template) {$/;"	f	namespace:affect
update	src/deps/cJSON/cJSON.c	/^static int update(printbuffer *p)$/;"	f	file:
update_cache	src/affect/affect_cache_array.cc	/^void update_cache(Character *ch, ::affect::type type, bool fAdd) {$/;"	f	namespace:affect
update_handler	src/update.cc	/^void update_handler(void)$/;"	f
update_pc_index	src/save.cc	/^void update_pc_index(const Character *ch, bool remove)$/;"	f
update_pos	src/fight.cc	/^void update_pos(Character *victim)$/;"	f
update_read	src/Note.cc	/^void update_read(Character *ch, Note *pnote)$/;"	f
update_records	src/conn/ReadNewMOTDState.cc	/^unsigned long update_records()$/;"	f	namespace:conn
update_site	src/conn/GetOldPassState.cc	/^void update_site(const Character *ch)$/;"	f	namespace:conn
update_text_file	src/act_comm.cc	/^void update_text_file(Character *ch, const String& file, const String& str)$/;"	f
uppercase	src/String.cc	/^uppercase() const {$/;"	f	class:String
util	src/include/declare.hh	/^namespace util {$/;"	n
util	src/include/util/Image.hh	/^namespace util {$/;"	n
util	src/util/Image.cc	/^namespace util {$/;"	n	file:
valid	src/include/World.hh	/^	bool valid() const {$/;"	f	class:World
value	src/include/Object.hh	/^	ObjectValue     value[5];$/;"	m	class:Object
value	src/include/ObjectPrototype.hh	/^    ObjectValue         value[5];$/;"	m	class:ObjectPrototype
value	src/include/ObjectValue.hh	/^	const int value() const { return _value; }$/;"	f	class:ObjectValue
value	src/include/Vnum.hh	/^	int value() const { return _value; }$/;"	f	class:Vnum
value	src/include/merc.hh	/^	int         value;$/;"	m	struct:deity_type
value	src/util/Image.cc	/^value(Channel rgb, unsigned int x, unsigned int y) const {$/;"	f	class:util::Image
valuedouble	src/deps/cJSON/cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valueint	src/deps/cJSON/cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valuestring	src/deps/cJSON/cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON
vape_ceq	src/act_info.cc	/^void vape_ceq(Character *ch)$/;"	f
vape_ceq_recursive	src/act_info.cc	/^Object *vape_ceq_recursive(Character *ch, Object *obj, int depth) {$/;"	f
ventriloquate	src/include/skill/Type.hh	/^    ventriloquate,$/;"	m	class:skill::type
version	src/include/Area.hh	/^    int              version = 1;    \/* Area file versioning -- Montrey *\/$/;"	m	class:Area
vict_found	src/include/Social.hh	/^    String    vict_found;$/;"	m	class:Social
video_flags	src/include/Player.hh	/^    Flags               video_flags;$/;"	m	class:Player
view_room_hpbar	src/duel.cc	/^void view_room_hpbar(Character *ch)$/;"	f
viewroom	src/include/Duel.hh	/^        Room *viewroom = nullptr;$/;"	m	class:Duel::Arena
violence_update	src/fight.cc	/^void violence_update(void)$/;"	f
vision	src/include/skill/Type.hh	/^    vision,$/;"	m	class:skill::type
vnum	src/include/MobilePrototype.hh	/^    const Vnum                vnum;$/;"	m	class:MobilePrototype
vnum	src/include/ObjectPrototype.hh	/^    const Vnum              vnum;$/;"	m	class:ObjectPrototype
vnum	src/include/RoomPrototype.hh	/^	const Vnum  vnum;$/;"	m	class:RoomPrototype
vnum	src/include/gem/gem.hh	/^    int         vnum;$/;"	m	struct:gem::type_st
vnum	src/include/merc.hh	/^	int      vnum;$/;"	m	struct:weapon_table_t
vnum	src/lootv2.cc	/^	int vnum;$/;"	m	struct:eq_roll_t	file:
vnum_data	src/include/RoomID.hh	/^	unsigned short vnum_data;$/;"	m	class:RoomID
vnum_to_color	src/worldmap/Region.cc	/^const MapColor& Region::vnum_to_color(const Vnum& vnum) const {$/;"	f	class:worldmap::Region
vo	src/include/MobProgActList.hh	/^    void *           vo = nullptr;$/;"	m	class:MobProgActList
vuln	src/include/merc.hh	/^	Flags       vuln;                   \/* vuln bits for the race *\/$/;"	m	struct:race_type
vuln_flags	src/include/MobilePrototype.hh	/^    Flags               vuln_flags;$/;"	m	class:MobilePrototype
wait	src/include/Character.hh	/^    int              wait = 0;$/;"	m	class:Character
wait_update	src/update.cc	/^void wait_update(void)$/;"	f
wands	src/include/skill/Type.hh	/^    wands,$/;"	m	class:skill::type
war_is_full	src/War.cc	/^bool war_is_full(War *war, bool challenger)$/;"	f
war_join	src/War.cc	/^void war_join(Clan *clan, War *war, bool challenger)$/;"	f
war_kill	src/War.cc	/^void war_kill(Character *ch, Character *victim)$/;"	f
war_lookup	src/War.cc	/^War *war_lookup(int number)$/;"	f
war_power_adjust	src/War.cc	/^void war_power_adjust(Clan *vclan, bool surrender)$/;"	f
war_score_adjust	src/War.cc	/^void war_score_adjust(War *war, Character *ch, Character *victim, int amount)$/;"	f
war_start	src/War.cc	/^War *war_start(Clan *chal, Clan *def)$/;"	f
war_stop	src/War.cc	/^void war_stop(War *war)$/;"	f
war_table_head	src/War.cc	/^War *war_table_head;$/;"	v
war_table_tail	src/War.cc	/^War *war_table_tail;$/;"	v
war_unjoin	src/War.cc	/^void war_unjoin(Clan *clan, War *war, bool remove)$/;"	f
war_win	src/War.cc	/^void war_win(War *war, Character *ch)$/;"	f
warcpmod	src/include/Clan.hh	/^    int     warcpmod = 0;   \/* how much their power is modified by wars *\/$/;"	m	class:Clan
warp_locs	src/include/Player.hh	/^    std::set<String>    warp_locs;$/;"	m	class:Player
warrior	src/include/Guild.hh	/^	warrior,$/;"	e	enum:Guild
warrior_poses	src/act_comm.cc	/^std::vector<new_pose_struct> warrior_poses           = {$/;"	v
was_in_room	src/include/Character.hh	/^    Room *   was_in_room = nullptr;$/;"	m	class:Character
water_noswim	src/include/Sector.hh	/^	water_noswim = 7,$/;"	m	class:Sector
water_swim	src/include/Sector.hh	/^	water_swim = 6,$/;"	m	class:Sector
weaken	src/include/affect/Type.hh	/^    weaken,$/;"	m	class:affect::type
weaken	src/include/skill/Type.hh	/^    weaken,$/;"	m	class:skill::type
wealth	src/include/MobilePrototype.hh	/^    long                wealth = 0;$/;"	m	class:MobilePrototype
weapon	src/include/merc.hh	/^	int      weapon;                 \/* First weapon                 *\/$/;"	m	struct:guild_type
weapon_acidic	src/include/affect/Type.hh	/^    weapon_acidic,$/;"	m	class:affect::type
weapon_affects	src/tables.cc	/^const std::vector<affect_table_type> weapon_affects = {$/;"	v
weapon_flaming	src/include/affect/Type.hh	/^    weapon_flaming,$/;"	m	class:affect::type
weapon_frost	src/include/affect/Type.hh	/^    weapon_frost,$/;"	m	class:affect::type
weapon_lookup	src/lookup.cc	/^int weapon_lookup(const String& name)$/;"	f
weapon_name	src/typename.cc	/^String weapon_name(int weapon_type)$/;"	f
weapon_sharp	src/include/affect/Type.hh	/^    weapon_sharp,$/;"	m	class:affect::type
weapon_shocking	src/include/affect/Type.hh	/^    weapon_shocking,$/;"	m	class:affect::type
weapon_table	src/const.cc	/^const std::vector<weapon_table_t> weapon_table = {$/;"	v
weapon_table_t	src/include/merc.hh	/^struct weapon_table_t$/;"	s
weapon_two_hands	src/include/affect/Type.hh	/^    weapon_two_hands,$/;"	m	class:affect::type
weapon_vampiric	src/include/affect/Type.hh	/^    weapon_vampiric,$/;"	m	class:affect::type
weapon_vorpal	src/include/affect/Type.hh	/^    weapon_vorpal,$/;"	m	class:affect::type
wear_bit_name	src/typename.cc	/^const String wear_bit_name(const Flags& flags) {$/;"	f
wear_flags	src/include/Object.hh	/^	Flags           wear_flags;$/;"	m	class:Object
wear_flags	src/include/ObjectPrototype.hh	/^    Flags               wear_flags;  \/* Formerly INT *\/$/;"	m	class:ObjectPrototype
wear_flags	src/tables.cc	/^const std::vector<flag_type> wear_flags = {$/;"	v
wear_loc	src/include/Object.hh	/^	int			wear_loc = 0;$/;"	m	class:Object
wear_obj	src/act_obj.cc	/^void wear_obj(Character *ch, Object *obj, bool fReplace)$/;"	f
weather	src/include/World.hh	/^	Weather weather;$/;"	m	class:World
weight	src/include/Object.hh	/^	int			weight = 0;$/;"	m	class:Object
weight	src/include/ObjectPrototype.hh	/^    int              weight = 0;$/;"	m	class:ObjectPrototype
where	src/include/affect/Affect.hh	/^    int              where = 0;$/;"	m	class:affect::Affect
where_name	src/act_info.cc	/^char   *const   where_name      [] = {$/;"	v
whip	src/include/skill/Type.hh	/^    whip,$/;"	m	class:skill::type
whisper	src/include/Player.hh	/^    String              whisper;$/;"	m	class:Player
who_name	src/include/Clan.hh	/^    String  who_name;$/;"	m	class:Clan
who_name	src/include/merc.hh	/^	String      who_name;		\/* first 3 characters are used in 'who' *\/$/;"	m	struct:pc_race_type
who_name	src/include/merc.hh	/^	String      who_name;               \/* Three-letter name for 'who'  *\/$/;"	m	struct:guild_type
width	src/include/util/Image.hh	/^	unsigned int width() const { return _width; }$/;"	f	class:util::Image
width	src/include/util/Image.hh	/^	void width(unsigned int v) { _width = v; }$/;"	f	class:util::Image
width	src/include/worldmap/Worldmap.hh	/^	unsigned int width() const { return _width; }$/;"	f	class:worldmap::Worldmap
wield	src/include/merc.hh	/^	int      wield;$/;"	m	struct:str_app_type
will_fit	src/act_obj.cc	/^bool will_fit(Object *obj, Object *container)$/;"	f
wimpy	src/include/Character.hh	/^    int              wimpy = 0;$/;"	m	class:Character
wis_app	src/const.cc	/^const struct wis_app_type wis_app[26] = {$/;"	v	typeref:struct:wis_app_type
wis_app_type	src/include/merc.hh	/^struct  wis_app_type$/;"	s
wiz_bit_name	src/typename.cc	/^String wiz_bit_name(const Flags& flags)$/;"	f
wiz_flags	src/tables.cc	/^const std::vector<flag_type> wiz_flags = {$/;"	v
wizlock	src/Game.cc	/^bool Game::wizlock = false;$/;"	m	class:Game	file:
wizlock	src/include/Game.hh	/^	static bool wizlock;$/;"	m	class:Game
wiznet	src/channels.cc	/^void wiznet(const String& string, Character *ch, Object *obj, const Flags& flag, const Flags& flag_skip, int min_rank)$/;"	f
wiznet_flags	src/include/Character.hh	/^    Flags               wiznet_flags; \/* wiz stuff *\/$/;"	m	class:Character
wiznet_table	src/tables.cc	/^const std::vector<wiznet_type> wiznet_table = {$/;"	v
wiznet_type	src/include/merc.hh	/^struct wiznet_type$/;"	s
word_of_recall	src/include/skill/Type.hh	/^    word_of_recall,$/;"	m	class:skill::type
world	src/Game.cc	/^world() {$/;"	f	class:Game
world	src/include/Area.hh	/^    World& world;$/;"	m	class:Area
worldmap	src/include/declare.hh	/^namespace worldmap {$/;"	n
worldmap	src/include/worldmap/Coordinate.hh	/^namespace worldmap {$/;"	n
worldmap	src/include/worldmap/MapColor.hh	/^namespace worldmap {$/;"	n
worldmap	src/include/worldmap/Quadtree.hh	/^namespace worldmap {$/;"	n
worldmap	src/include/worldmap/Region.hh	/^namespace worldmap {$/;"	n
worldmap	src/include/worldmap/Worldmap.hh	/^namespace worldmap {$/;"	n
worldmap	src/worldmap/Region.cc	/^namespace worldmap {$/;"	n	file:
worldmap	src/worldmap/Worldmap.cc	/^namespace worldmap {$/;"	n	file:
wraith	src/include/Player.hh	/^	Character *         wraith = nullptr;$/;"	m	class:Player
wrap_string	src/Note.cc	/^const String wrap_string(const String& s, unsigned long wrap_len) {$/;"	f
wrath	src/include/skill/Type.hh	/^    wrath,$/;"	m	class:skill::type
write_smack	src/wiz_gen.cc	/^write_smack(Character *victim)$/;"	f
write_to_buffer	src/comm.cc	/^void write_to_buffer(Descriptor *d, const String& txt)$/;"	f
write_to_descriptor	src/comm.cc	/^bool write_to_descriptor(int desc, const String& txt, int length)$/;"	f
x	src/include/worldmap/Coordinate.hh	/^	short x;$/;"	m	class:worldmap::Coordinate
xp_compute	src/fight.cc	/^int xp_compute(Character *gch, Character *victim, int total_levels, int diff_classes)$/;"	f
y	src/include/worldmap/Coordinate.hh	/^	short y;$/;"	m	class:worldmap::Coordinate
year	src/include/GameTime.hh	/^    int         year = 0;$/;"	m	class:GameTime
zombie	src/include/Player.hh	/^	Character *         zombie = nullptr;$/;"	m	class:Player
~Area	src/Area.cc	/^~Area() {$/;"	f	class:Area
~Arena	src/include/Duel.hh	/^        virtual ~Arena() {}$/;"	f	class:Duel::Arena
~Auction	src/include/Auction.hh	/^	virtual ~Auction() {}$/;"	f	class:Auction
~Battle	src/include/Battle.hh	/^	virtual ~Battle() {}$/;"	f	class:Battle
~Character	src/Character.cc	/^Character::~Character() {$/;"	f	class:Character
~Clan	src/include/Clan.hh	/^    virtual ~Clan() {}$/;"	f	class:Clan
~Coordinate	src/include/worldmap/Coordinate.hh	/^	virtual ~Coordinate() {}$/;"	f	class:worldmap::Coordinate
~DepartedPlayer	src/include/DepartedPlayer.hh	/^	virtual ~DepartedPlayer() {}$/;"	f	class:DepartedPlayer
~Descriptor	src/include/Descriptor.hh	/^    virtual ~Descriptor() {}$/;"	f	class:Descriptor
~Disabled	src/include/Disabled.hh	/^    virtual ~Disabled() {}$/;"	f	class:Disabled
~Dispatcher	src/include/event/Dispatcher.hh	/^	virtual ~Dispatcher() {}$/;"	f	class:event::Dispatcher
~Duel	src/include/Duel.hh	/^    virtual ~Duel() {}$/;"	f	class:Duel
~EQSocket	src/include/EQSocket.hh	/^	virtual ~EQSocket() {}$/;"	f	class:EQSocket
~Edit	src/include/Edit.hh	/^    virtual ~Edit() {}$/;"	f	class:Edit
~Event	src/include/War.hh	/^        virtual ~Event() {}$/;"	f	class:War::Event
~Exit	src/include/Exit.hh	/^	virtual ~Exit() {}$/;"	f	class:Exit
~ExitPrototype	src/include/ExitPrototype.hh	/^	virtual ~ExitPrototype() {}$/;"	f	class:ExitPrototype
~ExtraDescr	src/include/ExtraDescr.hh	/^	virtual ~ExtraDescr() {}$/;"	f	class:ExtraDescr
~Flags	src/include/Flags.hh	/^	virtual ~Flags() {}$/;"	f	class:Flags
~Game	src/include/Game.hh	/^	virtual ~Game() {}$/;"	f	class:Game
~GameTime	src/include/GameTime.hh	/^	virtual ~GameTime() {}$/;"	f	class:GameTime
~GarbageCollectingList	src/include/GarbageCollectingList.hh	/^	virtual ~GarbageCollectingList() {}$/;"	f	class:GarbageCollectingList
~Handler	src/include/event/Handler.hh	/^	virtual ~Handler() {}$/;"	f	class:event::Handler
~Image	src/util/Image.cc	/^~Image() {$/;"	f	class:util::Image
~Location	src/include/Location.hh	/^	virtual ~Location() {} \/\/ no data to delete$/;"	f	class:Location
~MapColor	src/include/worldmap/MapColor.hh	/^	virtual ~MapColor() {}$/;"	f	class:worldmap::MapColor
~MobProg	src/include/MobProg.hh	/^	virtual ~MobProg() {}$/;"	f	class:MobProg
~MobProgActList	src/include/MobProgActList.hh	/^	virtual ~MobProgActList() {}$/;"	f	class:MobProgActList
~MobilePrototype	src/MobilePrototype.cc	/^~MobilePrototype() {$/;"	f	class:MobilePrototype
~Note	src/include/Note.hh	/^    virtual ~Note() {}$/;"	f	class:Note
~Object	src/Object.cc	/^Object::~Object() {$/;"	f	class:Object
~ObjectPrototype	src/include/ObjectPrototype.hh	/^    virtual ~ObjectPrototype() {}$/;"	f	class:ObjectPrototype
~ObjectValue	src/include/ObjectValue.hh	/^	virtual ~ObjectValue() {}$/;"	f	class:ObjectValue
~Opponent	src/include/War.hh	/^        virtual ~Opponent() {}$/;"	f	class:War::Opponent
~Player	src/include/Player.hh	/^	virtual ~Player() {}$/;"	f	class:Player
~Pooled	src/include/Pooled.hh	/^	virtual ~Pooled() {$/;"	f	class:Pooled
~Quadtree	src/include/worldmap/Quadtree.hh	/^	virtual ~Quadtree() {$/;"	f	class:worldmap::Quadtree
~QuestArea	src/include/QuestArea.hh	/^	virtual ~QuestArea() {}$/;"	f	class:QuestArea
~Region	src/include/worldmap/Region.hh	/^	virtual ~Region() {}$/;"	f	class:worldmap::Region
~Reset	src/include/Reset.hh	/^	virtual ~Reset() {}$/;"	f	class:Reset
~Room	src/include/Room.hh	/^	virtual ~Room() {}$/;"	f	class:Room
~RoomID	src/include/RoomID.hh	/^	virtual ~RoomID() {}$/;"	f	class:RoomID
~RoomPrototype	src/RoomPrototype.cc	/^~RoomPrototype() {$/;"	f	class:RoomPrototype
~Shop	src/include/Shop.hh	/^    virtual ~Shop() {}$/;"	f	class:Shop
~Social	src/include/Social.hh	/^    virtual ~Social() {}$/;"	f	class:Social
~StoredPlayer	src/include/StoredPlayer.hh	/^	virtual ~StoredPlayer() {}$/;"	f	class:StoredPlayer
~String	src/include/String.hh	/^	virtual ~String() {}$/;"	f	class:String
~Tail	src/include/Tail.hh	/^    virtual ~Tail() {}$/;"	f	class:Tail
~Vnum	src/include/Vnum.hh	/^	virtual ~Vnum() {}$/;"	f	class:Vnum
~War	src/War.cc	/^War::~War() {$/;"	f	class:War
~Weather	src/include/Weather.hh	/^	virtual ~Weather() {}$/;"	f	class:Weather
~World	src/World.cc	/^~World() {$/;"	f	class:World
~Worldmap	src/worldmap/Worldmap.cc	/^~Worldmap() {$/;"	f	class:worldmap::Worldmap
