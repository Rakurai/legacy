act_comm.c:	switch (ch->pcdata->confirm_delete)
act_comm.c:			ch->pcdata->confirm_delete = 1;
act_comm.c:				ch->pcdata->confirm_delete = 0;
act_comm.c:			if (ch->pcdata->remort_count > 0)
act_comm.c:				ptc(ch, "This is a %dx remort character.\n\r", ch->pcdata->remort_count);
act_comm.c:			ch->pcdata->confirm_delete = 2;
act_comm.c:				ch->pcdata->confirm_delete = 0;
act_comm.c:			if (ch->pcdata && IS_SET(ch->pcdata->video, VIDEO_VT100))
act_comm.c:			bug("do_delete: bad confirm_delete: %d ", ch->pcdata->confirm_delete);
act_comm.c:	if (IS_SET(ch->pcdata->plr,PLR_OOC))
act_comm.c:		REMOVE_BIT(ch->pcdata->plr,PLR_OOC);
act_comm.c:		SET_BIT(ch->pcdata->plr,PLR_OOC);
act_comm.c:	if (IS_SET(ch->pcdata->plr, PLR_PK) && (argument[0] == '\0' || !IS_IMP(ch)))
act_comm.c:		SET_BIT(ch->pcdata->plr,PLR_PK);
act_comm.c:		if (!IS_SET(wch->pcdata->plr, PLR_PK))
act_comm.c:		REMOVE_BIT(wch->pcdata->plr,PLR_PK);
act_comm.c:    if (IS_SET(ch->pcdata->plr,PLR_CHATMODE))
act_comm.c:       REMOVE_BIT(ch->pcdata->plr,PLR_CHATMODE);
act_comm.c:       SET_BIT(ch->pcdata->plr,PLR_CHATMODE);
act_comm.c:    if (IS_SET(ch->pcdata->plr,PLR_PRIVATE))
act_comm.c:       REMOVE_BIT(ch->pcdata->plr,PLR_PRIVATE);
act_comm.c:       SET_BIT(ch->pcdata->plr,PLR_PRIVATE);
act_comm.c:    if (IS_SET(ch->pcdata->plr,PLR_NOSHOWLAST))
act_comm.c:        REMOVE_BIT(ch->pcdata->plr,PLR_NOSHOWLAST);
act_comm.c:        SET_BIT(ch->pcdata->plr,PLR_NOSHOWLAST);
act_comm.c:    if ( IS_SET(ch->pcdata->plr, PLR_AUTOPEEK) )
act_comm.c:       REMOVE_BIT(ch->pcdata->plr, PLR_AUTOPEEK);
act_comm.c:       SET_BIT(ch->pcdata->plr, PLR_AUTOPEEK);
act_comm.c:    if (ch->pcdata->remort_count < 1)
act_comm.c:    if (IS_SET(ch->pcdata->plr,PLR_SHOWRAFF))
act_comm.c:       REMOVE_BIT(ch->pcdata->plr,PLR_SHOWRAFF);
act_comm.c:       SET_BIT(ch->pcdata->plr,PLR_SHOWRAFF);
act_comm.c:        if (ch->pcdata->buffer->string[0] != '\0')
act_comm.c:     free_string(ch->pcdata->afk);
act_comm.c:     ch->pcdata->afk = str_dup(buf);
act_comm.c:   if (IS_SET(ch->pcdata->plr,PLR_NONOTIFY))
act_comm.c:     REMOVE_BIT(ch->pcdata->plr,PLR_NONOTIFY);
act_comm.c:     SET_BIT(ch->pcdata->plr,PLR_NONOTIFY);
act_comm.c:	if (ch->pcdata->pktimer > 0)
act_comm.c:	if (IS_SET(ch->pcdata->plr, PLR_SHOWLOST) && !argument[0] && !IS_IMMORTAL(ch))
act_comm.c:		found_loc = showlost(ch, ch->pcdata->locker,   FALSE, TRUE);
act_comm.c:			if (ch->pcdata && ch->pcdata->gameout && ch->pcdata->gameout[0] != '\0')
act_comm.c:				ptc(victim, "[%s] %s\n\r", ch->name, ch->pcdata->gameout);
act_comm.c:	if (ch->pcdata && IS_SET(ch->pcdata->video, VIDEO_VT100))
act_comm.c:    ch->pcdata->backup = get_play_seconds(ch);
act_comm.c:        if (ch->master->pcdata->skeleton == ch)
act_comm.c:            ch->master->pcdata->skeleton = NULL;
act_comm.c:        if (ch->master->pcdata->zombie == ch)
act_comm.c:            ch->master->pcdata->zombie = NULL;
act_comm.c:        if (ch->master->pcdata->wraith == ch)
act_comm.c:            ch->master->pcdata->wraith = NULL;
act_comm.c:        if (ch->master->pcdata->gargoyle == ch)
act_comm.c:            ch->master->pcdata->gargoyle = NULL;
act_comm.c:            if ( (!victim) || (victim != ch->pet) || (!ch->pcdata->familiar) )
act_comm.c:                      exp_per_level(gch,gch->pcdata->points) - gch->exp);
act_comm.c:            if (ch->pcdata->learned[sn] <
act_comm.c:                ch->pcdata->learned[*weapon_table[i].gsn])
act_comm.c:    	ch->pcdata->deity == NULL ? "Alisa" : str_dup(ch->pcdata->deity));
act_comm.c:	if (IS_SET(ch->pcdata->plr, PLR_NEWSCORE))
act_comm.c:		REMOVE_BIT(ch->pcdata->plr, PLR_NEWSCORE);
act_comm.c:		SET_BIT(ch->pcdata->plr, PLR_NEWSCORE);
act_info.c:	  || (ch->pcdata->squestobj != NULL && ch->pcdata->squestobj == obj)))
act_info.c:     if ( IS_SET ( victim->pcdata->plr, PLR_LINK_DEAD ) )
act_info.c:     || (!ch->desc->original && ch->pcdata->squestmob != NULL && victim == ch->pcdata->squestmob)))
act_info.c:    if ( !IS_NPC(victim) && (victim->pcdata->aura[0] != '\0'))
act_info.c:        sprintf(string,"{W(%s{W) ",victim->pcdata->aura);
act_info.c:        strcat( buf, victim->pcdata->title );
act_info.c:      , victim->pcdata->pckills, victim->pcdata->pckilled);
act_info.c:      , victim->pcdata->arenakills, victim->pcdata->arenakilled);
act_info.c:            victim->pcdata->deity);
act_info.c:    {	if (!IS_NPC(victim) && victim->pcdata->spouse==NULL && iWear==WEAR_WEDDINGRING
act_info.c:    &&   IS_SET(ch->pcdata->plr, PLR_AUTOPEEK)
act_info.c:      ch->pcdata->lastcolor[0] = color;
act_info.c:      ch->pcdata->lastcolor[1] = bold;
act_info.c:	if (!IS_NPC(ch) && ch->pcdata->color[slot] != 0)
act_info.c:		set_color(ch, ch->pcdata->color[slot], ch->pcdata->bold[slot]);
act_info.c:    if (IS_SET(ch->pcdata->plr,PLR_CHATMODE))
act_info.c:    if (IS_SET(ch->pcdata->plr,PLR_SHOWRAFF))
act_info.c:    if (IS_SET(ch->pcdata->plr,PLR_AUTOPEEK))
act_info.c:	if (IS_SET(ch->pcdata->plr,PLR_SHOWLOST))
act_info.c:        if ( IS_SET(ch->pcdata->video, VIDEO_FLASH_LINE) )
act_info.c:        else if ( IS_SET(ch->pcdata->video, VIDEO_FLASH_OFF) )
act_info.c:        if (IS_SET(ch->pcdata->plr,PLR_SHOWLOST))
act_info.c:        sprintf(buf, "Plr  : %s\n\r",plr_bit_name(victim->pcdata->plr));
act_info.c:    if (IS_SET(ch->pcdata->plr,PLR_SHOWLOST))
act_info.c:      REMOVE_BIT(ch->pcdata->plr,PLR_SHOWLOST);
act_info.c:      SET_BIT(ch->pcdata->plr,PLR_SHOWLOST);
act_info.c:				show_list_to_char(ch->pcdata->locker, ch, TRUE, TRUE, FALSE);
act_info.c:				show_list_to_char(ch->pcdata->strongbox, ch, TRUE, TRUE, FALSE);
act_info.c:			ch->gold, ch->silver, ch->exp, (ch->level + 1) * exp_per_level(ch,ch->pcdata->points) - ch->exp);
act_info.c:		ch->questpoints, ch->pcdata->skillpoints, ch->pcdata->rolepoints);
act_info.c:		IS_SET(victim->pcdata->plr, PLR_OOC) ? "{W({YRP{W){x" : "",
act_info.c:		IS_SET(victim->pcdata->plr, PLR_PAINT) ? "{W({VPB{W){x" : "",
act_info.c:		sprintf(buf, "{G%2d{x", victim->pcdata->remort_count);
act_info.c:		(IS_SET(victim->pcdata->plr, PLR_PK)) ? "{P[{x" : "{g[{x",
act_info.c:		(IS_SET(victim->pcdata->plr, PLR_PK)) ? "{P]{x" : "{g]{x");
act_info.c:		victim->pcdata->title);
act_info.c:		if (victim->pcdata->rank != NULL)
act_info.c:			rank = victim->pcdata->rank;
act_info.c:		else if (IS_SET(victim->pcdata->cgroup, GROUP_LEADER))
act_info.c:		else if (IS_SET(victim->pcdata->cgroup, GROUP_DEPUTY))
act_info.c:	if (IS_REMORT(victim) && victim->pcdata->status != NULL && victim->pcdata->status[0] != '\0')
act_info.c:		sprintf(remort, "%s{x, ", victim->pcdata->status);
act_info.c:	sprintf(block, "%s%s{PRating: %d{x\n\r", clan, remort, victim->pcdata->pkrank);
act_info.c:		add_buf(output,victim->pcdata->afk);
act_info.c:		 || (fPK && !IS_SET(wch->pcdata->plr, PLR_PK))
act_info.c:			if (IS_SET(wch->pcdata->cgroup, GROUP_LEADER))
act_info.c:			else if (IS_SET(wch->pcdata->cgroup, GROUP_DEPUTY))
act_info.c:			charitems[nMatch].levelkey = 1000 * wch->pcdata->remort_count + wch->level;
act_info.c:			sprintf(rbuf, "{G%2d{x", wch->pcdata->remort_count);
act_info.c:		if (wch->level >= LEVEL_IMMORTAL && wch->pcdata->immname[0])
act_info.c:			for (q = block1, *q++ = ' ', p = wch->pcdata->immname; *p; p++ )
act_info.c:				IS_SET(wch->pcdata->plr, PLR_PK) ? "{P" : "{W",
act_info.c:				IS_SET(wch->pcdata->plr, PLR_PK) ? "{P" : "{W",
act_info.c:				IS_SET(wch->pcdata->cgroup, GROUP_LEADER) ? "{Y~" :
act_info.c:				IS_SET(wch->pcdata->cgroup, GROUP_DEPUTY) ? "{B~" : " ",
act_info.c:				wch->pcdata->rank[0] ? wch->pcdata->rank :
act_info.c:			IS_SET(wch->pcdata->plr, PLR_OOC)   ? "{YR{x" : "{b-{x",
act_info.c:			IS_SET(wch->pcdata->plr, PLR_PAINT) ? "{V*{x" : "{M-{x");
act_info.c:		strcat(buf, wch->pcdata->title);
act_info.c:        if (!IS_SET(wch->pcdata->plr, PLR_PRIVATE))
act_info.c:                IS_SET(wch->pcdata->plr, PLR_OOC) ? "{Y*{b" : " ",
act_info.c:                IS_SET(wch->pcdata->plr, PLR_PK) ? "{G*{b" : " ",
act_info.c:                IS_SET(wch->pcdata->plr, PLR_PAINT) ? "{P*{b" : " ",
act_info.c:		IS_SET(wch->pcdata->plr, PLR_SQUESTOR) ? "{B*{b" : " ",
act_info.c:			if (iWear == WEAR_WEDDINGRING && ch->pcdata->spouse == NULL && !IS_IMMORTAL(ch))
act_info.c:			ptc(ch, "{gPlr: %s\n\r",plr_bit_name(victim->pcdata->plr));
act_info.c:    free_string( ch->pcdata->title );
act_info.c:    ch->pcdata->title = str_dup( buf );
act_info.c:        free_string( ch->pcdata->immname);
act_info.c:        ch->pcdata->immname = str_dup( "" );
act_info.c:    free_string( ch->pcdata->immname);
act_info.c:    ch->pcdata->immname = str_dup(block);
act_info.c:            ch->pcdata->immname );
act_info.c:			free_string(ch->pcdata->fingerinfo);
act_info.c:			ch->pcdata->fingerinfo = str_dup("");
act_info.c:			if (ch->pcdata->fingerinfo == NULL
act_info.c:			 || ch->pcdata->fingerinfo[0] == '\0')
act_info.c:			strcpy(buf, ch->pcdata->fingerinfo);
act_info.c:						free_string(ch->pcdata->fingerinfo);
act_info.c:						ch->pcdata->fingerinfo = str_dup(buf);
act_info.c:							ch->pcdata->fingerinfo ?
act_info.c:							ch->pcdata->fingerinfo :
act_info.c:			free_string(ch->pcdata->fingerinfo);
act_info.c:			ch->pcdata->fingerinfo = str_dup(buf);
act_info.c:			if (ch->pcdata->fingerinfo != NULL)
act_info.c:				strcat(buf, ch->pcdata->fingerinfo);
act_info.c:		free_string(ch->pcdata->fingerinfo);
act_info.c:		ch->pcdata->fingerinfo = str_dup(buf);
act_info.c:		ch->pcdata->fingerinfo ?
act_info.c:		ch->pcdata->fingerinfo :
act_info.c:        if ( !ch->pcdata->group_known[gt] ) /* ignore groups the player doesn't have */
act_info.c:            if ( ch->pcdata->learned[sn] <= 0 )
act_info.c:            sprintf( buf, "%3d%% %-20.20s ", ch->pcdata->learned[sn],
act_info.c:        if ( ch->pcdata->learned[sn] <= 0 )
act_info.c:                      ( ch->pcdata->learned[slist[ip-1]] <
act_info.c:                        ch->pcdata->learned[sn] ||
act_info.c:                          ( ch->pcdata->learned[slist[ip-1]] ==
act_info.c:                            ch->pcdata->learned[sn] &&
act_info.c:		ch->pcdata->learned[slist[js]] >= adept ? "{g" : "{C",
act_info.c:		ch->pcdata->learned[slist[js]],
act_info.c:    ||    ch->pcdata->learned[sn] < 1 /* skill is not known */
act_info.c:    if ( ch->pcdata->learned[sn] >= adept )
act_info.c:    ch->pcdata->learned[sn] += increase;
act_info.c:    if ( ch->pcdata->learned[sn] < adept )
act_info.c:        ch->pcdata->learned[sn] = adept;
act_info.c:              || ch->pcdata->learned[sn] < 1 /* skill is not known */)
act_info.c:                skill_table[sn].name, ch->pcdata->learned[sn] );
act_info.c:        ||    ch->pcdata->learned[sn] < 1 /* skill is not known */
act_info.c:        if ( ch->pcdata->learned[sn] >= adept )
act_info.c:            ch->pcdata->learned[sn] +=
act_info.c:            if ( ch->pcdata->learned[sn] < adept )
act_info.c:                ch->pcdata->learned[sn] = adept;
act_info.c:/*    if ( strcmp( crypt( arg1, ch->pcdata->pwd ), ch->pcdata->pwd ) ) */
act_info.c:    if ( strcmp( arg1, ch->pcdata->pwd ))
act_info.c:    free_string( ch->pcdata->pwd );
act_info.c:    ch->pcdata->pwd = str_dup( pwdnew );
act_info.c:            if (!IS_SET(ch->pcdata->cgroup, (GROUP_LEADER|GROUP_DEPUTY)))
act_info.c:    if (!IS_SET(ch->pcdata->cgroup, (GROUP_LEADER|GROUP_DEPUTY)))
act_info.c:	if (!ch->clan || !IS_SET(ch->pcdata->cgroup, (GROUP_LEADER|GROUP_DEPUTY)))
act_info.c:    if (!IS_SET(ch->pcdata->cgroup, (GROUP_LEADER|GROUP_DEPUTY)) && !IS_IMMORTAL(ch))
act_info.c:        free_string( victim->pcdata->rank);
act_info.c:        victim->pcdata->rank = str_dup( "" );
act_info.c:    free_string( victim->pcdata->rank );
act_info.c:    victim->pcdata->rank = set_colorname(argument,3);
act_info.c:            victim->pcdata->rank );
act_info.c:		ptc(ch, "Your current email address is: %s\n\r", ch->pcdata->email);
act_info.c:	free_string(ch->pcdata->email);
act_info.c:	ch->pcdata->email = str_dup(buf);
act_info.c:	sprintf(buf, "\"%s\" <%s>\n\r", ch->name, ch->pcdata->email);
act_info.c:	sprintf(buf, "$N has changed their email to '%s'\n\r", ch->pcdata->email);
act_info.c:        msgptr = victim->pcdata->gamein;
act_info.c:        msgptr = victim->pcdata->gameout;
act_info.c:	if (ch->pcdata->partner != NULL && !str_cmp(ch->pcdata->partner, victim->name))
act_info.c:		ch->pcdata->partner = NULL;
act_info.c:		if (victim->pcdata->partner != NULL && !str_cmp(victim->pcdata->partner, ch->name))
act_info.c:			victim->pcdata->partner = NULL;
act_info.c:	ch->pcdata->partner = victim->name;
act_info.c:	if (!IS_NPC(ch) && ch->pcdata->pktimer)
act_info.c:		ptb(buffer, "{PYour PK timer is at %d seconds and counting!{x\n\r\n\r", ch->pcdata->pktimer * 3);
act_info.c:    	if ((ch->pcdata->raffect != NULL) && (ch->pcdata->remort_count > 0) && IS_SET(ch->pcdata->plr,PLR_SHOWRAFF))
act_info.c:	    for (raff = 0; raff < ch->pcdata->remort_count / 10 + 1; raff++)
act_info.c:	            if (raffects[i].id == ch->pcdata->raffect[raff])
act_info.c:	 && ch->pcdata->remort_count
act_info.c:	 && ch->pcdata->raffect
act_info.c:	 && IS_SET(ch->pcdata->plr, PLR_SHOWRAFF))
act_info.c:		for (raff = 0; raff < ch->pcdata->remort_count / 10 + 1; raff++)
act_info.c:				if (raffects[i].id == ch->pcdata->raffect[raff])
act_info.c:	ptc(ch, "You are %s%s\n\r", ch->name, IS_NPC(ch) ? "" : ch->pcdata->title);
act_info.c:			ch->pcdata->pckills, ch->pcdata->pckilled, ch->pcdata->pkrank);
act_info.c:			ch->pcdata->arenakills, ch->pcdata->arenakilled);
act_info.c:		if (ch->pcdata->flag_killer>0 && IS_SET(ch->act, PLR_KILLER))
act_info.c:				ch->pcdata->flag_killer);
act_info.c:		if (ch->pcdata->flag_thief>0 && IS_SET(ch->act, PLR_THIEF))
act_info.c:				ch->pcdata->flag_thief);
act_info.c:		ptc(ch, "SP :  %4d", ch->pcdata->skillpoints);
act_info.c:		ptc(ch, "RPP : %4d", ch->pcdata->rolepoints);
act_info.c:	if (!IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]   > 10)
act_info.c:	if (!IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] ==  0)
act_info.c:	if (!IS_NPC(ch) && ch->pcdata->condition[COND_HUNGER] ==  0)
act_info.c:			((ch->level + 1) * exp_per_level(ch,ch->pcdata->points) - ch->exp));
act_info.c:	if (!IS_NPC(ch) && ch->pcdata->pktimer)
act_info.c:		ptc(ch, "{PYour PK timer is at %d seconds and counting!{x\n\r\n\r", ch->pcdata->pktimer * 3);
act_info.c:	sprintf(buf, "%s%s{x%s", get_custom_color_code(ch, CSLOT_SCORE_NAME), ch->name, ch->pcdata->title);
act_info.c:		ch->pcdata->remort_count,
act_info.c:	ptc(ch, "%5d %s|{x", ch->pcdata->skillpoints, border);
act_info.c:		ch->pcdata->rolepoints, border, torch);
act_info.c:		UMIN((ch->level + 1) * exp_per_level(ch, ch->pcdata->points) - ch->exp, 999999), torch);
act_info.c:		ch->pcdata->pckills, ch->pcdata->pckilled,
act_info.c:		get_custom_color_code(ch, CSLOT_SCORE_PKRANK), ch->pcdata->pkrank,
act_info.c:		ch->pcdata->arenakills, ch->pcdata->arenakilled);
act_info.c:	if (IS_NPC(ch) || !IS_SET(ch->pcdata->plr, PLR_NEWSCORE))
act_info.c:	if (IS_NPC(ch) || !IS_SET(ch->pcdata->plr, PLR_NEWSCORE))
act_move.c:		if (ch->pcdata->pktimer)
act_move.c:	if (ch->pcdata->trains_to_hit < 50)		add = 10;
act_move.c:	else if (ch->pcdata->trains_to_hit < 100)	add = 9;
act_move.c:	else if (ch->pcdata->trains_to_hit < 150)	add = 8;
act_move.c:	else if (ch->pcdata->trains_to_hit < 200)	add = 7;
act_move.c:	else if (ch->pcdata->trains_to_hit < 250)	add = 6;
act_move.c:	else if (ch->pcdata->trains_to_hit < 300)	add = 5;
act_move.c:	else if (ch->pcdata->trains_to_hit < 350)	add = 4;
act_move.c:	else if (ch->pcdata->trains_to_hit < 400)	add = 3;
act_move.c:	else if (ch->pcdata->trains_to_hit < 450)	add = 2;
act_move.c:        ch->pcdata->trains_to_hit += 1;
act_move.c:        ch->pcdata->perm_hit += add;
act_move.c:	if (ch->pcdata->trains_to_mana < 50)		add = 10;
act_move.c:	else if (ch->pcdata->trains_to_mana < 100)	add = 9;
act_move.c:	else if (ch->pcdata->trains_to_mana < 150)	add = 8;
act_move.c:	else if (ch->pcdata->trains_to_mana < 200)	add = 7;
act_move.c:	else if (ch->pcdata->trains_to_mana < 250)	add = 6;
act_move.c:	else if (ch->pcdata->trains_to_mana < 300)	add = 5;
act_move.c:	else if (ch->pcdata->trains_to_mana < 350)	add = 4;
act_move.c:	else if (ch->pcdata->trains_to_mana < 400)	add = 3;
act_move.c:	else if (ch->pcdata->trains_to_mana < 450)	add = 2;
act_move.c:        ch->pcdata->trains_to_mana += 1;
act_move.c:        ch->pcdata->perm_mana += add;
act_move.c:	if (ch->pcdata->trains_to_stam < 50)		add = 10;
act_move.c:	else if (ch->pcdata->trains_to_stam < 100)	add = 9;
act_move.c:	else if (ch->pcdata->trains_to_stam < 150)	add = 8;
act_move.c:	else if (ch->pcdata->trains_to_stam < 200)	add = 7;
act_move.c:	else if (ch->pcdata->trains_to_stam < 250)	add = 6;
act_move.c:	else if (ch->pcdata->trains_to_stam < 300)	add = 5;
act_move.c:	else if (ch->pcdata->trains_to_stam < 350)	add = 4;
act_move.c:	else if (ch->pcdata->trains_to_stam < 400)	add = 3;
act_move.c:	else if (ch->pcdata->trains_to_stam < 450)	add = 2;
act_move.c:        ch->pcdata->trains_to_stam += 1;
act_move.c:        ch->pcdata->perm_stam += add;
act_move.c:         && (IS_NPC(victim) || victim->pcdata->pktimer <= 0))
act_move.c:    if (IS_SET(ch->pcdata->plr,PLR_PAINT))
act_move.c:        REMOVE_BIT(ch->pcdata->plr,PLR_PAINT);
act_move.c:        SET_BIT(ch->pcdata->plr,PLR_PAINT);
act_move.c:    if (!IS_SET(ch->pcdata->plr,PLR_PAINT) ||
act_move.c:        !IS_SET(victim->pcdata->plr,PLR_PAINT))
act_move.c:    ch->pcdata->mark_room = ch->in_room->vnum;
act_move.c:    if ( ch->pcdata->mark_room == 0 )
act_move.c:    target_room = get_room_index( ch->pcdata->mark_room );
act_move.c:	if (ch->pcdata->pktimer)
act_move.c:   if (! IS_SET(ch->pcdata->plr, PLR_MARRIED) )
act_move.c:   victim = get_char_world(ch, ch->pcdata->spouse, VIS_CHAR);
act_obj.c:			if (IS_SET(ch->pcdata->plr, PLR_SQUESTOR))
act_obj.c:				if (ch->pcdata->squestobj == obj && !ch->pcdata->squestobjf)
act_obj.c:					if (ch->pcdata->squestmob == NULL)
act_obj.c:							ch->pcdata->squestmob->short_descr);
act_obj.c:					ch->pcdata->squestobjf = TRUE;
act_obj.c:					obj = get_obj_list(ch, arg1, ch->pcdata->locker);
act_obj.c:					for (obj = ch->pcdata->locker; obj != NULL; obj = obj_next)
act_obj.c:				obj = get_obj_list(ch, arg1, ch->pcdata->strongbox);
act_obj.c:			for (obj = ch->pcdata->strongbox; obj != NULL; obj = obj_next)
act_obj.c:			if (get_obj_number(obj) + get_strongbox_number(ch) > 45 + ch->pcdata->remort_count)
act_obj.c:			 && get_obj_number(obj) + get_strongbox_number(ch) <= 45 + ch->pcdata->remort_count)
act_obj.c:			if (!IS_IMMORTAL(ch) && IS_SET(victim->pcdata->plr, PLR_LINK_DEAD))
act_obj.c:	if (!IS_NPC(victim) && !IS_IMMORTAL(ch) && IS_SET(victim->pcdata->plr, PLR_LINK_DEAD))
act_obj.c:		 && IS_SQUESTOR(ch) && ch->pcdata->squestobj != NULL && ch->pcdata->squestmob != NULL
act_obj.c:		 && obj == ch->pcdata->squestobj && victim == ch->pcdata->squestmob))
act_obj.c:	if (!IS_NPC(ch) && IS_SET(ch->pcdata->plr, PLR_SQUESTOR)
act_obj.c:	 && ch->pcdata->squestmob != NULL && ch->pcdata->squestobj != NULL)
act_obj.c:		if (obj == ch->pcdata->squestobj && victim == ch->pcdata->squestmob)
act_obj.c:			if (!ch->pcdata->squestobjf)
act_obj.c:				ch->pcdata->squestobjf = TRUE;
act_obj.c:	if (!IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK] > 10)
act_obj.c:	 && ch->pcdata->condition[COND_FULL] > 45)
act_obj.c:	if (!IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK] > 10)
act_obj.c:	if (!IS_NPC(ch) && ch->pcdata->condition[COND_FULL]  > 40)
act_obj.c:	if (!IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 40)
act_obj.c:		if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 40 )
act_obj.c:			condition = ch->pcdata->condition[COND_HUNGER];
act_obj.c:			if (condition == 0 && ch->pcdata->condition[COND_HUNGER] > 0)
act_obj.c:			else if (ch->pcdata->condition[COND_FULL] > 40)
act_obj.c:			sprintf(buf,"%s gives you one silver coin for your sacrifices.\n\r",ch->pcdata->deity);
act_obj.c:			sprintf(buf,"%s gives you %d silver coins for your sacrifices.\n\r",ch->pcdata->deity, silver);
act_obj.c:				sprintf(buf,"%s gives you one silver coin for your sacrifice.\n\r",ch->pcdata->deity);
act_obj.c:				sprintf(buf,"%s gives you %d silver coins for your sacrifice.\n\r",ch->pcdata->deity, silver);
act_obj.c:		if (ch->pcdata->condition[COND_FULL] > 45)
act_obj.c:		 && ( number_percent( ) > ch->pcdata->learned[gsn_brew] ||
act_obj.c:		 && ( number_percent( ) > ch->pcdata->learned[gsn_scribe] ||
act_obj.c:		if(!IS_SET(victim->pcdata->plr, PLR_PK))
act_obj.c:		if(!IS_SET(ch->pcdata->plr, PLR_PK))
act_obj.c:					SET_BIT(ch->pcdata->plr, PLR_NOPK);
act_obj.c:					ch->pcdata->flag_thief=MAX_THIEF;
act_obj.c:	if (!IS_NPC(ch) && IS_SET(ch->pcdata->plr, PLR_SQUESTOR))
act_obj.c:		if (ch->pcdata->squestobj == obj && !ch->pcdata->squestobjf)
act_obj.c:			if (ch->pcdata->squestmob == NULL)
act_obj.c:					ch->pcdata->squestmob->short_descr);
act_obj.c:			ch->pcdata->squestobjf = TRUE;
act_obj.c:		if ( ch->pcdata->familiar)
act_obj.c:			ch->pcdata && ch->pcdata->title ?
act_obj.c:				ch->pcdata->title : "{M(adventurer of Thera){x" );
alias.c:    if (IS_NPC(ch) || ch->pcdata->alias[0] == NULL || ch->pcdata->alias[0] == '\0'
alias.c:        if (ch->pcdata->alias[alias] == NULL)
alias.c:        if (!str_prefix1(ch->pcdata->alias[alias],argument))
alias.c:            if (!strcmp(ch->pcdata->alias[alias],name))
alias.c:                strcpy(buf, ch->pcdata->alias_sub[alias]);
alias.c:        if (rch->pcdata->alias[0] == NULL)
alias.c:            if (rch->pcdata->alias[pos] == NULL
alias.c:            ||  rch->pcdata->alias_sub[pos] == NULL)
alias.c:            sprintf(buf,"    %s:  %s\n\r",rch->pcdata->alias[pos],
alias.c:                    rch->pcdata->alias_sub[pos]);
alias.c:            if (rch->pcdata->alias[pos] == NULL
alias.c:            ||  rch->pcdata->alias_sub[pos] == NULL)
alias.c:            if (!str_cmp(arg,rch->pcdata->alias[pos]))
alias.c:                sprintf(buf,"%s aliases to '%s'.\n\r",rch->pcdata->alias[pos],
alias.c:                        rch->pcdata->alias_sub[pos]);
alias.c:        if (rch->pcdata->alias[pos] == NULL)
alias.c:        if (!str_cmp(arg,rch->pcdata->alias[pos])) /* redefine an alias */
alias.c:            free_string(rch->pcdata->alias_sub[pos]);
alias.c:            rch->pcdata->alias_sub[pos] = str_dup(argument);
alias.c:     rch->pcdata->alias[pos]            = str_dup(arg);
alias.c:     rch->pcdata->alias_sub[pos]        = str_dup(argument);
alias.c:        if (rch->pcdata->alias[pos] == NULL)
alias.c:            rch->pcdata->alias[pos-1]           = rch->pcdata->alias[pos];
alias.c:            rch->pcdata->alias_sub[pos-1]       = rch->pcdata->alias_sub[pos];
alias.c:            rch->pcdata->alias[pos]             = NULL;
alias.c:            rch->pcdata->alias_sub[pos]         = NULL;
alias.c:        if(!strcmp(arg,rch->pcdata->alias[pos]))
alias.c:            free_string(rch->pcdata->alias[pos]);
alias.c:            free_string(rch->pcdata->alias_sub[pos]);
alias.c:            rch->pcdata->alias[pos] = NULL;
alias.c:            rch->pcdata->alias_sub[pos] = NULL;
bank.c:      max_gold = ((ch->pcdata->remort_count * 1000) + 50000);
bank.c:      max_silver = ((ch->pcdata->remort_count * 100000) + 1000000);
bank.c:    max_gold = ((ch->pcdata->remort_count * 1000) + 50000);
bank.c:    max_silver = ((ch->pcdata->remort_count * 100000) + 1000000);
channels.c:        if ( ch->pcdata->block_remote ) stc("OFF\n\r", ch);
channels.c:		if (IS_SET(ch->pcdata->plr,PLR_NONOTIFY)) stc("You will not be notified of new notes.\n\r", ch);
channels.c:		if (ch->pcdata->aura && ch->pcdata->aura[0] != '\0')
channels.c:			ptc(ch, "{VAura: (%s{V){x\n\r", ch->pcdata->aura);
channels.c:	if (!IS_NPC(ch)) if (IS_SET(ch->pcdata->plr,PLR_SNOOP_PROOF)) stc("You are immune to Nosy people.\n\r", ch);
channels.c:          drunklevel = ch->pcdata->condition[COND_DRUNK];
channels.c:			if (!ch->pcdata->query[i]
channels.c:			 || !is_name(ch->pcdata->query[i], pc->ch->name))
channels.c:                        if ( !IS_NPC(victim) && (victim->pcdata->phone_socket) )
channels.c:	if (!IS_SET(ch->pcdata->plr,PLR_OOC))
channels.c:      if ( ch->pcdata->block_remote ) stc("OFF.\n\r", ch);
channels.c:       ch->pcdata->block_remote = FALSE;
channels.c:       ch->pcdata->block_remote = TRUE;
channels.c:	page_to_char(buf_string(ch->pcdata->buffer), ch);
channels.c:	clear_buf(ch->pcdata->buffer);
channels.c:		add_buf(victim->pcdata->buffer, buf);
channels.c:		stc(victim->pcdata->afk, ch);
channels.c:		add_buf(victim->pcdata->buffer, buf);
channels.c:        if ( (! IS_NPC(victim) ) && (victim->pcdata->phone_socket) )
channels.c:		add_buf(victim->pcdata->buffer,buf);
channels.c:		act(victim->pcdata->afk,ch,NULL,NULL,TO_CHAR);
channels.c:		add_buf(victim->pcdata->buffer,buf);
channels.c:        if (!IS_NPC(victim)) add_buf(victim->pcdata->buffer,buf);
channels.c:	if (ch->pcdata->whisper == NULL)
channels.c:	if ((victim = get_player_world(ch, ch->pcdata->whisper, VIS_PLR)) == NULL)
channels.c:		ptc(ch, "{G%s isn't here. :({x\n\r", ch->pcdata->whisper );
channels.c:	if (!ch->pcdata->query)
channels.c:	if (victim->pcdata->partner == NULL || str_cmp(victim->pcdata->partner, ch->name))
channels.c:	ch->pcdata->partner = victim->name;
channels.c:        if (rch->pcdata->query[0] == NULL)
channels.c:            if (rch->pcdata->query[pos] == NULL)
channels.c:            ptc(ch, "[%d] %s\n\r", pos, rch->pcdata->query[pos]);
channels.c:            if (rch->pcdata->query[pos] == NULL)
channels.c:           rch->pcdata->query[pos] = NULL;
channels.c:            if (rch->pcdata->query[pos] == NULL)
channels.c:            if (!str_prefix1(arg2, rch->pcdata->query[pos]))
channels.c:     free_string(rch->pcdata->query[pos]);
channels.c:     rch->pcdata->query[pos]            = str_dup(arg2);
channels.c:             rch->pcdata->query[pos]);
channels.c:           if (rch->pcdata->query[pos] == NULL)
channels.c:               rch->pcdata->query[pos-1]           = rch->pcdata->query[pos];
channels.c:               rch->pcdata->query[pos]             = NULL;
channels.c:           if(!strcmp(arg2,rch->pcdata->query[pos]))
channels.c:               free_string(rch->pcdata->query[pos]);
channels.c:               rch->pcdata->query[pos] = NULL;
channels.c:            if (victim->pcdata->block_remote)
channels.c:         if ( victim->pcdata->block_remote)
channels.c:         if ( victim->pcdata->block_remote)
channels.c:      if ( victim->pcdata->block_remote)
channels.c:         if ( victim->pcdata->block_remote) continue;
channels.c:          if ( vic->pcdata->block_remote ) return;
channels.c:        if ( to->pcdata->block_remote ) return;
comm.c:		d->character->pcdata->next = pc_list;
comm.c:          if ( ch->pcdata->phone_socket )
comm.c:              FD_SET(ch->pcdata->phone_socket, &in_phone);
comm.c:              select(ch->pcdata->phone_socket+1, &in_phone, NULL, NULL, &null_time);
comm.c:              if ( FD_ISSET(ch->pcdata->phone_socket, &in_phone) )
comm.c:                  read_status = read(ch->pcdata->phone_socket, buffer, BUFFER_SIZE);
comm.c:                      close(ch->pcdata->phone_socket);
comm.c:                      ch->pcdata->phone_socket = 0;
comm.c:                      ch->pcdata->block_remote = FALSE;
comm.c:				SET_BIT(ch->pcdata->plr, PLR_LINK_DEAD);
comm.c:					SET_BIT(ch->desc->original->pcdata->plr, PLR_LINK_DEAD);
comm.c:       && IS_SET(d->character->pcdata->video, VIDEO_VT100))
comm.c:/*	if (!IS_NPC(ch) && IS_SET(ch->pcdata->plr, PLR_ATBPROMPT))
comm.c:       && IS_SET(d->character->pcdata->video,PLR_VT100))
comm.c:           if ( ch->pcdata->phone_socket )
comm.c:						(ch->level + 1) * exp_per_level(ch,ch->pcdata->points) - ch->exp);
comm.c:						sprintf(buf2,"%d",ch->pcdata->nextsquest);
comm.c:						sprintf(buf2,"%d",ch->pcdata->sqcountdown);
comm.c:					if (ch->pcdata->squestobj != NULL && ch->pcdata->squestmob == NULL)
comm.c:						if (!ch->pcdata->squestobjf)
comm.c:							sprintf(buf2, "%s", ch->pcdata->squestobj->short_descr);
comm.c:					else if (ch->pcdata->squestmob != NULL && ch->pcdata->squestobj == NULL)
comm.c:						if (!ch->pcdata->squestmobf)
comm.c:							sprintf(buf2, "%s", ch->pcdata->squestmob->short_descr);
comm.c:					else if (ch->pcdata->squestobj != NULL && ch->pcdata->squestmob != NULL)
comm.c:						if (ch->pcdata->squestobjf)
comm.c:							if (!ch->pcdata->squestmobf)
comm.c:								sprintf(buf2, "%s", ch->pcdata->squestmob->short_descr);
comm.c:							sprintf(buf2, "%s", ch->pcdata->squestobj->short_descr);
comm.c:					sprintf(buf2,"%d",ch->pcdata->skillpoints);
comm.c:					sprintf(buf2,"%d",ch->pcdata->rolepoints);
comm.c:                free_string( d->character->pcdata->pwd );
comm.c:                d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
comm.c:                  if (ch->pcdata->buffer->string[0] != '\0')
comm.c:                REMOVE_BIT( ch->pcdata->plr, PLR_LINK_DEAD );
comm.c:                ch->pcdata->lastcolor[1],
comm.c:                ch->pcdata->lastcolor[0]);
comm.c:            if ( ch->pcdata && IS_SET(ch->pcdata->video, VIDEO_DARK_MOD) )
comm.c:            if ( ch->pcdata && IS_SET(ch->pcdata->video, VIDEO_DARK_MOD) )
comm.c:                if ( IS_SET(ch->pcdata->video, VIDEO_FLASH_OFF ) )
comm.c:                if ( IS_SET(ch->pcdata->video, VIDEO_FLASH_LINE ) )
comm.c:                if ( !IS_NPC(ch) && IS_SET(ch->pcdata->video, VIDEO_CODES_SHOW) )
config.c:		if (!IS_SET(ch->pcdata->plr, PLR_NEWSCORE))
config.c:			  || (slot == CSLOT_CHAN_SPOUSE && !IS_SET(ch->pcdata->plr, PLR_MARRIED))
config.c:			  || (slot == CSLOT_CHAN_SPOUSE && !IS_SET(ch->pcdata->plr, PLR_MARRIED))
config.c:		ch->pcdata->color[slot] = 0;
config.c:		ch->pcdata->bold [slot] = 0;
config.c:	ch->pcdata->color[slot] = color_table[i].color;
config.c:	ch->pcdata->bold [slot] = color_table[i].bold;
config.c:					ch->pcdata->color[i] = 0;
config.c:					ch->pcdata->bold[i] = 0;
config.c:			IS_SET(ch->pcdata->video, VIDEO_FLASH_OFF) ?
config.c:			IS_SET(ch->pcdata->video, VIDEO_FLASH_LINE) ?
config.c:			IS_SET(ch->pcdata->video, VIDEO_DARK_MOD) ? "{CON{x" : "{POFF{x");
config.c:			IS_SET(ch->pcdata->video, VIDEO_CODES_SHOW) ? "{CON{x" : "{POFF{x");
config.c:			IS_SET(ch->pcdata->video, VIDEO_VT100) ?  "{CON{x" : "{POFF{x");
config.c:				if (IS_SET(ch->pcdata->video, VIDEO_FLASH_LINE))
config.c:					REMOVE_BIT(ch->pcdata->video, VIDEO_FLASH_LINE);
config.c:					SET_BIT(ch->pcdata->video, VIDEO_FLASH_OFF);
config.c:					SET_BIT(ch->pcdata->video, VIDEO_FLASH_LINE);
config.c:				if (IS_SET(ch->pcdata->video, VIDEO_FLASH_LINE))
config.c:					REMOVE_BIT(ch->pcdata->video, VIDEO_FLASH_LINE);
config.c:				else if (IS_SET(ch->pcdata->video, VIDEO_FLASH_OFF))
config.c:					REMOVE_BIT(ch->pcdata->video, VIDEO_FLASH_OFF);
config.c:					SET_BIT(ch->pcdata->video, VIDEO_FLASH_OFF);
config.c:			 || (argument[0] == '\0' && !IS_SET(ch->pcdata->video, VIDEO_DARK_MOD)))
config.c:				SET_BIT(ch->pcdata->video, VIDEO_DARK_MOD);
config.c:			 || (argument[0] == '\0' && IS_SET(ch->pcdata->video, VIDEO_DARK_MOD)))
config.c:				REMOVE_BIT(ch->pcdata->video, VIDEO_DARK_MOD);
config.c:			 || (argument[0] == '\0' && !IS_SET(ch->pcdata->video, VIDEO_CODES_SHOW)))
config.c:				SET_BIT(ch->pcdata->video, VIDEO_CODES_SHOW);
config.c:			 || (argument[0] == '\0' && IS_SET(ch->pcdata->video, VIDEO_CODES_SHOW)))
config.c:				REMOVE_BIT(ch->pcdata->video, VIDEO_CODES_SHOW);
config.c:				if (IS_SET(ch->pcdata->video, VIDEO_VT100))
config.c:					REMOVE_BIT(ch->pcdata->video, VIDEO_VT100);
config.c:					SET_BIT(ch->pcdata->video, VIDEO_VT100);
debug.c:			victim->pcdata->next = pc_list;
debug.c:					db_esc(victim->pcdata->title),
debug.c:					db_esc(victim->pcdata->deity),
debug.c:					db_esc(smash_bracket(victim->pcdata->deity)),
debug.c:					victim->pcdata->cgroup,
debug.c:					victim->pcdata->remort_count,
debug.c:					victim->clan && victim->pcdata->rank ? victim->pcdata->rank : "");
debug.c:					questor->pcdata->nextsquest = 0;
debug.c:		questor->pcdata->nextsquest = 0;
duel.c:	c->challenger->pcdata->duel	= c;
duel.c:	c->defender->pcdata->duel	= c;
duel.c:		if (!IS_NPC(ch) && ch->pcdata->duel == c)
duel.c:			ch->pcdata->duel = NULL;
duel.c:	if (IS_NPC(ch) || ch->in_room == NULL || ch->pcdata == NULL || ch->pcdata->duel == NULL)
duel.c:	duel = ch->pcdata->duel;
duel.c:	if (opp->pcdata->duel == NULL)
duel.c:		bug("get_duel: opp->pcdata->duel == NULL", 0);
duel.c:	if (opp->pcdata->duel != duel)
duel.c:		bug("get_duel: opp->pcdata->duel != duel", 0);
duel.c:		if (IS_SET(ch->pcdata->plr, PLR_DUEL_IGNORE))
duel.c:			REMOVE_BIT(ch->pcdata->plr, PLR_DUEL_IGNORE);
duel.c:			SET_BIT(ch->pcdata->plr, PLR_DUEL_IGNORE);
duel.c:		if (IS_SET(victim->pcdata->plr, PLR_LINK_DEAD)
duel.c:		if (IS_SET(victim->pcdata->plr, PLR_DUEL_IGNORE))
duel.c:				if (ch->pcdata->duel == duel)
duel.c:		if (ch->pcdata->duel == duel)
Binary file duel.o matches
fight.c:				if (ch->pcdata->pktimer)
fight.c:					if (--ch->pcdata->pktimer == 0)
fight.c:				if (!victim->pcdata->pktimer)
fight.c:					victim->pcdata->pktimer = PKTIME;
fight.c:				ch->pcdata->pktimer = PKTIME;
fight.c:		if (dam > 1 && victim->pcdata->condition[COND_DRUNK] > 10)
fight.c:		if (victim->exp > exp_per_level(victim,victim->pcdata->points) * victim->level
fight.c:				(2*(exp_per_level(victim,victim->pcdata->points)*victim->level - victim->exp)/3));
fight.c:     if ( (victim->pcdata->flag_killer) && ( IS_SET(victim->act, PLR_KILLER) ) )
fight.c:		victim->pcdata->pktimer = 0;
fight.c:			ch->pcdata->arenakills++;
fight.c:				victim->pcdata->arenakilled++;
fight.c:			ch->pcdata->pckills++;
fight.c:			victim->pcdata->pckilled++;
fight.c:			if (IS_SET(victim->pcdata->plr,PLR_PK))
fight.c:				REMOVE_BIT(victim->pcdata->plr,PLR_PK);
fight.c:			if (victim->pcdata->pkrank >= ch->pcdata->pkrank)
fight.c:				if (ch->pcdata->pkrank < 5)
fight.c:					ch->pcdata->pkrank++;
fight.c:				if (victim->pcdata->pkrank > 0)
fight.c:					victim->pcdata->pkrank--;
fight.c:			if (!IS_SET(victim->pcdata->plr, PLR_PK))
fight.c:			if (!IS_SET(ch->pcdata->plr, PLR_PK))
fight.c:			if (!IS_SET(victim->pcdata->plr, PLR_PK)
fight.c:			 || !IS_SET(ch->pcdata->plr, PLR_PK))
fight.c:	if (victim->pcdata->pktimer != 0)
fight.c:	ch->pcdata->flag_killer = MAX_KILLER;
fight.c:		remort_mod = ((gch->pcdata->remort_count * gch->level) / 100);  /* none until r3 */
fight.c:	singchance += ch->pcdata->remort_count / 2;
fight.c:         ch->pcdata->lays);
fight.c:  if ( ch->pcdata->lays <= 0)
fight.c:  ch->pcdata->lays--;
flags.c:				case FIELD_PCDATA:	flag = &victim->pcdata->plr;	break;
flags.c:				case FIELD_CGROUP:	flag = &victim->pcdata->cgroup;	break;
flags.c:			case FIELD_PCDATA:	flag = victim->pcdata->plr;	break;
flags.c:			case FIELD_CGROUP:	flag = victim->pcdata->cgroup;	break;
handler.c:            skill = ch->pcdata->learned[sn];
handler.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]  > 10 )
handler.c:            skill = ch->pcdata->learned[sn];
handler.c:		ch->sex			= ch->pcdata->true_sex;
handler.c:		ch->max_hit		= ch->pcdata->perm_hit;
handler.c:		ch->max_mana		= ch->pcdata->perm_mana;
handler.c:		ch->max_stam		= ch->pcdata->perm_stam;
handler.c:		ch->pcdata->pktimer	= 0;
handler.c:		if (!found_dup && IS_REMORT(ch) && ch->pcdata->raffect[0]
handler.c:			for (i = 0; i <= ch->pcdata->remort_count / 10 + 1; i++)
handler.c:				if ((raffects[ch->pcdata->raffect[i]].id >= 900
handler.c:				  && raffects[ch->pcdata->raffect[i]].id <= 949
handler.c:				  && raffects[ch->pcdata->raffect[i]].add == paf->bitvector
handler.c:				 || (raffects[ch->pcdata->raffect[i]].id >= 950
handler.c:				  && raffects[ch->pcdata->raffect[i]].id <= 999
handler.c:				  && raffects[ch->pcdata->raffect[i]].add == paf->bitvector
handler.c:	if (ch->pcdata->locker == obj )
handler.c:		ch->pcdata->locker = obj->next_content;
handler.c:		for (prev = ch->pcdata->locker; prev != NULL; prev = prev->next_content)
handler.c:			bug("obj_from_locker: obj not in ch->pcdata->locker list.", 0);
handler.c:	if (ch->pcdata->strongbox == obj)
handler.c:	        ch->pcdata->strongbox = obj->next_content;
handler.c:		for (prev = ch->pcdata->strongbox; prev != NULL; prev = prev->next_content)
handler.c:	obj->next_content	= ch->pcdata->locker;
handler.c:	ch->pcdata->locker	= obj;
handler.c:	obj->next_content	= ch->pcdata->strongbox;
handler.c:	ch->pcdata->strongbox	= obj;
handler.c:		for (obj = ch->pcdata->locker; obj != NULL; obj = obj_next)
handler.c:		for (obj = ch->pcdata->strongbox; obj != NULL; obj = obj_next)
handler.c:			pc_list = ch->pcdata->next;
handler.c:					prev->next = ch->pcdata->next;
handler.c:	for (obj = ch->pcdata->locker; obj; obj = obj->next_content)
handler.c:	for (obj = ch->pcdata->strongbox; obj; obj = obj->next_content)
handler.c:	for (obj = ch->pcdata->locker; obj; obj = obj->next_content)
handler.c:		if (!IS_SQUESTOR(ch) || ch->pcdata->squestobj == NULL || obj != ch->pcdata->squestobj)
handler.c:		level = ch->level + UMIN((ch->pcdata->remort_count/3) + 6, 16);
handler.c:		level = ch->level + UMIN((ch->pcdata->remort_count/3) + 9, 19);
handler.c:	return (IS_NPC(ch) ? 0 : ch->pcdata->played / 3600);
handler.c:	return (IS_NPC(ch) ? 0 : ch->pcdata->played);
handler.c:	if (!IS_NPC(ch) && ch->pcdata->color[slot] != 0)
handler.c:		color = ch->pcdata->color[slot];
handler.c:		bold  = ch->pcdata->bold [slot];
handler.c:	if (!IS_NPC(ch) && ch->pcdata->color[slot] != 0)
handler.c:		color = ch->pcdata->color[slot];
handler.c:		bold  = ch->pcdata->bold [slot];
Binary file handler.o matches
hunt.c:           ch->pcdata->learned[gsn_hunt] ) )
ignore.c:		if (rch->pcdata->ignore[pos] == NULL)
ignore.c:		if (!str_cmp(rch->pcdata->ignore[pos], victim->name))
ignore.c:		if (rch->pcdata->ignore[0] == NULL)
ignore.c:			if (rch->pcdata->ignore[pos] == NULL)
ignore.c:			ptc(ch, "[%d] %s\n\r", pos, rch->pcdata->ignore[pos]);
ignore.c:		if (rch->pcdata->ignore[pos] == NULL)
ignore.c:		if (!str_cmp(arg, rch->pcdata->ignore[pos]))
ignore.c:			free_string(rch->pcdata->ignore[pos]);
ignore.c:			rch->pcdata->ignore[pos] = NULL;
ignore.c:	rch->pcdata->ignore[pos] = str_dup(arg);
ignore.c:		if (ch->pcdata->ignore[pos] == NULL)
ignore.c:		if (!str_cmp(arg, ch->pcdata->ignore[pos]))
ignore.c:			free_string(ch->pcdata->ignore[pos]);
ignore.c:			ch->pcdata->ignore[pos] = NULL;
ignore.c:	ch->pcdata->ignore[pos] = str_dup(name);
interp.c:      if ( ch->pcdata->phone_socket )
interp.c:         write(ch->pcdata->phone_socket, argument, strlen(argument) );
interp.c:            close(ch->pcdata->phone_socket);
interp.c:            ch->pcdata->phone_socket = 0;
interp.c:            ch->pcdata->block_remote = FALSE;
interp.c:           && IS_SET(ch->pcdata->video, VIDEO_VT100) )
interp.c:		SET_BIT(ch->pcdata->cgroup, GROUP_DEPUTY);
interp.c:		REMOVE_BIT(ch->pcdata->cgroup, GROUP_DEPUTY);
interp.c:    if ( ch && ch->pcdata && IS_SET(ch->pcdata->video, VIDEO_VT100) )
interp.c:    if ( ch->pcdata && IS_SET(ch->pcdata->video, VIDEO_VT100) )
interp.c:		SET_BIT(ch->pcdata->cgroup, GROUP_DEPUTY);
interp.c:		REMOVE_BIT(ch->pcdata->cgroup, GROUP_DEPUTY);
interp.c:       if (! strcmp(ch->pcdata->granted_commands[index], argument) )
Binary file legacy matches
magic.c:			if (ch->level >= skill_table[sn].skill_level[ch->class] && ch->pcdata->learned[sn] > 0)
magic.c:	 || ch->pcdata->learned[sn] == 0)))
magic.c:	if ((vnum == MOB_VNUM_ZOMBIE   && ch->pcdata->zombie   != NULL)
magic.c:	 || (vnum == MOB_VNUM_SKELETON && ch->pcdata->skeleton != NULL)
magic.c:	 || (vnum == MOB_VNUM_WRAITH   && ch->pcdata->wraith   != NULL)
magic.c:	 || (vnum == MOB_VNUM_GARGOYLE && ch->pcdata->gargoyle != NULL))
magic.c:		case MOB_VNUM_ZOMBIE:		ch->pcdata->zombie = mob;	break;
magic.c:		case MOB_VNUM_SKELETON:		ch->pcdata->skeleton = mob;	break;
magic.c:		case MOB_VNUM_WRAITH:		ch->pcdata->wraith = mob;	break;
magic.c:		case MOB_VNUM_GARGOYLE:		ch->pcdata->gargoyle = mob;	break;
magic.c:		victim->pcdata->condition[COND_THIRST] = 0;
magic.c:	if ((number_percent() + 5) < ch->pcdata->learned[sn])
magic.c:	if (( number_percent() + 5) < ch->pcdata->learned[sn])
magic.c:	if ((number_percent() + 15) < ch->pcdata->learned[sn])
magic.c:	if ((number_percent() + 15) < ch->pcdata->learned[sn])
magic.c:	if ((number_percent() + 25) < ch->pcdata->learned[sn])
magic.c:			ptc(victim, "%s protects you.\n\r", victim->pcdata->deity);
magic.c:			sprintf(buf, "%s protects $n.", victim->pcdata->deity);
magic.c:	if (number_percent() > ch->pcdata->learned[sn])
magic.c:	{    if (IS_SET(victim->pcdata->plr, PLR_LINK_DEAD))
magic.c:		if (ch->pcdata->pktimer)
magic.c:   victim->pcdata->condition[COND_HUNGER] = 0;
magic.c:   victim->pcdata->condition[COND_THIRST] = 0;
magic.c:   victim->pcdata->condition[COND_FULL] = 0;
marry.c:	if (victim->pcdata->spouse == NULL
marry.c:	 || victim->pcdata->spouse[0] == '\0'
marry.c:	 || victim2->pcdata->spouse == NULL
marry.c:	 || victim2->pcdata->spouse[0] == '\0'
marry.c:	 || str_cmp(victim->pcdata->spouse, victim2->name)
marry.c:	 || str_cmp(victim2->pcdata->spouse, victim->name))
marry.c:	if (IS_SET(victim->pcdata->plr, PLR_MARRIED) || IS_SET(victim2->pcdata->plr, PLR_MARRIED))
marry.c:	SET_BIT(victim->pcdata->plr, PLR_MARRIED);
marry.c:	SET_BIT(victim2->pcdata->plr, PLR_MARRIED);
marry.c:	if (!IS_SET(victim->pcdata->plr, PLR_MARRIED) || !IS_SET(victim2->pcdata->plr, PLR_MARRIED))
marry.c:	if (str_cmp(victim->pcdata->spouse, victim2->name))
marry.c:	free_string(victim->pcdata->spouse);
marry.c:	free_string(victim2->pcdata->spouse);
marry.c:	victim->pcdata->spouse = str_dup("");
marry.c:	victim2->pcdata->spouse = str_dup("");
marry.c:	REMOVE_BIT(victim->pcdata->plr, PLR_MARRIED);
marry.c:	REMOVE_BIT(victim2->pcdata->plr, PLR_MARRIED);
marry.c:	if (!IS_SET(ch->pcdata->plr, PLR_MARRIED))
marry.c:	if (ch->pcdata->spouse == NULL || ch->pcdata->spouse == '\0')
marry.c:			is_name(ch->pcdata->spouse, victim->name))
marry.c:			sprintf(buf, "You say to %s, '%s'\n\r", ch->pcdata->spouse, argument);
marry.c:	if (IS_SET(ch->pcdata->plr,PLR_MARRIED))
marry.c:	if (ch->pcdata->spouse != NULL && ch->pcdata->spouse != '\0')
marry.c:	if (IS_SET(victim->pcdata->plr,PLR_MARRIED))
marry.c:	if (victim->pcdata->spouse != NULL && victim->pcdata->spouse != '\0')
marry.c:	ch->pcdata->propose = str_dup(victim->name);
marry.c:	if (IS_SET(ch->pcdata->plr,PLR_MARRIED))
marry.c:	if (ch->pcdata->spouse != NULL && ch->pcdata->spouse != '\0')
marry.c:	if (victim->pcdata->propose == NULL || str_cmp(victim->pcdata->propose, ch->name))
marry.c:	free_string(victim->pcdata->propose);
marry.c:	victim->pcdata->propose = str_dup("");
marry.c:	victim->pcdata->propose = NULL;
marry.c:	free_string(ch->pcdata->propose);
marry.c:	ch->pcdata->propose = str_dup("");
marry.c:	ch->pcdata->propose = NULL;
marry.c:	free_string(victim->pcdata->spouse);
marry.c:	victim->pcdata->spouse = str_dup(ch->name);
marry.c:	free_string(ch->pcdata->spouse);
marry.c:	ch->pcdata->spouse = str_dup(victim->name);
marry.c:	if (IS_SET(ch->pcdata->plr,PLR_MARRIED))
marry.c:	if (ch->pcdata->spouse != NULL && ch->pcdata->spouse != '\0')
marry.c:	if (victim->pcdata->propose == NULL || str_cmp(victim->pcdata->propose, ch->name))
marry.c:	free_string(victim->pcdata->propose);
marry.c:	victim->pcdata->propose = str_dup("");
marry.c:	victim->pcdata->propose = NULL;
marry.c:	free_string(ch->pcdata->propose);
marry.c:	ch->pcdata->propose = str_dup("");
marry.c:	ch->pcdata->propose = NULL;
marry.c:	if (IS_SET(ch->pcdata->plr,PLR_MARRIED))
marry.c:	if (ch->pcdata->spouse == NULL || ch->pcdata->spouse == '\0')
marry.c:	if (str_cmp(ch->pcdata->spouse, victim->name)
marry.c:	 || victim->pcdata->spouse == NULL
marry.c:	 || victim->pcdata->spouse == '\0'
marry.c:	 || str_cmp(victim->pcdata->spouse, ch->name))
marry.c:	free_string(victim->pcdata->spouse);
marry.c:	victim->pcdata->spouse = str_dup("");
marry.c:	victim->pcdata->spouse = NULL;
marry.c:	free_string(ch->pcdata->spouse);
marry.c:	ch->pcdata->spouse = str_dup("");
marry.c:	ch->pcdata->spouse = NULL;
merc.h:/* Lotus - Extra PLR flags for only Players in pcdata->plr */
merc.h:#define IS_REMORT(ch)		(!IS_NPC(ch) && ch->pcdata->remort_count > 0)
merc.h:#define HAS_CGROUP(ch, bit)	(!IS_NPC(ch) && (((ch->pcdata->cgroup & bit) == bit)))
merc.h:#define	GET_RANK(ch)		(IS_NPC(ch) ? RANK_MOBILE : RANK(ch->pcdata->cgroup))
merc.h:#define SET_CGROUP(ch, bit)	(SET_BIT(ch->pcdata->cgroup, bit))
merc.h:#define REM_CGROUP(ch, bit)	(REMOVE_BIT(ch->pcdata->cgroup, bit))
merc.h:                        - (( !IS_NPC(ch) && ch->pcdata->remort_count > 0 )    \
merc.h:                        ? (((ch->pcdata->remort_count * ch->level) / 50)) : 0 )) /* should give -1 per 10 levels,
merc.h:#define IS_SQUESTOR(ch)    (!IS_NPC(ch) && IS_SET((ch)->pcdata->plr, PLR_SQUESTOR))
mob_prog.c:                   strcat( t, actor->pcdata->title );
mob_prog.c:                 strcat( t, vict->pcdata->title );
mob_prog.c:                 strcat( t, rndm->pcdata->title );
nanny.c:				db_esc(ch->pcdata->title),
nanny.c:				db_esc(ch->pcdata->deity),
nanny.c:				db_esc(smash_bracket(ch->pcdata->deity)),
nanny.c:				ch->pcdata->cgroup,
nanny.c:				ch->pcdata->remort_count,
nanny.c:				ch->clan && ch->pcdata->rank ? db_esc(ch->pcdata->rank) : "");
nanny.c:		if (strcmp( argument, ch->pcdata->pwd))
nanny.c:		REMOVE_BIT(ch->pcdata->plr, PLR_LINK_DEAD);
nanny.c:		REMOVE_BIT(ch->pcdata->plr, PLR_SQUESTOR);
nanny.c:			(ch->pcdata->last_lsite != NULL &&
nanny.c:			ch->pcdata->last_lsite[0] != '\0') ? ch->pcdata->last_lsite : "Not Available");
nanny.c:			ch->pcdata->mud_exp = MEXP_TOTAL_NEWBIE;
nanny.c:			ch->pcdata->mud_exp = MEXP_LEGACY_NEWBIE;
nanny.c:			ch->pcdata->mud_exp = MEXP_LEGACY_OLDBIE;
nanny.c:	free_string(ch->pcdata->pwd);
nanny.c:	ch->pcdata->pwd = str_dup(pwdnew);
nanny.c:	if (strcmp(argument, ch->pcdata->pwd))
nanny.c:		ch->pcdata->points	= pc_race_table[race].points;
nanny.c:				ch->sex = ch->pcdata->true_sex = SEX_MALE;
nanny.c:				ch->sex = ch->pcdata->true_sex = SEX_FEMALE;
nanny.c:		ch->pcdata->learned[gsn_recall] = 50;
nanny.c:		ch->pcdata->learned[gsn_scan]   = 100;
nanny.c:		free_string(ch->pcdata->deity);
nanny.c:		ch->pcdata->deity = str_dup(deity_table[deity].name);
nanny.c:				ch->gen_data->points_chosen = ch->pcdata->points;
nanny.c:					if (ch->pcdata->learned[*weapon_table[i].gsn] > 0)
nanny.c:		if (weapon == -1 || ch->pcdata->learned[*weapon_table[weapon].gsn] <= 0)
nanny.c:		ch->pcdata->learned[*weapon_table[weapon].gsn] = 40;
nanny.c:			if (ch->pcdata->points > 300)
nanny.c:				ch->pcdata->points = 300;
nanny.c:			ptc(ch, "Creation points: %d\n\r", ch->pcdata->points);
nanny.c:			if (ch->pcdata->points < 40)
nanny.c:				ch->train = (40 - ch->pcdata->points + 1) / 2;
nanny.c:				if (ch->pcdata->learned[*weapon_table[i].gsn] > 0)
nanny.c:		if (ch->pcdata == NULL || ch->pcdata->pwd[0] == '\0')
nanny.c:		ch->pcdata->next	= pc_list;
nanny.c:			ch->exp		= exp_per_level(ch, ch->pcdata->points);
nanny.c:		if (ch->pcdata->email != NULL && ch->pcdata->email[0] == '\0')
nanny.c:				if (ch->pcdata && ch->pcdata->gamein && ch->pcdata->gamein[0])
nanny.c:					ptc(victim, "[%s] %s\n\r", ch->name, ch->pcdata->gamein);
nanny.c:		if (get_play_seconds(ch) - ch->pcdata->backup >= 3600)
nanny.c:			int last = (get_play_seconds(ch) - ch->pcdata->backup) / 3600;
nanny.c:			if (ch->pcdata->backup == 0)
nanny.c:			ch->pcdata->last_lsite[0] != '\0' ? ch->pcdata->last_lsite : "Not Available",
nanny.c:			ch->pcdata->last_ltime != (time_t) 0 ? dizzy_ctime(&ch->pcdata->last_ltime) : "00:00:00");
nanny.c:		ch->pcdata->last_ltime = current_time;
nanny.c:		ch->pcdata->last_lsite = str_dup(d->host);
nanny.c:		if (ch->pcdata && IS_SET(ch->pcdata->video, PLR_VT100))
note.c:		int i = parse_deity(ch->pcdata->deity);
note.c:            last_read = ch->pcdata->last_note;
note.c:            last_read = ch->pcdata->last_idea;
note.c:            last_read = ch->pcdata->last_roleplay;
note.c:            last_read = ch->pcdata->last_immquest;
note.c:            last_read = ch->pcdata->last_changes;
note.c:            last_read = ch->pcdata->last_personal;
note.c:		last_read = ch->pcdata->last_trade;
note.c:            ch->pcdata->last_note = UMAX(ch->pcdata->last_note,stamp);
note.c:            ch->pcdata->last_idea = UMAX(ch->pcdata->last_idea,stamp);
note.c:            ch->pcdata->last_roleplay = UMAX(ch->pcdata->last_roleplay,stamp);
note.c:            ch->pcdata->last_immquest = UMAX(ch->pcdata->last_immquest,stamp);
note.c:            ch->pcdata->last_changes = UMAX(ch->pcdata->last_changes,stamp);
note.c:            ch->pcdata->last_personal = UMAX(ch->pcdata->last_personal,stamp);
note.c:		ch->pcdata->last_trade = UMAX(ch->pcdata->last_trade, stamp);
note.c:                 && !IS_SET(ch->pcdata->plr,PLR_NONOTIFY) )
note.c:        ch->pcdata->last_note = current_time;
note.c:        ch->pcdata->last_idea = current_time;
note.c:        ch->pcdata->last_roleplay = current_time;
note.c:        ch->pcdata->last_changes = current_time;
note.c:        ch->pcdata->last_immquest = current_time;
note.c:        ch->pcdata->last_personal = current_time;
note.c:        ch->pcdata->last_trade = current_time;
note.c:                ch->pcdata->last_note = current_time;
note.c:                ch->pcdata->last_idea = current_time;
note.c:                ch->pcdata->last_roleplay = current_time;
note.c:                ch->pcdata->last_immquest = current_time;
note.c:                ch->pcdata->last_changes = current_time;
note.c:                ch->pcdata->last_personal = current_time;
note.c:			ch->pcdata->last_trade = current_time;
note.c:            if (!IS_NPC(ch)) SET_BIT(ch->pcdata->plr,PLR_STOPCRASH);
note.c:        if (!IS_NPC(ch) && IS_SET(ch->pcdata->plr,PLR_STOPCRASH))
note.c:        if (!IS_NPC(ch)) REMOVE_BIT(ch->pcdata->plr,PLR_STOPCRASH);
note.c:        if (!IS_NPC(ch)) REMOVE_BIT(ch->pcdata->plr,PLR_STOPCRASH);
phone.c:   if (ch->pcdata->phone_socket)
phone.c:      write(ch->pcdata->phone_socket, "quit", strlen("quit") );
phone.c:      close(ch->pcdata->phone_socket);
phone.c:      ch->pcdata->phone_socket = 0;
phone.c:   ch->pcdata->phone_socket = socket(AF_INET, SOCK_STREAM, 0);
phone.c:   if ( ch->pcdata->phone_socket < 0 )
phone.c:   if ( connect(ch->pcdata->phone_socket, (struct sockaddr *) &server_address,
phone.c:       close(ch->pcdata->phone_socket);
phone.c:       ch->pcdata->phone_socket = 0;
phone.c:   sprintf(buffer, "%s\n%s\n", ch->name, ch->pcdata->pwd);
phone.c:   write(ch->pcdata->phone_socket, buffer, strlen(buffer) );
phone.c:   ch->pcdata->block_remote = TRUE;
quest.c:	REMOVE_BIT(ch->pcdata->plr, PLR_SQUESTOR);
quest.c:	ch->pcdata->squest_giver = 0;
quest.c:	ch->pcdata->sqcountdown = 0;
quest.c:		if (obj == ch->pcdata->squestobj)
quest.c:		if (mob == ch->pcdata->squestmob)
quest.c:	ch->pcdata->squestobj = NULL;
quest.c:	ch->pcdata->squestmob = NULL;
quest.c:	ch->pcdata->squestobjf = FALSE;
quest.c:	ch->pcdata->squestmobf = FALSE;
quest.c:	if (!IS_SET(ch->pcdata->plr, PLR_SQUESTOR))
quest.c:	if ( ch->pcdata->squest_giver < 1 )
quest.c:		bug( "QUEST INFO: quest giver = %d", ch->pcdata->squest_giver );
quest.c:		REMOVE_BIT(ch->pcdata->plr, PLR_SQUESTOR);
quest.c:	questman = get_mob_index(ch->pcdata->squest_giver);
quest.c:		REMOVE_BIT(ch->pcdata->plr, PLR_SQUESTOR);
quest.c:	if (ch->pcdata->squestobj == NULL && ch->pcdata->squestmob == NULL) /* no quest */
quest.c:	if (ch->pcdata->squestobj != NULL && ch->pcdata->squestmob == NULL) /* obj, no mob */
quest.c:		if (ch->pcdata->squestobjf)
quest.c:		if ((questroom_obj = get_room_index(ch->pcdata->squestloc1)) == NULL)
quest.c:			ch->pcdata->squestobj->short_descr);
quest.c:	if (ch->pcdata->squestobj == NULL && ch->pcdata->squestmob != NULL) /* mob, no obj */
quest.c:		if (ch->pcdata->squestmobf)
quest.c:		if ((questroom_mob = get_room_index(ch->pcdata->squestloc2)) == NULL)
quest.c:			ch->pcdata->squestmob->short_descr);
quest.c:			ch->pcdata->squestmob->sex == 1 ? "He" : "She", questroom_mob->name);
quest.c:	if (ch->pcdata->squestobj != NULL && ch->pcdata->squestmob != NULL) /* mob and obj */
quest.c:		if ((questroom_obj = get_room_index(ch->pcdata->squestloc1)) == NULL)
quest.c:		if ((questroom_mob = get_room_index(ch->pcdata->squestloc2)) == NULL)
quest.c:		if (ch->pcdata->squestobjf && ch->pcdata->squestmobf)
quest.c:		if (!ch->pcdata->squestmobf && ch->pcdata->squestobjf)
quest.c:				ch->pcdata->squestobj->short_descr, ch->pcdata->squestmob->short_descr);
quest.c:				ch->pcdata->squestmob->sex == 1 ? "He" : "She", questroom_mob->name);
quest.c:		ptc(ch, "You are on a quest to recover the legendary %s,\n\r", ch->pcdata->squestobj->short_descr);
quest.c:		ptc(ch, "and return it to it's rightful owner, %s.\n\r", ch->pcdata->squestmob->short_descr);
quest.c:			ch->pcdata->squestmob->sex == 1 ? "He" : "She", questroom_mob->name);
quest.c:				if (ch->pcdata->learned[sn] <= 0
quest.c:				 || ch->pcdata->learned[sn] >= 100)
quest.c:	ch->pcdata->squestmobf = TRUE;
quest.c:	if (ch->pcdata->squestmobf)
quest.c:		ch->pcdata->squestmobf = FALSE;
quest.c:	ch->pcdata->squestmobf = TRUE;
quest.c:	questobj->timer = (4 * ch->pcdata->sqcountdown + 10) / 3;
quest.c:	ch->pcdata->squestobj = questobj;
quest.c:	ch->pcdata->squestmob = questmob;
quest.c:	ch->pcdata->sqcountdown = number_range(15, 30);
quest.c:	ch->pcdata->squest_giver = questman->pIndexData->vnum;
quest.c:		ch->pcdata->squestloc1 = questroom->vnum;
quest.c:		ch->pcdata->squestobj = questobj;
quest.c:		ch->pcdata->squestloc2 = ch->pcdata->squestmob->in_room->vnum;
quest.c:		ch->pcdata->squestloc1 = ch->pcdata->squestobj->in_room->vnum;
quest.c:		ch->pcdata->squestloc2 = ch->pcdata->squestmob->in_room->vnum;
quest.c:			if (ch->pcdata->squest_giver != questman->pIndexData->vnum)
quest.c:			if (!IS_SET(ch->pcdata->plr, PLR_SQUESTOR))
quest.c:			if (ch->pcdata->nextsquest > 0 || ch->pcdata->sqcountdown <= 0)
quest.c:			if (ch->pcdata->squestobj && !ch->pcdata->squestmob)
quest.c:					else if (obj == ch->pcdata->squestobj)
quest.c:				if (ch->pcdata->squestobjf && obj == NULL)
quest.c:					ch->pcdata->squestobjf = FALSE;
quest.c:				if (!ch->pcdata->squestobjf)
quest.c:			else if (ch->pcdata->squestmob && !ch->pcdata->squestobj)
quest.c:				if (!ch->pcdata->squestmobf)
quest.c:						ch->pcdata->squestmob->short_descr);
quest.c:			else if (ch->pcdata->squestmob && ch->pcdata->squestobj)
quest.c:				if (ch->pcdata->squestobjf && !ch->pcdata->squestmobf)
quest.c:						ch->pcdata->squestobj->short_descr, ch->pcdata->squestmob->short_descr);
quest.c:				if (ch->pcdata->squestmobf && !ch->pcdata->squestobjf) /* shouldn't happen */
quest.c:				if (!ch->pcdata->squestmobf && !ch->pcdata->squestobjf)
quest.c:			ch->pcdata->nextsquest = pointreward * 2;
quest.c:			ch->pcdata->skillpoints += pointreward;
quest.c:		if (!IS_SET(ch->act, PLR_QUESTOR) && !IS_SET(ch->pcdata->plr, PLR_SQUESTOR))
quest.c:		if (IS_SET(ch->pcdata->plr, PLR_SQUESTOR) && find_squestmaster(ch) != NULL)
quest.c:			ch->pcdata->nextsquest = 20;
quest.c:				if (wch->pcdata->squestmob == NULL	/* item quest */
quest.c:				 && wch->pcdata->squestobj != NULL)
quest.c:					if (wch->pcdata->squestobjf)	/* item has been found */
quest.c:						sprintf(oblock, "{T<{G%5d{T>{x", wch->pcdata->squestloc1);
quest.c:				else if (wch->pcdata->squestobj == NULL	/* mob quest */
quest.c:				      && wch->pcdata->squestmob != NULL)
quest.c:					if (wch->pcdata->squestmobf)	/* mob has been found */
quest.c:						sprintf(mblock, "{T<{G%5d{T>{x", wch->pcdata->squestloc2);
quest.c:				else if (wch->pcdata->squestobj != NULL	/* item to mob quest */
quest.c:				      && wch->pcdata->squestmob != NULL)
quest.c:					if (wch->pcdata->squestobjf)	/* item has been found */
quest.c:						sprintf(oblock, "{T<{G%5d{T>{x", wch->pcdata->squestloc1);
quest.c:					if (wch->pcdata->squestmobf)	/* mob has been found */
quest.c:						sprintf(mblock, "{T<{G%5d{T>{x", wch->pcdata->squestloc2);
quest.c:					mblock, oblock, wch->pcdata->sqcountdown, wch->pcdata->skillpoints);
quest.c:					0, 0, wch->pcdata->nextsquest, wch->pcdata->skillpoints);
quest.c:			ch->questpoints, ch->pcdata->skillpoints);
quest.c:			if (IS_SET(ch->pcdata->plr, PLR_SQUESTOR))
quest.c:			if (ch->pcdata->nextsquest > 0)
quest.c:			SET_BIT(ch->pcdata->plr, PLR_SQUESTOR);
quest.c:			sprintf( buf, "You have %d minutes to complete this quest.", ch->pcdata->sqcountdown );
quest.c:		if (!IS_SET(ch->pcdata->plr, PLR_SQUESTOR))
quest.c:			if (ch->pcdata->nextsquest > 1)
quest.c:					ch->pcdata->nextsquest);
quest.c:			else if (ch->pcdata->nextsquest == 1)
quest.c:		else if (ch->pcdata->sqcountdown > 0)
quest.c:				ch->pcdata->sqcountdown);
recycle.c:		for (obj = ch->pcdata->locker; obj != NULL; obj = obj_next)
recycle.c:		for (obj = ch->pcdata->strongbox; obj != NULL; obj = obj_next)
recycle.c:    if ( !IS_NPC(ch) && ch->pcdata && ch->pcdata->tailing )
recycle.c:        pcdata->alias[alias] = NULL;
recycle.c:        pcdata->alias_sub[alias] = NULL;
recycle.c:        pcdata->query[query] = NULL;
recycle.c:    pcdata->last_ltime = (time_t) 0;
recycle.c:    pcdata->last_saved = (time_t) 0;
recycle.c:    pcdata->buffer = new_buf();
recycle.c:    free_string(pcdata->pwd);
recycle.c:    free_string(pcdata->bamfin);
recycle.c:    free_string(pcdata->bamfout);
recycle.c:    free_string(pcdata->title);
recycle.c:    free_string(pcdata->rank);
recycle.c:    free_string(pcdata->deity);
recycle.c:    free_string(pcdata->status);
recycle.c:    /* free_string(pcdata->last_ltime); */
recycle.c:    /* free_string(pcdata->last_saved); */
recycle.c:    if (pcdata->last_lsite != NULL) free_string(pcdata->last_lsite); /* having probs with sandserver down on spawn */
recycle.c:    free_string(pcdata->afk);
recycle.c:    free_string(pcdata->immname);
recycle.c:    free_string(pcdata->spouse);
recycle.c:    free_string(pcdata->whisper);
recycle.c:    free_string(pcdata->fingerinfo);
recycle.c:    free_string(pcdata->email);
recycle.c:    free_buf(pcdata->buffer);
recycle.c:        free_string(pcdata->alias[alias]);
recycle.c:        free_string(pcdata->alias_sub[alias]);
recycle.c:        free_string(pcdata->query[query]);
recycle.c:    pcdata->next = pcdata_free;
remort.c:    last = ((ch->pcdata->remort_count / 10) + 1);
remort.c:	if (ch->pcdata->raffect[i] < 1)
remort.c:		ch->pcdata->raffect[x] = ((x == last) ? 0 : ch->pcdata->raffect[x+1]);
remort.c:    for (i = 0; i < ((ch->pcdata->remort_count / 10) + 1); i++)
remort.c:            if (ch->pcdata->raffect[i] == flag)
remort.c:    for (i = 0; i < ((ch->pcdata->remort_count / 10) + 1); i++)
remort.c:            if (raffects[raff_lookup(ch->pcdata->raffect[i])].group == flag)
remort.c:	 && (number_percent() <= (raffects[test].chance + (victim->pcdata->remort_count / 10))))
remort.c:	 && (number_percent() <= (raffects[test].chance - (victim->pcdata->remort_count / 10))))
remort.c:	 && (number_percent() <= (raffects[test].chance - (victim->pcdata->remort_count / 10)))
remort.c:	 && (number_percent() <= (raffects[test].chance + (victim->pcdata->remort_count / 10)))
remort.c:    victim->pcdata->raffect[place] = raffects[test].id;
remort.c:    for( c = 0; c < victim->pcdata->remort_count / 10+1; c++)
remort.c:    for (i = 0; i < ((ch->pcdata->remort_count / 20) + 1); i++)
remort.c:            if (ch->pcdata->extraclass[i] == sn)
remort.c:	if (ch->pcdata->remort_count < 1)
remort.c:		if (ch->pcdata->extraclass[0] +
remort.c:		    ch->pcdata->extraclass[1] +
remort.c:		    ch->pcdata->extraclass[2] +
remort.c:		    ch->pcdata->extraclass[3] +
remort.c:		    ch->pcdata->extraclass[4] > 0)
remort.c:				ch->pcdata->extraclass[1] ? "s are" : " is");
remort.c:			if (ch->pcdata->extraclass[0])
remort.c:					skill_table[ch->pcdata->extraclass[0]].name);
remort.c:			for (x = 1; x < ch->pcdata->remort_count / 20 + 1; x++)
remort.c:				if (ch->pcdata->extraclass[x])
remort.c:						skill_table[ch->pcdata->extraclass[x]].name);
remort.c:	for (x = 0; x < ch->pcdata->remort_count / 20 + 1; x++)
remort.c:		if (!ch->pcdata->extraclass[x])
remort.c:			ch->pcdata->extraclass[x] = sn;
remort.c:			if (!ch->pcdata->learned[sn])
remort.c:				ch->pcdata->learned[sn] = 1;
remort.c:	if (victim->pcdata->remort_count >= 99) /* To keep who in line -Endo */
remort.c:	if (arg2[0] == '\0' && victim->pcdata->remort_count < 1)
remort.c:		if ((victim->pcdata->remort_count + 1) < pc_race_table[race].remort_level)
remort.c:	victim->pcdata->perm_hit	= victim->max_hit;
remort.c:	victim->pcdata->perm_mana	= victim->max_mana;
remort.c:	victim->pcdata->perm_stam	= victim->max_stam;
remort.c:		free_string(victim->pcdata->deity);
remort.c:		free_string(victim->pcdata->status);
remort.c:		victim->pcdata->deity = str_dup(arg3);
remort.c:		victim->pcdata->status = str_dup(argument);
remort.c:	victim->pcdata->remort_count++;
remort.c:	victim->exp = exp_per_level(victim, victim->pcdata->points);
remort.c:	victim->pcdata->trains_to_hit = 0;
remort.c:	victim->pcdata->trains_to_mana = 0;
remort.c:	victim->pcdata->trains_to_stam = 0;
remort.c:		victim->pcdata->raffect[c] = 0;
remort.c:		victim->pcdata->extraclass[c] = 0;
remort.c:	if (victim->pcdata->remort_count == 1)
remort.c:		SET_BIT(victim->pcdata->plr, PLR_SHOWRAFF);
rmagic.c:		if (ch->pcdata->pktimer > 0)
save.c:			ch->pcdata->last_saved = current_time;
save.c:			if (ch->pcdata->locker)
save.c:				fwrite_obj(ch, ch->pcdata->locker, fp, 0, TRUE, FALSE);
save.c:			if (ch->pcdata->strongbox)
save.c:				fwrite_obj(ch, ch->pcdata->strongbox, fp, 0, FALSE, TRUE);
save.c:		if (ch->pcdata->locker)
save.c:			fwrite_obj(ch, ch->pcdata->locker, fp, 0, TRUE, FALSE);
save.c:		if (ch->pcdata->strongbox)
save.c:			fwrite_obj(ch, ch->pcdata->strongbox, fp, 0, FALSE, TRUE);
save.c:	fprintf(fp, "Mexp %d\n",   ch->pcdata->mud_exp		);
save.c:	fprintf(fp, "Pass %s~\n", ch->pcdata->pwd);
save.c:	fprintf(fp, "Plyd %d\n", ch->pcdata->played); /*w1*/
save.c:	fprintf(fp, "Back %d\n", ch->pcdata->backup);
save.c:		ch->pcdata->last_note,
save.c:		ch->pcdata->last_idea,
save.c:		ch->pcdata->last_roleplay,
save.c:		ch->pcdata->last_immquest,
save.c:		ch->pcdata->last_changes,
save.c:		ch->pcdata->last_personal,
save.c:		ch->pcdata->last_trade);
save.c:	fprintf(fp, "PCkills  %d\n", ch->pcdata->pckills);
save.c:	fprintf(fp, "PCkilled %d\n", ch->pcdata->pckilled);
save.c:	fprintf(fp, "Akills   %d\n", ch->pcdata->arenakills);
save.c:	fprintf(fp, "Akilled  %d\n", ch->pcdata->arenakilled);
save.c:	fprintf(fp, "PKRank   %d\n", ch->pcdata->pkrank);
save.c:	if (ch->pcdata->spouse != NULL)
save.c:		fprintf(fp, "Spou %s~\n", ch->pcdata->spouse);
save.c:	if (ch->pcdata->whisper != NULL)
save.c:		fprintf(fp, "Wspr %s~\n", ch->pcdata->whisper);
save.c:	if (ch->pcdata->partner != NULL)
save.c:		fprintf(fp, "Ptnr %s~\n", ch->pcdata->partner);
save.c:	if (ch->pcdata->mark_room)
save.c:		fprintf(fp, "Mark %d\n", ch->pcdata->mark_room);
save.c:		fprintf(fp, "Plr  %s\n", print_flags(ch->pcdata->plr));
save.c:		fprintf(fp, "Video %s\n", print_flags(ch->pcdata->video));
save.c:		fprintf(fp, "Cgrp %s\n", print_flags(ch->pcdata->cgroup));	/* Xenith */
save.c:                fprintf(fp, "Block_Remote %d\n", ch->pcdata->block_remote);
save.c:        fprintf(fp, "Lay %d\n", ch->pcdata->lays);
save.c:        fprintf(fp, "Lay_Next %d\n", ch->pcdata->next_lay_countdown);
save.c:     fprintf(fp, "Familiar %d\n", ch->pcdata->familiar);
save.c:	if (ch->pcdata->flag_killer)
save.c:		fprintf(fp, "FlagKiller %d\n", ch->pcdata->flag_killer);
save.c:	if (ch->pcdata->flag_thief)
save.c:		fprintf(fp, "FlagThief  %d\n", ch->pcdata->flag_thief);     
save.c:	if (ch->pcdata->skillpoints)
save.c:		fprintf(fp, "SkillPnts  %d\n", ch->pcdata->skillpoints);
save.c:	if (ch->pcdata->rolepoints)
save.c:		fprintf(fp, "RolePnts   %d\n", ch->pcdata->rolepoints);
save.c:	if (ch->pcdata->nextsquest)
save.c:		fprintf(fp, "SQuestNext %d\n", ch->pcdata->nextsquest);
save.c:	else if (ch->pcdata->sqcountdown)
save.c:        if (ch->pcdata->bamfin[0] != '\0')
save.c:            fprintf( fp, "Bin  %s~\n",  ch->pcdata->bamfin);
save.c:        if (ch->pcdata->bamfout[0] != '\0')
save.c:                fprintf( fp, "Bout %s~\n",      ch->pcdata->bamfout);
save.c:        if (ch->pcdata->gamein && ch->pcdata->gamein[0] != '\0')
save.c:            fprintf( fp, "GameIn  %s~\n",       ch->pcdata->gamein);
save.c:        if (ch->pcdata->gameout && ch->pcdata->gameout[0] != '\0')
save.c:                fprintf( fp, "GameOut %s~\n",   ch->pcdata->gameout);
save.c:        if (ch->pcdata->afk[0] != '\0')
save.c:                fprintf( fp, "Afk %s~\n",    ch->pcdata->afk);
save.c:        fprintf( fp, "Titl %s~\n",      ch->pcdata->title       );
save.c:        fprintf( fp, "Immn %s~\n",      ch->pcdata->immname     );
save.c:        fprintf( fp, "Pnts %d\n",       ch->pcdata->points      );
save.c:        fprintf( fp, "Rank %s~\n",      ch->pcdata->rank        );
save.c:        fprintf( fp, "Aura %s~\n",      ch->pcdata->aura        );
save.c:        fprintf( fp, "TSex %d\n",       ch->pcdata->true_sex    );
save.c:        fprintf( fp, "LLev %d\n",       ch->pcdata->last_level  );
save.c:        if (ch->pcdata->email[0] != '\0')
save.c:            fprintf( fp, "Email %s~\n",      ch->pcdata->email       );
save.c:        fprintf( fp, "Deit %s~\n",      ch->pcdata->deity       );
save.c:        if ( ch->pcdata->remort_count > 0 )
save.c:            fprintf( fp, "Stus %s~\n",      ch->pcdata->status      );
save.c:            fprintf( fp, "RmCt %d\n",       ch->pcdata->remort_count);
save.c:	    for(c = 0; c < (ch->pcdata->remort_count/20); c++)
save.c:		fprintf(fp,"%d ",	skill_table[ch->pcdata->extraclass[c]].slot);
save.c:            fprintf ( fp, "%d\n", skill_table[ch->pcdata->extraclass[ch->pcdata->remort_count/20]].slot);
save.c:	    for(c = 0; c < (ch->pcdata->remort_count/10); c++)
save.c:		fprintf(fp,"%d ",	ch->pcdata->raffect[c]);
save.c:            fprintf ( fp, "%d\n", ch->pcdata->raffect[ch->pcdata->remort_count/10]);
save.c:        fprintf( fp, "Lsit %s~\n",      ch->pcdata->last_lsite  );
save.c:        fprintf( fp, "Ltim %s~\n",      dizzy_ctime( &ch->pcdata->last_ltime  ) );
save.c:        fprintf( fp, "LSav %s~\n",      dizzy_ctime( &ch->pcdata->last_saved  ) );
save.c:        if (ch->pcdata->fingerinfo[0] != '\0')
save.c:        fprintf( fp, "Finf %s~\n",      ch->pcdata->fingerinfo  );
save.c:        fprintf( fp, "HMSP %d %d %d\n", ch->pcdata->perm_hit,
save.c:                                                   ch->pcdata->perm_mana,
save.c:                                                   ch->pcdata->perm_stam);
save.c:	fprintf( fp, "THMS %d %d %d\n", ch->pcdata->trains_to_hit,
save.c:						   ch->pcdata->trains_to_mana,
save.c:						   ch->pcdata->trains_to_stam);
save.c:            ch->pcdata->condition[0],
save.c:            ch->pcdata->condition[1],
save.c:            ch->pcdata->condition[2],
save.c:            ch->pcdata->condition[3] );
save.c:		if (ch->pcdata->color[i] > 0)
save.c:			fprintf(fp, "Colr %d %d %d\n", i, ch->pcdata->color[i], ch->pcdata->bold[i]);
save.c:            if (ch->pcdata->ignore[pos] == NULL)
save.c:            fprintf(fp, "Ignore %s~\n", ch->pcdata->ignore[pos]);
save.c:            if (ch->pcdata->alias[pos] == NULL
save.c:            ||  ch->pcdata->alias_sub[pos] == NULL)
save.c:            fprintf(fp,"Alias %s %s~\n",ch->pcdata->alias[pos],
save.c:                    ch->pcdata->alias_sub[pos]);
save.c:            if (ch->pcdata->query[pos] == NULL)
save.c:            fprintf(fp,"Query %s~\n",ch->pcdata->query[pos]);
save.c:            if ( ch->pcdata->learned[sn] > 0 )
save.c:		if (ch->pcdata->evolution[sn] < 1)
save.c:		    ch->pcdata->evolution[sn] = 1;
save.c:		else if (ch->pcdata->evolution[sn] > 4)
save.c:		    ch->pcdata->evolution[sn] = 4;
save.c:                    ch->pcdata->learned[sn], ch->pcdata->evolution[sn], skill_table[sn].name);
save.c:            if ( group_table[gn].name != NULL && ch->pcdata->group_known[gn])
save.c:       if (ch->pcdata->granted_commands[count][0])
save.c:         fprintf( fp, "Grant %s\n", ch->pcdata->granted_commands[count]);
save.c:    ch->pcdata->cgroup                  = 0; /* Command groups - Xenith */
save.c:    ch->pcdata->ch			= ch;
save.c:    ch->pcdata->confirm_delete          = 0;
save.c:    ch->pcdata->pwd                     = str_dup( "" );
save.c:    ch->pcdata->bamfin                  = str_dup( "" );
save.c:    ch->pcdata->bamfout                 = str_dup( "" );
save.c:    ch->pcdata->gamein                  = str_dup( "" );
save.c:    ch->pcdata->gameout                 = str_dup( "" );
save.c:    ch->pcdata->afk                     = str_dup( "" );
save.c:    ch->pcdata->title                   = str_dup( "" );
save.c:    ch->pcdata->immname                 = str_dup( "" );
save.c:    ch->pcdata->email                   = str_dup( "" );
save.c:    ch->pcdata->fingerinfo              = str_dup( "" );
save.c:    ch->pcdata->last_lsite              = str_dup( "" );
save.c:    ch->pcdata->status                  = str_dup( "" );
save.c:    ch->pcdata->rank                    = str_dup( "" );
save.c:    ch->pcdata->aura                    = str_dup( "" );
save.c:    ch->pcdata->deity                   = str_dup( "Nobody" );
save.c:    ch->pcdata->mud_exp			= MEXP_LEGACY_OLDBIE;
save.c:    ch->pcdata->remort_count            = 0;
save.c:    ch->pcdata->backup                  = 0;
save.c:    ch->pcdata->plr                     = PLR_NEWSCORE;
save.c:    ch->pcdata->flag_thief		= 0;
save.c:    ch->pcdata->flag_killer		= 0;
save.c:    ch->pcdata->condition[COND_THIRST]  = 48;
save.c:    ch->pcdata->condition[COND_FULL]    = 48;
save.c:    ch->pcdata->condition[COND_HUNGER]  = 48;
save.c:    ch->pcdata->pckills                 = 0;
save.c:    ch->pcdata->pckilled                = 0;
save.c:    ch->pcdata->arenakills              = 0;
save.c:    ch->pcdata->arenakilled             = 0;
save.c:    ch->pcdata->pkrank			= 0;
save.c:	ch->pcdata->perm_hit		= 20;
save.c:	ch->pcdata->perm_mana		= 100;
save.c:	ch->pcdata->perm_stam		= 100;
save.c:    ch->pcdata->trains_to_hit           = 0;
save.c:    ch->pcdata->trains_to_mana          = 0;
save.c:    ch->pcdata->trains_to_stam          = 0;
save.c:    ch->pcdata->skillpoints		= 0;
save.c:    ch->pcdata->rolepoints		= 0;
save.c:	ch->pcdata->last_logoff		= current_time;
save.c:	for (i = 0; ch->pcdata->remort_count && i <= ch->pcdata->remort_count / 10 + 1; i++)
save.c:		if (ch->pcdata->raffect[i] >= 900 && ch->pcdata->raffect[i] <= 949)
save.c:			SET_BIT(ch->vuln_flags, raffects[raff_lookup(ch->pcdata->raffect[i])].add);
save.c:		else if (ch->pcdata->raffect[i] >= 950 && ch->pcdata->raffect[i] <= 999)
save.c:			SET_BIT(ch->res_flags, raffects[raff_lookup(ch->pcdata->raffect[i])].add);
save.c:	percent = (current_time - ch->pcdata->last_logoff) * 25 / ( 2 * 60 * 60);
save.c:            FKY( "Afk",         ch->pcdata->afk );
save.c:            KEY( "Afk",         ch->pcdata->afk,        fread_string( fp ) );
save.c:            KEY( "Akills",      ch->pcdata->arenakills, fread_number( fp ) );
save.c:            KEY( "Akilled",     ch->pcdata->arenakilled,fread_number( fp ) );
save.c:            KEY( "Aura",        ch->pcdata->aura,       fread_string( fp ) );
save.c:                ch->pcdata->alias[count]        = str_dup(fread_word(fp));
save.c:                ch->pcdata->alias_sub[count]    = fread_string(fp);
save.c:            KEY( "Back",        ch->pcdata->backup,     fread_number(fp) );
save.c:            FKY( "Bin",         ch->pcdata->bamfin );
save.c:            KEY( "Bin",         ch->pcdata->bamfin,     fread_string( fp ) );
save.c:            KEY( "Block_Remote",ch->pcdata->block_remote, fread_number( fp ) );
save.c:            FKY( "Bout",        ch->pcdata->bamfout );
save.c:            KEY( "Bout",        ch->pcdata->bamfout,    fread_string( fp ) );
save.c://            KEY( "Cgrp",        ch->pcdata->cgroup,     fread_flag(fp)); 
save.c:			ch->pcdata->cgroup |= fread_flag(fp);
save.c:                ch->pcdata->condition[0] = fread_number( fp );
save.c:                ch->pcdata->condition[1] = fread_number( fp );
save.c:                ch->pcdata->condition[2] = fread_number( fp );
save.c:                ch->pcdata->condition[3] = fread_number( fp );
save.c:			ch->pcdata->color[slot] = fread_number(fp);
save.c:			ch->pcdata->bold[slot]  = fread_number(fp);
save.c:            FKY( "Deit",        ch->pcdata->deity );
save.c:            KEY( "Deit",        ch->pcdata->deity,      fread_string( fp ) );
save.c:            FKY( "Email",       ch->pcdata->email );
save.c:            KEY( "Email",       ch->pcdata->email,      fread_string( fp ) );
save.c:		for(c = 0; c < ch->pcdata->remort_count/20+1; c++)
save.c:				ch->pcdata->extraclass[c] = i;
save.c:			    ch->pcdata->extraclass[c] = 0;
save.c:			ch->pcdata->extraclass[c] = 0;
save.c:            KEY( "Familiar",    ch->pcdata->familiar,   fread_number(fp));
save.c:            FKY( "Finf",        ch->pcdata->fingerinfo );
save.c:            KEY( "Finf",        ch->pcdata->fingerinfo, fread_string( fp ) );
save.c:            KEY( "FlagThief",   ch->pcdata->flag_thief, fread_number(fp));
save.c:            KEY( "FlagKiller",  ch->pcdata->flag_killer, fread_number(fp));
save.c:            FKY( "GameIn",         ch->pcdata->gamein );
save.c:            KEY( "GameIn",         ch->pcdata->gamein,     fread_string( fp ) );
save.c:            FKY( "GameOut",        ch->pcdata->gameout );
save.c:            KEY( "GameOut",        ch->pcdata->gameout,    fread_string( fp ) );
save.c:               strcpy( ch->pcdata->granted_commands[grant_count], fread_word( fp ) );
save.c:			ch->pcdata->perm_hit	= fread_number(fp);
save.c:			ch->pcdata->perm_mana	= fread_number(fp);
save.c:			ch->pcdata->perm_stam	= fread_number(fp);
save.c:            FKY( "Immn",        ch->pcdata->immname );
save.c:            KEY( "Immn",        ch->pcdata->immname,    fread_string( fp ) );
save.c:                ch->pcdata->ignore[count3]        =      fread_string(fp);
save.c:            KEY( "Lay",         ch->pcdata->lays,       fread_number( fp ) );
save.c:            KEY( "Lay_Time",    ch->pcdata->next_lay_countdown ,          fread_number( fp ) );
save.c:            KEY( "LLev",        ch->pcdata->last_level, fread_number( fp ) );
save.c:            KEY( "LogO",        ch->pcdata->last_logoff,fread_number( fp ) );
save.c:            FKY( "Lsit",        ch->pcdata->last_lsite );
save.c:            KEY( "Lsit",        ch->pcdata->last_lsite, fread_string( fp ) );
save.c:            FKY( "Ltim",        ch->pcdata->last_ltime );
save.c:                ch->pcdata->last_ltime = dizzy_scantime( tmp_string );
save.c:            FKY( "LSav",        ch->pcdata->last_saved );
save.c:                ch->pcdata->last_saved = dizzy_scantime( tmp_string );
save.c:            KEY( "Mark",        ch->pcdata->mark_room,  fread_number( fp ) );
save.c:		KEY("Mexp",	ch->pcdata->mud_exp,	fread_number(fp));
save.c:                ch->pcdata->last_note                   = fread_number(fp);
save.c:                ch->pcdata->last_idea                   = fread_number(fp);
save.c:                ch->pcdata->last_roleplay               = fread_number(fp);
save.c:                ch->pcdata->last_immquest               = fread_number(fp);
save.c:                ch->pcdata->last_changes                = fread_number(fp);
save.c:                ch->pcdata->last_personal               = fread_number(fp);
save.c:			ch->pcdata->last_trade		= fread_number(fp);
save.c:			ch->pcdata->last_trade		= 0;
save.c:            FKY( "Pass",        ch->pcdata->pwd );
save.c:            KEY( "Pass",        ch->pcdata->pwd,        fread_string( fp ) );
save.c:            KEY( "PCkills",     ch->pcdata->pckills,    fread_number( fp ) );
save.c:            KEY( "PCkilled",    ch->pcdata->pckilled,   fread_number( fp ) );
save.c:	    KEY( "PKRank",	ch->pcdata->pkrank,	fread_number( fp ) );
save.c:            KEY( "Plyd",        ch->pcdata->played,     fread_number( fp ) );
save.c:            KEY( "Plr",         ch->pcdata->plr,        fread_flag( fp ) );
save.c:            KEY( "Pnts",        ch->pcdata->points,     fread_number( fp ) );
save.c:            KEY( "Ptnr",        ch->pcdata->partner,    fread_string( fp ) );
save.c:                ch->pcdata->query[count2]        = str_dup(fread_string(fp));
save.c:            FKY( "Rank",        ch->pcdata->rank );
save.c:            KEY( "Rank",        ch->pcdata->rank,         fread_string( fp ) );
save.c://            KEY( "RmCt",        ch->pcdata->remort_count, fread_number( fp ) );
save.c:			ch->pcdata->remort_count = fread_number(fp);
save.c:            KEY( "RolePnts",    ch->pcdata->rolepoints,   fread_number( fp ) );
save.c:		for(c = 0; c < ch->pcdata->remort_count/10+1; c++)
save.c:		    ch->pcdata->raffect[c] = fread_number( fp );
save.c:            KEY( "SkillPnts",   ch->pcdata->skillpoints,fread_number( fp ) );
save.c:            FKY( "Stus",        ch->pcdata->status );
save.c:            KEY( "Stus",        ch->pcdata->status,     fread_string( fp ) );
save.c:            KEY( "Spou",        ch->pcdata->spouse,     fread_string( fp ) );
save.c:            KEY( "SQuestNext",  ch->pcdata->nextsquest, fread_number( fp ) );
save.c:                    ch->pcdata->learned[sn] = value;
save.c:		    ch->pcdata->evolution[sn] = evol;
save.c:                ch->pcdata->trains_to_hit    = fread_number( fp );
save.c:                ch->pcdata->trains_to_mana   = fread_number( fp );
save.c:                ch->pcdata->trains_to_stam   = fread_number( fp );
save.c:            KEY( "TSex",        ch->pcdata->true_sex,   fread_number( fp ) );
save.c:                free_string( ch->pcdata->title );
save.c:                ch->pcdata->title = fread_string( fp );
save.c:                if (ch->pcdata->title[0] != '.' && ch->pcdata->title[0] != ','
save.c:                &&  ch->pcdata->title[0] != '!' && ch->pcdata->title[0] != '?')
save.c:                    sprintf( buf, " %s", ch->pcdata->title );
save.c:                    free_string( ch->pcdata->title );
save.c:                    ch->pcdata->title = str_dup( buf );
save.c:            KEY( "Video",       ch->pcdata->video,      fread_flag( fp ) );
save.c:            KEY( "Wspr",        ch->pcdata->whisper,    fread_string( fp ) );
save.c:		if (IS_SET(ch->pcdata->plr, PLR_SHOWEMAIL))
save.c:			REMOVE_BIT(ch->pcdata->plr, PLR_SHOWEMAIL);
save.c:			SET_BIT(ch->pcdata->plr, PLR_SHOWEMAIL);
set-stat.c:                victim->pcdata->learned[sn]     = value;
set-stat.c:        victim->pcdata->learned[sn] = value;
set-stat.c:				victim->pcdata->learned[x],
set-stat.c:				victim->pcdata->evolution[x]);
set-stat.c:					victim->pcdata->evolution[x] == 1 ?
set-stat.c:					victim->pcdata->evolution[x] + 1);
set-stat.c:	victim->pcdata->evolution[sn] = value;
set-stat.c:	if (victim->pcdata->raffect == NULL)
set-stat.c:	for (i = 0; i < ((victim->pcdata->remort_count / 10) + 1); i++)
set-stat.c:	    rindex = raff_lookup(victim->pcdata->raffect[i]);
set-stat.c:	    rem_raff_affect(victim,raff_lookup(victim->pcdata->raffect[i]));
set-stat.c:    	    victim->pcdata->raffect[i] = 0;
set-stat.c:	for (i = 0; i < ((victim->pcdata->remort_count / 10) + 1); i++)
set-stat.c:	    if (victim->pcdata->raffect[i] < 1)
set-stat.c:    	for (i = 0; i < ((victim->pcdata->remort_count / 10) + 1); i++)
set-stat.c:    	    if (victim->pcdata->raffect[i] == atoi(arg2))
set-stat.c:		victim->pcdata->raffect[i] = 0;
set-stat.c:    for (i = 0; i < ((victim->pcdata->remort_count / 10) + 1); i++)
set-stat.c:	if (victim->pcdata->raffect[i] < 1)
set-stat.c:	    victim->pcdata->raffect[i] = atoi(arg2);
set-stat.c:	if ((victim->pcdata->extraclass[0] +
set-stat.c:	     victim->pcdata->extraclass[1] +
set-stat.c:	     victim->pcdata->extraclass[2] +
set-stat.c:	     victim->pcdata->extraclass[3] +
set-stat.c:	     victim->pcdata->extraclass[4]) > 0)
set-stat.c:	    sprintf(buf,"Their current extraclass skill%s",victim->pcdata->extraclass[1] ? "s are" : " is");
set-stat.c:	    if (victim->pcdata->extraclass[0])
set-stat.c:		sprintf(buf," %s",skill_table[victim->pcdata->extraclass[0]].name);
set-stat.c:	    for (x = 1; x < victim->pcdata->remort_count / 20 + 1; x++)
set-stat.c:		if (victim->pcdata->extraclass[x])
set-stat.c:		    sprintf(buf,", %s",skill_table[victim->pcdata->extraclass[x]].name);
set-stat.c:    	    victim->pcdata->extraclass[i] = 0;
set-stat.c:    	for (x = 0; x < victim->pcdata->remort_count / 20 + 1; x++)
set-stat.c:    	    if (victim->pcdata->extraclass[x] == sn)
set-stat.c:    		victim->pcdata->extraclass[x] = 0;
set-stat.c:    for (x = 0; x < victim->pcdata->remort_count / 20 + 1; x++)
set-stat.c:	if (victim->pcdata->extraclass[x] <= 0)
set-stat.c:	    victim->pcdata->extraclass[x] = sn;
set-stat.c:	    if (!victim->pcdata->learned[sn])
set-stat.c:		victim->pcdata->learned[sn] = 1;
set-stat.c:			victim->pcdata->true_sex = value;
set-stat.c:			victim->pcdata->perm_hit = value;
set-stat.c:			victim->pcdata->perm_mana = value;
set-stat.c:			victim->pcdata->perm_stam = value;
set-stat.c:		victim->pcdata->remort_count = value;
set-stat.c:		victim->pcdata->played = value * 3600;
set-stat.c:		victim->pcdata->nextsquest = value;
set-stat.c:		victim->pcdata->skillpoints = value;
set-stat.c:		victim->pcdata->rolepoints = value;
set-stat.c:		victim->pcdata->condition[COND_THIRST] = value;
set-stat.c:		victim->pcdata->condition[COND_DRUNK] = value;
set-stat.c:		victim->pcdata->condition[COND_FULL] = value;
set-stat.c:		victim->pcdata->condition[COND_HUNGER] = value;
set-stat.c:		victim->pcdata->pckills = value;
set-stat.c:		victim->pcdata->pckilled = value;
set-stat.c:		victim->pcdata->arenakills = value;
set-stat.c:		victim->pcdata->arenakilled = value;
set-stat.c:		victim->pcdata->pkrank = value;
set-stat.c:		victim->pcdata->flag_thief = value;
set-stat.c:		victim->pcdata->flag_killer = value;
set-stat.c:		ptc(ch, "{CRemort %d, {x", victim->pcdata->remort_count);
set-stat.c:			victim->pcdata->flag_killer, victim->pcdata->flag_thief);
set-stat.c:		(!IS_NPC(victim) ? victim->pcdata->condition[COND_THIRST] : -1),
set-stat.c:		(!IS_NPC(victim) ? victim->pcdata->condition[COND_HUNGER] : -1),
set-stat.c:		(!IS_NPC(victim) ? victim->pcdata->condition[COND_FULL] : -1),
set-stat.c:		(!IS_NPC(victim) ? victim->pcdata->last_level : -1),
set-stat.c:		(!IS_NPC(victim) ? victim->pcdata->condition[COND_DRUNK] : -1),
set-stat.c:		if (victim->pcdata->email != '\0')
set-stat.c:			ptc(ch, "Email: %s\n\r",victim->pcdata->email);
set-stat.c:		ptc(ch, "{WPlr: %s\n\r",plr_bit_name(victim->pcdata->plr));
set-stat.c:		if (victim->pcdata->cgroup && IS_IMP(ch))
set-stat.c:			ptc(ch, "{WCommand Groups: %s\n\r", cgroup_bit_name(victim->pcdata->cgroup));
set-stat.c:	if (!IS_NPC(victim) && victim->pcdata->mark_room != 0)
set-stat.c:		ptc(ch, "MARKed room: %d\n\r", victim->pcdata->mark_room);
set-stat.c:	if (!IS_NPC(victim) && victim->pcdata->raffect[0] != 0)
set-stat.c:		id = (raff_lookup(victim->pcdata->raffect[0]));
set-stat.c:		for (raff = 1; raff < ((victim->pcdata->remort_count / 10) + 1); raff++)
set-stat.c:			id = (raff_lookup(victim->pcdata->raffect[raff]));
set-stat.c:	if (victim->pcdata->title && victim->pcdata->title[0])
set-stat.c:		stc(victim->pcdata->title, ch);
set-stat.c:	if (victim->pcdata->remort_count)
set-stat.c:		ptc(ch, "/R%d", victim->pcdata->remort_count);
set-stat.c:	if (victim->pcdata->email && victim->pcdata->email[0])
set-stat.c:		ptc(ch, "Email: %s\n\r", victim->pcdata->email);
set-stat.c:	ptc(ch, "      SP:  %-5d\n\r", victim->pcdata->skillpoints);
set-stat.c:	ptc(ch, "      RPP: %d\n\r", victim->pcdata->rolepoints);
set-stat.c:	xpl = exp_per_level(victim, victim->pcdata->points);
set-stat.c:		IS_SET(victim->pcdata->plr,	PLR_LINK_DEAD) ?	"{G(LinkDead) "	: "",
skills.c:	if (ch->pcdata->group_known[gn])
skills.c:		if (ch->pcdata->learned[skill_lookup(group_table[gn].spells[i])] <= 0)
skills.c:			ptc(ch, "%c %-22s", ch->pcdata->group_known[gn] ? '*' : ' ', group_table[gn].name );
skills.c:				if (ch->pcdata->learned[sn] <= 0
skills.c:		if (ch->pcdata->learned[sn] <= 0
skills.c:			sprintf( buf, "[{V%3d%% %3d Ma{x] ", ch->pcdata->learned[sn], get_skill_cost(ch, sn));
skills.c:			if (ch->pcdata->learned[sn] <= 0
skills.c:		if (ch->pcdata->learned[sn] <= 0
skills.c:			sprintf(buf, "[{G%3d%% %3d St{x] ", ch->pcdata->learned[sn], get_skill_cost(ch, sn));
skills.c:		 && !ch->pcdata->group_known[gn]
skills.c:		 &&  ch->pcdata->learned[sn] == 0
skills.c:		ch->pcdata->points,
skills.c:    if ( ch->pcdata->remort_count > 1 )
skills.c:        expl += (1000 * (ch->pcdata->remort_count - 1));
skills.c:            ||  ch->pcdata->group_known[gn])
skills.c:            ch->pcdata->points += group_table[gn].rating[ch->class];
skills.c:            ||  ch->pcdata->learned[sn] > 0)
skills.c:            ch->pcdata->learned[sn] = 1;
skills.c:		ch->pcdata->evolution[sn] = 1;
skills.c:            ch->pcdata->points += skill_table[sn].rating[ch->class];
skills.c:            ch->pcdata->points -= group_table[gn].rating[ch->class];
skills.c:            ch->pcdata->learned[sn] = 0;
skills.c:		ch->pcdata->evolution[sn] = 0;
skills.c:            ch->pcdata->points -= skill_table[sn].rating[ch->class];
skills.c:            if (ch->pcdata->group_known[gn])
skills.c:        sprintf(buf,"Creation points: %d\n\r",ch->pcdata->points);
skills.c:    ||  ch->pcdata->learned[sn] == 0
skills.c:    ||  ch->pcdata->learned[sn] == 100)
skills.c:    if ( ch->pcdata->remort_count > 1 )
skills.c:        xp /= ch->pcdata->remort_count;
skills.c:        chance = URANGE(5,100 - ch->pcdata->learned[sn], 95);
skills.c:            ch->pcdata->learned[sn]++;
skills.c:        chance = URANGE(5,ch->pcdata->learned[sn]/2,30);
skills.c:            ch->pcdata->learned[sn] += number_range(1,3);
skills.c:            ch->pcdata->learned[sn] = UMIN(ch->pcdata->learned[sn],100);
skills.c:    ch->pcdata->group_known[gn] = TRUE;
skills.c:    ch->pcdata->group_known[gn] = FALSE;
skills.c:        if (ch->pcdata->learned[sn] == 0) /* i.e. not known */
skills.c:            ch->pcdata->learned[sn] = 1;
skills.c:		ch->pcdata->evolution[sn] = 1;
skills.c:                ch->pcdata->points += skill_table[sn].rating[ch->class];
skills.c:        if (ch->pcdata->group_known[gn] == FALSE)
skills.c:            ch->pcdata->group_known[gn] = TRUE;
skills.c:                ch->pcdata->points += group_table[gn].rating[ch->class];
skills.c:        ch->pcdata->learned[sn] = 0;
skills.c:	ch->pcdata->evolution[sn] = 0;
skills.c:    if (gn != -1 && ch->pcdata->group_known[gn] == TRUE)
skills.c:        ch->pcdata->group_known[gn] = FALSE;
skills.c:		evolution = URANGE(1, ch->pcdata->evolution[sn], 4);
skills.c:		else if (ch->pcdata->evolution[sn] >= 4)
skills.c:	if (ch->pcdata->learned[sn] <= 0)
skills.c:		if (ch->pcdata->evolution[sn] >= 2)
skills.c:		if (ch->pcdata->evolution[sn] >= 3)
skills.c:		if (ch->pcdata->learned[x] < 1)
skills.c:			ch->pcdata->learned[x],
skills.c:			ch->pcdata->evolution[x]);
skills.c:				ch->pcdata->evolution[x] == 1 ?
skills.c:	ptb(buffer, "\n\rYou have %d skill points to spend.\n\r", ch->pcdata->skillpoints);
skills.c:	if (ch->pcdata->learned[sn] < 1 && special < 1)
skills.c:	else if (ch->pcdata->evolution[sn] == 1 && special == 0)
skills.c:	else if (ch->pcdata->evolution[sn] == 1 && special == 1)
skills.c:	if (ch->pcdata->skillpoints < cost)
skills.c:	if (ch->pcdata->learned[sn] < perc && special < 1)
skills.c:			type, ch->pcdata->learned[sn], perc);
skills.c:	ch->pcdata->skillpoints -= cost;
skills.c:	ch->pcdata->evolution[sn]++;
skills.c:		ch->pcdata->learned[sn] = 1;
skills.c:			if (!ch->pcdata->learned[sn]
skills.c:		if (ch->pcdata->remort_count < 1)
skills.c:			if (!ch->pcdata->learned[sn]
skills.c:		if (ch->pcdata->points <= 40)
skills.c:		mod = ch->exp - (exp_per_level(ch, ch->pcdata->points) * ch->level);
skills.c:		ch->pcdata->points--;
skills.c:		ch->exp = UMIN(exp_per_level(ch, ch->pcdata->points) * ch->level + mod,
skills.c:			       exp_per_level(ch, ch->pcdata->points) * (ch->level+1) -1);
skills.c:		if (ch->pcdata->group_known[gn])
skills.c:			if (ch->pcdata->remort_count < 1)
skills.c:		if (ch->pcdata->learned[sn])
skills.c:		ch->pcdata->learned[sn] = 1;
skills.c:		ch->pcdata->evolution[sn] = 1;
skills.c:   ch->pcdata->skillpoints -= use_points;
skills.c:           ch->pcdata->skillpoints, ch->practice);
special.c:Newly made familiars cause the pcdata->familiar field to
special.c:   if (ch->pcdata->familiar)
special.c:   ch->pcdata->familiar = max_position + 1;
update.c:	ch->pcdata->last_level = get_play_hours(ch);
update.c:	ch->pcdata->perm_hit	-= sub_hp;
update.c:	ch->pcdata->perm_mana	-= sub_mana;
update.c:	ch->pcdata->perm_stam	-= sub_stam;
update.c:	if (ch->pcdata->perm_hit < 20)		ch->pcdata->perm_hit = 20;
update.c:	if (ch->pcdata->perm_mana < 100)	ch->pcdata->perm_mana = 100;
update.c:	if (ch->pcdata->perm_stam < 100)	ch->pcdata->perm_stam = 100;
update.c:	ch->pcdata->last_level = get_play_hours( ch );
update.c:	ch->pcdata->perm_hit	+= add_hp;
update.c:	ch->pcdata->perm_mana	+= add_mana;
update.c:	ch->pcdata->perm_stam	+= add_stam;
update.c:	ch->exp = UMAX( exp_per_level(ch,ch->pcdata->points), ch->exp + gain );
update.c:	while ((ch->exp >= exp_per_level(ch, ch->pcdata->points) * (ch->level + 1))
update.c:        if ( ch->pcdata->condition[COND_HUNGER] == 0 )
update.c:        if ( ch->pcdata->condition[COND_THIRST] == 0 )
update.c:		if (ch->pcdata->condition[COND_HUNGER] == 0)
update.c:		if ( ch->pcdata->condition[COND_THIRST] == 0 )
update.c:		if (ch->pcdata->condition[COND_HUNGER] == 0)
update.c:		if ( ch->pcdata->condition[COND_THIRST] == 0 )
update.c:			ch->pcdata->condition[iCond] = 100;
update.c:			ch->pcdata->condition[iCond] = 100;
update.c:	if ((condition = ch->pcdata->condition[iCond]) == -1)
update.c:	ch->pcdata->condition[iCond] = URANGE(0, condition + value, 48);
update.c:	if (!IS_SET(ch->pcdata->plr, PLR_CHATMODE))
update.c:		if (ch->pcdata->condition[iCond] == 0)
update.c:        if ( !IS_NPC(ch) && ch->pcdata->familiar)
update.c:               ch->pcdata->familiar -= 1;   /* remove +1 to stat position */
update.c:               ch->mod_stat[ch->pcdata->familiar] -= 1;
update.c:               if ( (ch->perm_stat[ch->pcdata->familiar] + ch->mod_stat[ch->pcdata->familiar]) < 3)
update.c:                  ch->mod_stat[ch->pcdata->familiar] += 1;
update.c:               if ( (ch->perm_stat[ch->pcdata->familiar] + ch->mod_stat[ch->pcdata->familiar]) > 25)
update.c:                  ch->mod_stat[ch->pcdata->familiar] -= 1;
update.c:               ch->pcdata->familiar = 0;
update.c:           if (ch->pcdata->lays > 10) ch->pcdata->lays = 10;
update.c:           if (ch->pcdata->lays < 0) ch->pcdata->lays = 0;
update.c:           if (ch->pcdata->next_lay_countdown > NEW_LAY_COUNTER)
update.c:              ch->pcdata->next_lay_countdown = NEW_LAY_COUNTER;
update.c:           ch->pcdata->next_lay_countdown--;
update.c:           if (ch->pcdata->next_lay_countdown < 1)
update.c:             ch->pcdata->lays = (ch->level / 10) + 1;
update.c:             ch->pcdata->next_lay_countdown = NEW_LAY_COUNTER;
update.c:            if (ch->pcdata->flag_killer == 0 && IS_SET(ch->act,PLR_KILLER)) 
update.c:            if (ch->pcdata->flag_killer > 0 && IS_SET(ch->act,PLR_KILLER)) 
update.c:	    	ch->pcdata->flag_killer--;
update.c:	    if(ch->pcdata->flag_thief==0 && IS_SET(ch->act,PLR_THIEF))
update.c:	    if (ch->pcdata->flag_thief > 0 && IS_SET(ch->act,PLR_THIEF))
update.c:	    	ch->pcdata->flag_thief--;
update.c:		 && IS_SET(ch->pcdata->plr, PLR_SQUESTOR)
update.c:		 && ch->pcdata->squestmob != NULL
update.c:		 && ch->pcdata->squestobj == NULL)
update.c:				if (IS_NPC(mob) && mob == ch->pcdata->squestmob && can_see(mob, ch))
update.c:			wch->pcdata->played++;
update.c:			if (ch->pcdata->nextsquest > 0)
update.c:				ch->pcdata->nextsquest--;
update.c:				if (ch->pcdata->nextsquest == 0)
update.c:			else if (IS_SET(ch->pcdata->plr, PLR_SQUESTOR))
update.c:				if (--ch->pcdata->sqcountdown <= 0)
update.c:					ch->pcdata->nextsquest = 0;
update.c:				if (ch->pcdata->sqcountdown > 0 && ch->pcdata->sqcountdown < 6)
war.c:	     if (ch->pcdata->pkrank - victim->pcdata->pkrank > 3)	points = 1;
war.c:	else if (ch->pcdata->pkrank - victim->pcdata->pkrank > 1)	points = 2;
war.c:	else if (victim->pcdata->pkrank - ch->pcdata->pkrank > 3)	points = 4;
war.c:	else if (victim->pcdata->pkrank - ch->pcdata->pkrank > 1)	points = 5;
wiz_coder.c:	victim->exp = exp_per_level(victim,victim->pcdata->points) * UMAX(1, victim->level);
wiz_coder.c:	ch->pcdata->cgroup = GROUP_CLAN|GROUP_AVATAR|GROUP_HERO
wiz_gen.c:                    !IS_NPC(victim) ? victim->pcdata->skillpoints : 0);
wiz_gen.c:		if (IS_SET(victim->pcdata->cgroup, GROUP_LEADER))
wiz_gen.c:			if (IS_SET(victim->pcdata->cgroup, GROUP_DEPUTY))
wiz_gen.c:	if (IS_SET(victim->pcdata->cgroup, GROUP_LEADER))
wiz_gen.c:		if (IS_SET(victim->pcdata->cgroup, GROUP_DEPUTY))
wiz_gen.c:		if (IS_SET(victim->pcdata->cgroup, GROUP_DEPUTY))
wiz_gen.c:			if (IS_SET(victim->pcdata->cgroup, GROUP_LEADER))
wiz_gen.c:	if (IS_SET(victim->pcdata->cgroup, GROUP_DEPUTY))
wiz_gen.c:		if (IS_SET(victim->pcdata->cgroup, GROUP_LEADER))
wiz_gen.c:			if (ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0')
wiz_gen.c:				act("$t",ch,ch->pcdata->bamfout,rch,TO_VICT);
wiz_gen.c:			if (ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0')
wiz_gen.c:				act("$t",ch,ch->pcdata->bamfin,rch,TO_VICT);
wiz_gen.c:		if (IS_SET(ch->pcdata->plr, PLR_HEEDNAME))
wiz_gen.c:			REMOVE_BIT(ch->pcdata->plr, PLR_HEEDNAME);
wiz_gen.c:			SET_BIT(ch->pcdata->plr, PLR_HEEDNAME);
wiz_gen.c:	if (IS_SET(truevictim->pcdata->plr, PLR_LINK_DEAD))
wiz_gen.c:		IS_SET(ch->pcdata->plr, PLR_HEEDNAME) ? ch->name : "An Immortal", argument);
wiz_gen.c:		victim->pcdata->next = pc_list;
wiz_gen.c:			SET_BIT(victim->pcdata->plr, PLR_LINK_DEAD);
wiz_gen.c:		if (!OUTRANKS(ch, victim) && !IS_SET(victim->pcdata->plr, PLR_LINK_DEAD))
wiz_gen.c:        msgptr = &victim->pcdata->gamein;
wiz_gen.c:        msgptr = &victim->pcdata->gameout;
wiz_gen.c:            if (ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0')
wiz_gen.c:                act("$t",ch,ch->pcdata->bamfout,rch,TO_VICT);
wiz_gen.c:            if (ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0')
wiz_gen.c:                act("$t",ch,ch->pcdata->bamfin,rch,TO_VICT);
wiz_gen.c:				SET_BIT(victim->pcdata->cgroup, cgroup_flags[count].bit);
wiz_gen.c:				REMOVE_BIT(victim->pcdata->cgroup, cgroup_flags[count].bit);
wiz_gen.c:	victim->pcdata->perm_hit	= 30000;
wiz_gen.c:	victim->pcdata->perm_mana	= 30000;
wiz_gen.c:	victim->pcdata->perm_stam	= 30000;
wiz_gen.c:			victim->pcdata->learned[sn] = 100;
wiz_gen.c:		if (ch->pcdata->aura[0] == '\0')
wiz_gen.c:			ptc(ch, "Your aura is currently {W(%s{W){x.\n\r", ch->pcdata->aura);
wiz_gen.c:		ptc(ch, "Their aura is currently {W(%s{W){x.\n\r", victim->pcdata->aura);
wiz_gen.c:		free_string(victim->pcdata->aura);
wiz_gen.c:		victim->pcdata->aura = str_dup("");
wiz_gen.c:	free_string(victim->pcdata->aura);
wiz_gen.c:	victim->pcdata->aura = str_dup(argument);
wiz_gen.c:	ptc(victim, "Your aura is now {W(%s{W){x.\n\r", victim->pcdata->aura);
wiz_gen.c:	ptc(ch, "Their aura is now {W(%s{W){x.\n\r", victim->pcdata->aura);
wiz_gen.c:		ptc(ch, "Your poofin is currently: %s\n\r", ch->pcdata->bamfin);
wiz_gen.c:	free_string(ch->pcdata->bamfin);
wiz_gen.c:	ch->pcdata->bamfin = str_dup(argument);
wiz_gen.c:	ptc(ch, "Your poofin is now: %s\n\r", ch->pcdata->bamfin);
wiz_gen.c:		ptc(ch, "Your poofout is currently: %s\n\r", ch->pcdata->bamfout);
wiz_gen.c:	free_string(ch->pcdata->bamfout);
wiz_gen.c:	ch->pcdata->bamfout = str_dup(argument);
wiz_gen.c:	ptc(ch, "Your poofout is now: %s\n\r", ch->pcdata->bamfout);
wiz_gen.c:         if (! strcmp(argument, victim->pcdata->granted_commands[grant_index]) )
wiz_gen.c:          victim->pcdata->granted_commands[grant_index][0] = '\0';
wiz_gen.c:         if ( victim->pcdata->granted_commands[grant_index][0] )
wiz_gen.c:          strcpy(victim->pcdata->granted_commands[grant_index], argument);
wiz_gen.c:            if (ch->pcdata->granted_commands[count][0])
wiz_gen.c:               stc(ch->pcdata->granted_commands[count], ch);
wiz_gen.c:         if (victim->pcdata->granted_commands[count][0])
wiz_gen.c:            stc(victim->pcdata->granted_commands[count], ch);
wiz_gen.c:      if (ch->pcdata->granted_commands[count][0])
wiz_gen.c:         stc(ch->pcdata->granted_commands[count], ch);
wiz_quest.c:			sprintf(buf,"%-14s {V%5d{x\n\r", victim->name, victim->pcdata->rolepoints);
wiz_quest.c:		victim->pcdata->rolepoints += rppoint;
wiz_quest.c:		if (rppoint > victim->pcdata->rolepoints)
wiz_quest.c:		victim->pcdata->rolepoints -= rppoint;
wiz_quest.c:			rppoint, victim->pcdata->rolepoints);
wiz_quest.c:			ch->name, rppoint, victim->name, victim->pcdata->rolepoints);
wiz_quest.c:			free_string(victim->pcdata->spouse);
wiz_quest.c:			victim->pcdata->spouse = '\0';
wiz_quest.c:			free_string(victim->pcdata->spouse);
wiz_quest.c:			victim->pcdata->spouse = str_dup(arg3);
wiz_quest.c:            free_string(victim->pcdata->deity);
wiz_quest.c:            victim->pcdata->deity = str_dup( arg3 );
wiz_quest.c:            free_string(victim->pcdata->status);
wiz_quest.c:            victim->pcdata->status = str_dup( arg3 );
wiz_quest.c:      if (ch->desc->character->pcdata->buffer->string[0] != '\0')
wiz_quest.c:      victim->pcdata->skillpoints += new_points;
wiz_quest.c:              new_points, victim->name, victim->pcdata->skillpoints);
wiz_quest.c:      if (victim->pcdata->skillpoints < new_points)
wiz_quest.c:         victim->pcdata->skillpoints -= new_points;
wiz_quest.c:                 new_points, victim->name, victim->pcdata->skillpoints);
wiz_secure.c:	 && !IS_SET(victim->pcdata->plr, PLR_LINK_DEAD)
wiz_secure.c:	 && !IS_SET(victim->pcdata->plr, PLR_SNOOP_PROOF))
wiz_secure.c:		show_list_to_char(victim->pcdata->locker, ch, TRUE, TRUE, TRUE);
wiz_secure.c:		if ((obj = get_obj_list(ch, argument, victim->pcdata->locker)) == NULL)
wiz_secure.c:		show_list_to_char(victim->pcdata->strongbox, ch, TRUE, TRUE, TRUE);
wiz_secure.c:		if ((obj = get_obj_list(ch, argument, victim->pcdata->strongbox)) == NULL)
wiz_secure.c:	free_string(victim->pcdata->pwd);
wiz_secure.c:	victim->pcdata->pwd = str_dup(pwdnew);
wiz_secure.c:		ch->pcdata->flag_killer = 0;
wiz_secure.c:		ch->pcdata->flag_thief = 0;
wiz_secure.c:	if (IS_SET(victim->pcdata->plr, PLR_SNOOP_PROOF))
wiz_secure.c:		REMOVE_BIT(victim->pcdata->plr, PLR_SNOOP_PROOF);
wiz_secure.c:		SET_BIT(victim->pcdata->plr, PLR_SNOOP_PROOF);
wiz_secure.c:		ch->pcdata->tailing = FALSE;
wiz_secure.c:		ch->pcdata->tailing = TRUE;
wiz_secure.c:	if ((IS_IMMORTAL(victim) || IS_SET(victim->pcdata->plr, PLR_SNOOP_PROOF)) && !IS_IMP(ch))
